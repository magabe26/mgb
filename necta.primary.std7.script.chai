/**
 * Copyright 2022-2023 , MagabeLab (Tanzania). All Rights Reserved.
 * Author Edwin Magabe    edyma24@gmail.com
 */

/* --------------  extensions  ---------------*/

def getScriptRunnerVersion() {
   try {
      return scriptRunnerVersion();
   } catch {
      return 1;
   }
}

def getAppPackageName() {
   try {
      return getPackageName();
   } catch {
      return "com.magabe.n3cta.matokeo.ya.darasa.la.saba";
   }
}

def packageNameToUrl(string packageName) {
   return "https://play.google.com/store/apps/details?id=".append(packageName);
}

def boolToString(bool b) {
   return b ? "true" : "false";
}


def string::indexOf(string s, int start, bool caseSensitive) {
   return strIndexOf(this, s, start, caseSensitive);
}

def string::contains(string s, bool caseSensitive) {
   return strContains(this, s, caseSensitive);
}

def string::remove(string s, bool caseSensitive) {
   return strRemove(this, s, caseSensitive);
}

def string::right(int n) {
   return strRight(this, n);
}

def string::left(int n) {
   return strLeft(this, n);
}

def string::mid(int position, int n) {
   return strMid(this, position, n);
}

def string::length() {
   return strLength(this);
}

def string::replace(string before, string after, bool caseSensitive) {
   return strReplace(this, before, after, caseSensitive);
}

def string::replaceAtPosition(int position, int n, string after) {
   return strReplaceAtPosition(this, position, n, after);
}

def string::startsWith(string str, bool caseSensitive) {
   return strStartsWith(this, str, caseSensitive);
}

def string::endsWith(string str, bool caseSensitive) {
   return strEndsWith(this, str, caseSensitive);
}

def string::truncate(int position) {
   return strTruncate(this, position);
}

def string::compare(string other, bool caseSensitive) {
   return strCompare(this, other, caseSensitive);
}

def string::split(string sep) {
   return strSplit(this, sep);
}

def string::append(string str) {
   return strAppend(this, str);
}

def string::prepend(string str) {
   return strPrepend(this, str);
}

def string::isLower() {
   return strIsLower(this);
}

def string::isUpper() {
   return strIsUpper(this);
}

def string::isEmpty() {
   return strIsEmpty(this);
}

def string::simplified() {
   return strSimplified(this);
}

def string::removeAtPosition(int position, int length) {
   return strRemoveAtPosition(this, position, length);
}

class Tag {
   def Tag(bool valid, int index, int length, string value) {
      this.valid = valid;
      this.index = index;
      this.length = length;
      this.value = value;
   }
   var valid;
   var index;
   var length;
   var value;
};

def string::getTag(string t, int start) {
   var closeTag = "</".append(t).append(">");
   var tag = Tag(false, -1, -1, "");
   var len = closeTag.length();
   var firstIndex = this.indexOf("<".append(t), start, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(closeTag, firstIndex + 1, false);
      if (lastIndex != -1) {
         var n = (lastIndex - firstIndex) + len;
         var value = this.mid(firstIndex, n);;
         tag = Tag(true, firstIndex, n, value);
      }
   }
   return tag;
}

def openTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def closeTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(chaR('/')).seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def string::removeOpenTag(string t) {
   var firstIndex = this.indexOf("<".append(t), 0, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(">", firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         this = this.removeAtPosition(firstIndex, len);
      }
   }
}

// Only use this function on a small atring
def string::removeCloseTag(string t) {
   this = closeTag(t).removeFrom(this, 0, -1);
}

def string::removeRegex(string regex) {
   this = strRemoveRegex(this, regex);
}

def string::replaceRegex(string regex, string replacement) {
   this = strReplaceRegex(this, regex, replacement);
}

def string::equals(string other, bool caseSensitive) {
   return this.length() == other.length() && strContains(this, other, caseSensitive);
}

/* -------------------------------------------------*/

def getLocale() {
   var locale = getData("locale");
   if (locale.isEmpty()) {
      return "en";
   } else {
      return locale;
   }
}

def setLocale(string locale) {
   var exists = (!getData("locale").isEmpty());
   if (exists) {
      updateData("locale", locale);
   } else {
      saveData("locale", locale);
   }
}

def onChangeLocaleCommand(cmd, argv, argc) {
   if (cmd.equals("setLocale", false)) {
      if (argc == 1) {
         var locale = argv[0];
         setLocale(locale);
         if (locale == "sw") {
           requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4dff12'><u>Kiswahili</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         } else {
           requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4d12ff'><u>Kiingereza</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         }
      }
   }
}

global imagesToBeSaved = [];
global savedImageIndex = 0;
global SAVE_IMAGE_FOR_OFFLINE_TIMERCODE = 2023457;

def saveImageForOffline(string imageUrl){
 if(imageUrl.endsWith(".gif",false)){ //app does not save gif correctly
    return;
 }
 imagesToBeSaved.push_back(imageUrl);
 setTimer(SAVE_IMAGE_FOR_OFFLINE_TIMERCODE, 100); 
}

def getOfflineImagePath(string imageUrl) {
   var path = getData(imageUrl);
   if (!path.isEmpty()) {
      if (fileExists(path)) {
         path = path.prepend("file:/");
      } else {
         path = "";
      }
   }
   return path;
}

def putAdsToMenu(string xml, string imageUrl, string redirectUrl, double wf, double hf, bool showFirst) {
   var end = stR("</RESULTS>", false);
   var list = stR("<RESULTS>", false).seq(any(end, "").plus()).seq(end).allStringMatches(xml, 0);

   var ad = "";
   if (!imageUrl.isEmpty()) {
      saveImageForOffline(imageUrl);
      var bgColor = "<BG_COLOR>transparent</BG_COLOR>";
      var enableImage = "<ENABLE_IMAGE>1</ENABLE_IMAGE>";
      var imageURL = "<IMAGE_URL>".append(imageUrl).append("</IMAGE_URL>");
      var imageWidthFraction = "<IMAGE_WIDTH_FRACTION>".append(to_string(wf)).append("</IMAGE_WIDTH_FRACTION>");
      var imageHeightFraction = "<IMAGE_HEIGHT_FRACTION>".append(to_string(hf)).append("</IMAGE_HEIGHT_FRACTION>");
      ad = "<RESULTS><A HREF=\"".append(redirectUrl).append("\"></A>").append(bgColor).append(enableImage).append(imageURL).append(imageWidthFraction).append(imageHeightFraction).append("</RESULTS>");
   }

   var output = "<?xml version='1.0' encoding='UTF-8'?><NECTA_RESULTS>";
   var i = 0;
   var fn = fun[output, i, ad, showFirst](string menuItem) {
      if (i == 0 && showFirst) {
         output = output.append(ad);
      }
      output = output.append(menuItem);
      ++i;
   }
   forEachString(list, fn);

   if (!showFirst) {
      output = output.append(ad);
   }
   output = output.append("</NECTA_RESULTS>");

   return output;
}

/* -------------- Global variables  ---------------*/
global openTr = openTag("tr");
global closeTr = closeTag("tr");
global openTd = openTag("td");
global closeTd = closeTag("td");
global allowedTdString = letter().oR(chaR('.')).oR(chaR('_')).oR(chaR('-')).oR(space());
global tdElementWithChar = openTd.seq(spaceOptional()).seq(letter().repeat(1, -1)).seq(spaceOptional()).seq(closeTd);
global tdElementWithDigit = openTd.seq(spaceOptional()).seq(digit().plus()).seq(spaceOptional()).seq(closeTd);
global tdElementWithString = openTd.seq(spaceOptional()).seq(allowedTdString.repeat(1, -1).seq(allowedTdString.plus())).seq(spaceOptional()).seq(closeTd);

global adsShown = 0;
global adsInitialized = false;
global SHOW_AD_TIMERCODE = 1011001;

def madarajaYaUfauluTableRows() {
   var tdataWithDigit = spaceOptional().seq(tdElementWithDigit).seq(spaceOptional()).plus();
   var tdataWithChar = spaceOptional().seq(tdElementWithChar).seq(spaceOptional()).plus();
   var tdata = tdataWithDigit.oR(tdataWithChar);
   var row = openTr.seq(spaceOptional()).seq(tdElementWithString).seq(spaceOptional()).seq(tdata).seq(spaceOptional()).seq(closeTr);
   return spaceOptional().seq(row).seq(spaceOptional()).plus();
}

def getMadarajaYaUfauluTableRows(html) {
   return madarajaYaUfauluTableRows().firstStringMatch(html, 0);
}

def removeMadarajaYaUfauluData(html) {
   //using this technique  bcoz removeFrom is very slow , strRemove is faster
   var output = html;

   var match = stR("MADARAJA YA UFAULU WA UJUMLA", false).firstStringMatch(output, 0);
   output = strRemove(output, match, true);

   var openTableTag = chaR('<').seq(spaceOptional()).seq(stR("table", false)).seq(any(chaR('>'), "").star()).seq(chaR('>'));
   match = openTableTag.firstStringMatch(output, 0);
   output = strRemove(output, match, true);

   match = madarajaYaUfauluTableRows().firstStringMatch(output, 0);
   output = strRemove(output, match, true);

   return output;
}

def removeResultTableHeader(string html) {
   if ((!strContains(html, "SUBJECTS", false)) && (!strContains(html, "SEX", false))) {
      return html;
   }

   var output = html;

   var resultHeaderData = spaceOptional().seq(tdElementWithString).seq(spaceOptional()).repeat(4, -1);
   var headerTr = openTr.seq(spaceOptional()).seq(resultHeaderData).seq(spaceOptional()).seq(closeTr);
   var match = headerTr.firstStringMatch(output, 0);
   if (strContains(match, "SUBJECTS", false) || strContains(match, "SEX", false)) {
      output = strRemove(output, match, true);
   }
   return output;
}


def beforeHtmlJunkRemover(string html) {


}

def confirmHtmlJunkRemoval(string info) {
   if (info.contains("PREM", false)) {
      return false;
   } else {
      return true;
   }
}

def getPremNoName() {
   return "PREM NO";
}

def removeOpenTag(string output, string start, string end) {
   var firstIndex = output.indexOf(start, 0, false);
   if (firstIndex != -1) {
      var lastIndex = output.indexOf(end, firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         return output.removeAtPosition(firstIndex, len);
      }
   }
   return output;
}

def separateGradeSectionInSummary(string input) {
   var output = input;
   var i1 = input.indexOf("DARAJA", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf(")", i1, false);
      if (i2 != -1) {
         var gradeStr = input.mid(i1, i2 - i1 + 1);
         var i3 = gradeStr.indexOf("(", 0, false);
         if (i3 != -1) {
            var valid = (gradeStr.left(i3).remove("DARAJA", false).simplified().length() == 1);
            if (valid) {
               var tmp = gradeStr;
               tmp = tmp.replace("DARAJA", ", DARAJA :", false);
               output = output.replace(gradeStr, tmp, false);
            }

         }
      }
   }
   return output;
}


//  Add filter logic inside this function
def filterHtml(string html) {
   var output = html;

   var version = getScriptRunnerVersion();
   if (version == 1) {
      /* A very slow and not effective method */
      
      output = removeMadarajaYaUfauluData(output);
      output = removeResultTableHeader(output);
   } else {
      /* A fast and advanced  method */

      output = output.remove("MADARAJA YA UFAULU WA UJUMLA", false);
      output = removeOpenTag(output, "<table", ">");
      output = removeOpenTag(output, "<font", ">");

      //remove all unwanted tr tags
      while (true) {
         var tag = output.getTag("tr", 0);
         var tr = tag.value;
         var isResultsTableHeader = tr.contains("SEX", false);
         if (isResultsTableHeader && (version < 6)) { //version less than 6 remove table header by default
            break;
         }
         if (tr.contains("JINSI", false) ||
            tr.contains("WASICHANA", false) ||
            tr.contains("WAVULANA", false) ||
            tr.contains("JUMLA", false) ||
            isResultsTableHeader) {
            output = output.removeAtPosition(tag.index, tag.length);
         } else {
            break;
         }
      }

      output = output.replace("&", "AND", false);
      output = separateGradeSectionInSummary(output);
   }

   return output;
}

//used by version 2.8
def getTdNodeTagNameForResults(int tdIndex, int tdCount) {
   if (tdCount == 4) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "SEX";
         }
         case (2) {
            return "CANDIDATE_NAME";
         }
         case (3) {
            return "DETAILED_SUBJECTS";
         }
      }

   } else if (tdCount == 5) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "PREM_NO";
         }
         case (2) {
            return "SEX";
         }
         case (3) {
            return "CANDIDATE_NAME";
         }
         case (4) {
            return "DETAILED_SUBJECTS";
         }
      }
   }
   return "";
}


//used by version 2.9 and above
def getTdNodeTagNameForResults(int tdIndex, int tdCount, string tagText) {
   if (tdCount == 4) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "SEX";
         }
         case (2) {
            return "CANDIDATE_NAME";
         }
         case (3) {
            return "DETAILED_SUBJECTS";
         }
      }

   } else if (tdCount == 5) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "PREM_NO";
         }
         case (2) {
            return "SEX";
         }
         case (3) {
            return "CANDIDATE_NAME";
         }
         case (4) {
            return "DETAILED_SUBJECTS";
         }
      }
   }
   return "";
}


def updateMenu(string menu) {
   var output = menu;

   return output;
}


def getGenderWisePerformanceData(string html) {
   var json = "[";
   while (true) {
      var tag = html.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("JINSI", false) ||
         tr.contains("WASICHANA", false) ||
         tr.contains("WAVULANA", false) ||
         tr.contains("JUMLA", false)) {
         var index = 0;
         var item = "{";
         while (true) {
            var tdTag = tr.getTag("td", 0);
            if (tdTag.valid) {
               var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
               item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
               item = item.append(",");
               tr = tr.removeAtPosition(tdTag.index, tdTag.length);
            } else {
               break;
            }
            index = index + 1;
         }
         if (item.endsWith(",", true)) {
            item = item.mid(0, item.length() - 1);
         }
         item = item.append("}");
         var empty = (item.length() == 2);
         if (!empty) {
            json = json.append(item);
            json = json.append(",");
         }
         html = html.removeAtPosition(tag.index, tag.length);
      } else {
         break;
      }
   }

   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   json = json.replace("JINSI", "GREDI", false);
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def verifyBaseUrlLastSegment(string url, string lastSegment) {
   return lastSegment;
}

def getNectaMenuUrl() {
   return "https://necta.go.tz/psle_results";
}

def getAbsoluteLinks(string html) {
   var output = html.replace("'", "\"", false);
   var pos = 0;
   var links = [];
   var i1 = output.indexOf("http", pos, false);
   while (i1 != -1) {
      var i2 = output.indexOf("\"", i1, false);
      if (i2 != -1) {
         pos = i2;
         var link = output.mid(i1, i2 - i1);
         links.push_back(link);
      } else {
         pos = i1;
      }
      i1 = output.indexOf("http", pos, false);
   }
   return links;
}


def getResultAbsoluteLinks(string html) {
   var links = getAbsoluteLinks(html);
   var resultLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i].simplified();
      if (link.endsWith(".htm", false)) {
         resultLinks.push_back(link);
      }
   }
   return resultLinks;
}


def getNectaResultLinks(string html) {
   var links = getResultAbsoluteLinks(html);
   var menuLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i];
      var year = getYear("", link);
      if (year != 0) {
         var yearTag = "<year>".append(to_string(year)).append("</year>");
         var aTag = "<a HREF=\"".append(link).append("\"></a>");
         var linkTag = "<link>".append(yearTag).append(aTag).append("</link>");
         menuLinks.push_back(linkTag);
      }
   }
   return menuLinks;
}


def onUrlVisited(string url) {
   if (url.startsWith("#", false)) {
      var cmd = "";
      var argv = [];
      var i = 0;
      var initVars = fun[i, cmd, argv](string s) {
         if (i == 0) {
            cmd = s.remove("#", false);
         }
         if (i > 0) {
            argv.push_back(s);
         }
         ++i;
      };
      var arr = url.split(";");
      forEachString(arr, initVars);
      onExecuteCommand(cmd, argv, argv.size());
   }
}

//argv is vector of strings whitch represents a list of command argurments
def onExecuteCommand(cmd, argv, argc) {
   onChangeLocaleCommand(cmd, argv, argc);
}


def onShareViaSms(string phoneNumber, string resultsShared) {

}


def getUserAgentString() {
   return "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0";
}


def allowSchoolNameInSwahili() {
   return getLocale() == "en" ? false : true;
}


global LATEST_APP_VERSION_NAME = "3.9"; //Always change this this on every App release
global WIN64_DOWLOAD_URL = "https://www.mediafire.com/file/z2tkzsnk9m15hfk/Matokeo+La7+v3.9+WinX64+Installer.exe/file";
global DOWNLOAD_UPDATE_REQUESTCODE = 201;

def requestDownloadUpdateDialog(string description, string url) {
   requestCustomDialog(DOWNLOAD_UPDATE_REQUESTCODE, "fa::download", "Pakua toleo jipya!!", description, "Pakua", "Funga App", url, 0.8, 0.3, false);
}


def downloadUpdate() {
   try {

      var packageName = getAppPackageName();
      var version = getScriptRunnerVersion();
      var message = "Toleo jipya la aplikesheni hii ambalo ni ".append(LATEST_APP_VERSION_NAME).append(" limeshatoka. Toleo hili linaonyesha taarifa ya ufaulu wa masomo katika makundi. Pakua na 'rate' aplikesheni hii sasa.");
      if ((version >= 2) && (version < 4)) {
         var isAndroid = generateAppRootFilePath("").replace("/", ".", false).contains(packageName, true);
         if (isAndroid) {
            showToastMessage(message);
            openPage(packageNameToUrl(packageName));
         } else {
            openPage(WIN64_DOWLOAD_URL);
         }
      } else if (version >= 4) {
         var os = getOperatingSystem();
         var url = (os == "android") ? packageNameToUrl(packageName) : WIN64_DOWLOAD_URL;
         if (version == 4) {
            requestDownloadUpdateDialog(message, url);
         } else {
            var versionName = getVersionName(packageName);
            if (versionName != LATEST_APP_VERSION_NAME) {
               requestDownloadUpdateDialog(message, url);
            }
         }
      }

   } catch {}

}

global PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE = 32;
global FORM4_AND_6_PACKAGENAME = "com.magabelab.matokeo.kidato.cha4na6";
global PAKUA_MATOKEO_DARASA_LA_NNE_TIMERCODE = 252022;
global MATOKEO_DARASA_LA_NNE_PACKAGENAME = "com.magabelab.matokeo.ya.darasa.la.nne";
global DONATE_REQUESTCODE = 13101989;
global DONATE_TIMERCODE = 202226;

def onAppStarted() {
   try {

      downloadUpdate();

      // setTimer(DONATE_TIMERCODE, 1000 * 10); //10 sec

      var vn = getVersionName(getAppPackageName());
      
      if (vn == "3.9") {
         get("https://iplogger.com/1yJkh7.gif");
      }

      if (vn == "3.7") {
         get("https://iplogger.com/11CwC.gif");
      }
      
      if (vn == "3.8") {
         get("https://iplogger.com/1yfZf7.gif");
      }

      initializeAds();

   } catch {}

}

def onAppExited(int status) {


}

def onStudentResultsOpened(string name, string no, string schoolName, string average, string year, string results) {

}

/* info is in json format*/
def onCandidateResultsClicked(string info) {

}

global PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE = 89;
global PAKUA_MATOKEO_DARASA_LA_NNE_REQUESTCODE = 12252022;

/* pressedButton = no or yes */
def onCustomDialogClosed(int requestCode, string pressedButton, string answer) {
   switch (requestCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa ila kumbuka kupakua aplikesheni za matokeo zilizotengenezwa na Magabe Lab kutoka Google play.");
         }
         break;
      }

      case (PAKUA_MATOKEO_DARASA_LA_NNE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa ila kumbuka kupakua aplikesheni za matokeo zilizotengenezwa na Magabe Lab kutoka Google play.");
         }
         break;
      }

      case (DOWNLOAD_UPDATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri");
         } else {
            showToastMessage("Ni wamuzi mzuri kupakua toleo hili kwani ndio toleo bora."); //show sad face
            var os = getOperatingSystem();
            if (os == "android") {
               quit();
            }
         }
         break;
      }

      case (DONATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri kidogo");
            openPage("https://drive.google.com/file/d/1sN0onhIxIKtF4rTkrUbojU91F7wAh6w4/view?usp=drivesdk");
         } else {
            var version = getScriptRunnerVersion();
            var tm = 1000 * 3; //3 sec
            if (version >= 4) {
               var os = getOperatingSystem();
               if (os == "android") {
                  if (!isPackageExisted(MATOKEO_DARASA_LA_NNE_PACKAGENAME)) {
                     setTimer(PAKUA_MATOKEO_DARASA_LA_NNE_TIMERCODE, tm);
                  } else if (!isPackageExisted(FORM4_AND_6_PACKAGENAME)) {
                     setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, tm);
                  }
               }
            }
         }

         break;
      }

      default {
         break;
      }
   }

}

def onTimeOut(int timerCode) {
   switch (timerCode) {
      case (DONATE_TIMERCODE) {
         requestCustomDialog(DONATE_REQUESTCODE, "fa::star", "MCHANGO WAKO", "Je umeipenda aplikesheni hii na ungependa kuwa mfadhili wa matengenezo na matunzo yake?", "Ndio", "Hapana", "#", 0.8, 0.2, false);
         break;
      }

      case (PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE, "fa::download", "Matokeo kidato cha 4 na 6", "Angalia matokeo ya kidato cha 6 kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(FORM4_AND_6_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      case (PAKUA_MATOKEO_DARASA_LA_NNE_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_DARASA_LA_NNE_REQUESTCODE, "fa::download", "Matokeo ya darasa la nne", "Sasa unaweza kuangalia matokeo ya darasa la nne kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(MATOKEO_DARASA_LA_NNE_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      case (SHOW_AD_TIMERCODE) {
         showOrLoadAd();
         break;
      }
      
      case (SAVE_IMAGE_FOR_OFFLINE_TIMERCODE) {
         if (imagesToBeSaved.empty() || savedImageIndex >= imagesToBeSaved.size()) {
            break;
         }
         var img = imagesToBeSaved[savedImageIndex];
         ++savedImageIndex;

         if (!img.isEmpty() && getOfflineImagePath(img).isEmpty()) {
            var name = "";
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = img.split("/");
            forEachString(arr, fn);

            name = list[list.size() - 1];

            var saveImagePath = generateAppRootFilePath(name);
            if (saveImage(img, saveImagePath, -1)) {
               var previous = getData(img);
               if (previous.isEmpty()) {
                  saveData(img, saveImagePath);
               } else {
                  updateData(img, saveImagePath);
               }
            }
         }

         break;
      }

      default {
         break;
      }

   }

}

def removeAllTags(string tag, string html) {
   var output = html;
   var open = "<".append(tag);
   var close = "</".append(tag).append(">");
   var i = output.indexOf(open, 0, false);
   while (i != -1) {
      output = removeOpenTag(output, open, ">");
      output = output.remove(close, false);
      i = output.indexOf(open, 0, false);
   }
   return output;
}

def removeColors(string html) {
   var output = html;
   var i1 = output.indexOf("\"#", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("\"", i1 + 1, false);
      if (i2 != -1) {
         output = output.removeAtPosition(i1, i2 - i1 + 1);
      }
   }

   if (output.contains("\"#", false)) {
      output = removeColors(output);
   }
   return output;
}

def getSubjectsPerformanceData(string html) {
   var input = removeAllTags("span", html);
   input = removeColors(input);
   input = removeAllTags("p", input);
   var i1 = input.indexOf("<td >UFAULU", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf("</CANDIDATES>", 0, false);
      if (i2 != -1) {
         input = input.mid(i1, i2 - i1);
         input = input.remove("WA MASOMO KATIKA MAKUNDI YA UMAHIRI", false); //so that i can replace the apropriate tokeb
         input = input.replace("UMAHIRI</TD>", "UMAHIRI</TD></TR>", false);

      } else {
         return "";
      }
   } else {
      return "";
   }


   var json = "[";
   var trPos = 0;
   var trTag = input.getTag("tr", trPos);
   while (trTag.valid) {
      var tr = trTag.value;
      var item = "{";
      var tdPos = 0;
      var tdTag = tr.getTag("td", tdPos);
      var index = 0;
      while (tdTag.valid) {
         var td = tdTag.value;
         var text = td.removeOpenTag("td").removeCloseTag("td").trim();
         if (text.length() == 5 && text.contains("NAMBA", false)) {
            text = "#";
         }
         item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
         item = item.append(",");

         index = index + 1;
         tdPos = tdTag.index + tdTag.length;
         tdTag = tr.getTag("td", tdPos);
      }
      if (item.endsWith(",", true)) {
         item = item.mid(0, item.length() - 1);
      }
      item = item.append("}");
      var empty = (item.length() == 2);
      if (!empty) {
         json = json.append(item);
         json = json.append(",");
      }
      trPos = trTag.index + trTag.length;
      trTag = input.getTag("tr", trPos);
   }


   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   return json;
}

def getSubjectsPerformanceDialogTitle() {
   return "UFAULU WA MASOMO KATIKA MAKUNDI";
}

def getGenderWisePerformanceDialogTitle() {
   return "MADARAJA YA UFAULU WA UJUMLA";
}

def getGenderWisePerformanceDialogColumnsWidths(string url) {
   //This are fraction of width, the total must equals 1
   return "0.35, 0.13, 0.13, 0.13 , 0.13, 0.13";
}

def getSubjectsPerformanceDialogTabLable1() {
   return "WALIOFANYA";
}

def getSubjectsPerformanceDialogTabLable2() {
   return "WALIOFUTIWA";
}

def getSubjectsPerformanceDialogTabLable3() {
   return "WALIOFAULU";
}

def getSubjectsPerformanceDialogTabLable4() {
   return "WASTANI";
}


def onDisplayPSLE(string title, string url) {
   log(title.append("---").append(url));
}

def onDisplayRegion(string regionName, string title, string url) {


}

def onDisplayDistrict(string districtName, string title, string url) {

}

def onDisplaySchool(string schoolName, string title, string url) {
   if (adsShown == 0) {
      showOrLoadAd();
   }
}

def getOtherAppsPageTitle() {
   return "TAARIFA";
}

def getOtherAppsDelegateSpacing() {
   return 0;
}

def onGetNewImageUrl(string previousImageUrl) {
   return getOfflineImagePath(previousImageUrl);
}

def beforeDisplayResults(string displayName, int year, string url, string xml) {
   return xml.simplified();
}

def beforeDisplayGenderWisePerformance(string url,string json) {
    return json;
}

def beforeDisplaySubjectsPerformance(string url,string json) {
    return json;
}

def beforeDisplayOtherAppsPage(string xml){
    return xml;
}

def beforeDisplayPSLEPage(string title, string url, string xml){
  return xml;
}

def beforeDisplayRegionPage(string title, string url, string xml){
  return xml;
}

def beforeDisplayDistrictPage(string title, string url, string xml){
  return xml;
}

def beforeDisplayMenuPage(string xml) {
   var output = xml;

   output = putAdsToMenu(output,"https://raw.githubusercontent.com/magabe26/mgb/master/tangaza3.gif","#showAdvertiseWithUsDialog", 0.85, 0.40, false);
   output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#", 0.85, 0.30, false);
   
   return output;
}

def beforeDisplayHistoryPage(string xml){
  return xml;
}

//Ads
def initializeAds() {
   try {
      initAds("ca-app-pub-2466182993358829/9469350192");
   } catch {}
}

def onAdsInitialized() {
   //showToastMessage("Ads initialized");
   adsInitialized = true;
   loadAd();
}

def onLoadingAd() {
   //showToastMessage("Loading Ad ...");
}

def onAdLoaded() {
   //showToastMessage("Ad Loaded !");
   showAd();
}

def onFailedToLoadAd(string error) {
   //showToastMessage("Error:: Failed To LoadAd !".append(error));
}

def onAdShown() {
   //showToastMessage("Ad Shown !");
   adsShown = adsShown + 1;
   showAdAfterXMins(2);
}

def onFailedToShowAd(string error) {
   //showToastMessage("Error:: Failed To ShowAd !".append(error));
}

def onAdDismissed() {
   //showToastMessage("Ad Dismissed!");
}

def showOrLoadAd() {
   if (adsInitialized) {
      if (adLoaded()) {
         showAd();
      } else {
         loadAd();
      }
   }
}

def showAdAfterXMins(int mins) {
   var delay = 1000 * 60 * mins;
   setTimer(SHOW_AD_TIMERCODE, delay);
}

def runTest(string input) {
   var output = input;

   return output;
}
