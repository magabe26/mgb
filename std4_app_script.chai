/**
 * Copyright 2022-2023 , MagabeLab (Tanzania). All Rights Reserved.
 * Author Edwin Magabe    edyma24@gmail.com
 */

/* --------------  extensions  ---------------*/

def getScriptRunnerVersion() {
   try {
      return scriptRunnerVersion();
   } catch {
      return 1;
   }
}

def getAppPackageName() {
   try {
      return getPackageName();
   } catch {
      return "com.magabelab.matokeo.ya.darasa.la.nne";
   }
}

def packageNameToUrl(string packageName) {
   return "https://play.google.com/store/apps/details?id=".append(packageName);
}

def boolToString(bool b) {
   return b ? "true" : "false";
}


def string::indexOf(string s, int start, bool caseSensitive) {
   return strIndexOf(this, s, start, caseSensitive);
}

def string::contains(string s, bool caseSensitive) {
   return strContains(this, s, caseSensitive);
}

def string::remove(string s, bool caseSensitive) {
   return strRemove(this, s, caseSensitive);
}

def string::right(int n) {
   return strRight(this, n);
}

def string::left(int n) {
   return strLeft(this, n);
}

def string::mid(int position, int n) {
   return strMid(this, position, n);
}

def string::length() {
   return strLength(this);
}

def string::replace(string before, string after, bool caseSensitive) {
   return strReplace(this, before, after, caseSensitive);
}

def string::replaceAtPosition(int position, int n, string after) {
   return strReplaceAtPosition(this, position, n, after);
}

def string::startsWith(string str, bool caseSensitive) {
   return strStartsWith(this, str, caseSensitive);
}

def string::endsWith(string str, bool caseSensitive) {
   return strEndsWith(this, str, caseSensitive);
}

def string::truncate(int position) {
   return strTruncate(this, position);
}

def string::compare(string other, bool caseSensitive) {
   return strCompare(this, other, caseSensitive);
}

def string::split(string sep) {
   return strSplit(this, sep);
}

def string::append(string str) {
   return strAppend(this, str);
}

def string::prepend(string str) {
   return strPrepend(this, str);
}

def string::isLower() {
   return strIsLower(this);
}

def string::isUpper() {
   return strIsUpper(this);
}

def string::isEmpty() {
   return strIsEmpty(this);
}

def string::simplified() {
   return strSimplified(this);
}

def string::removeAtPosition(int position, int length) {
   return strRemoveAtPosition(this, position, length);
}

class Tag {
   def Tag(bool valid, int index, int length, string value) {
      this.valid = valid;
      this.index = index;
      this.length = length;
      this.value = value;
   }
   var valid;
   var index;
   var length;
   var value;
};

def string::getTag(string t, int start) {
   var closeTag = "</".append(t).append(">");
   var tag = Tag(false, -1, -1, "");
   var len = closeTag.length();
   var firstIndex = this.indexOf("<".append(t), start, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(closeTag, firstIndex + 1, false);
      if (lastIndex != -1) {
         var n = (lastIndex - firstIndex) + len;
         var value = this.mid(firstIndex, n);;
         tag = Tag(true, firstIndex, n, value);
      }
   }
   return tag;
}

def openTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def closeTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(chaR('/')).seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def string::removeOpenTag(string t) {
   var firstIndex = this.indexOf("<".append(t), 0, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(">", firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         this = this.removeAtPosition(firstIndex, len);
      }
   }
}

// Only use this function on a small atring
def string::removeCloseTag(string t) {
   this = closeTag(t).removeFrom(this, 0, -1);
}

def string::removeRegex(string regex) {
   this = strRemoveRegex(this, regex);
}

def string::replaceRegex(string regex, string replacement) {
   this = strReplaceRegex(this, regex, replacement);
}

def string::equals(string other, bool caseSensitive) {
   return this.length() == other.length() && strContains(this, other, caseSensitive);
}

/* -------------------------------------------------*/


//------------------

global MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES = 1.1

def getVersionNameAsDouble() {
   return to_double(getVersionName(getAppPackageName()));
}

//------------------

def getLocale() {
   var locale = getData("locale");
   if (locale.isEmpty()) {
      return "en";
   } else {
      return locale;
   }
}

def setLocale(string locale) {
   var exists = (!getData("locale").isEmpty());
   if (exists) {
      updateData("locale", locale);
   } else {
      saveData("locale", locale);
   }
}

def onChangeLocaleCommand(cmd, argv, argc) {
   if (cmd.equals("setLocale", false)) {
      if (argc == 1) {
         var locale = argv[0];
         setLocale(locale);
         if (locale == "sw") {
            requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4dff12'><u>Kiswahili</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         } else {
            requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4d12ff'><u>Kiingereza</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         }
      }
   }
}

//------------------

def getFailureIdentifier() {
   var fid = getData("FailureIdentifier");
   if (fid.isEmpty()) {
      return "REFERRED";
   } else {
      return fid;
   }
}

def setFailureIdentifier(string fid) {
   var exists = (!getData("FailureIdentifier").isEmpty());
   if (exists) {
      updateData("FailureIdentifier", fid);
   } else {
      saveData("FailureIdentifier", fid);
   }
}

def onChangeFailureIdentifierCommand(cmd, argv, argc) {
   if (cmd.equals("changeFailureIdentifier", false)) {
      if (argc == 1) {
         var fid = argv[0];
         setFailureIdentifier(fid);
      }
   }
}

def updateFailureIdentifierMenu(string xml) {
   var output = xml;
   var tag = output.getTag("SELECT_TEXT", 0);
   var value = tag.value;
   if (value.removeOpenTag("SELECT_TEXT").removeCloseTag("SELECT_TEXT").trim().equals("REFERRED", false)) {
      value = tag.value;
      var tmp = changeFailureIdentifier(value);
      output = output.replace(tag.value, tmp, false);
   }
   return output;
}

//------------------

global imagesToBeSaved = [];
global savedImageIndex = 0;
global SAVE_IMAGE_FOR_OFFLINE_TIMERCODE = 2023457;

def saveImageForOffline(string imageUrl) {
   imagesToBeSaved.push_back(imageUrl);
   setTimer(SAVE_IMAGE_FOR_OFFLINE_TIMERCODE, 100);
}

def getOfflineImagePath(string imageUrl) {
   var path = getData(imageUrl);
   if (!path.isEmpty()) {
      if (fileExists(path) && (getFileSize(path) > 0)) {
         path = path.prepend("file:/");
      } else {
         path = "";
      }
   }
   return path;
}

//------------------

def setLoadingImage(string url) {
   var path = getOfflineImagePath(url).remove("file:/", false);
   if (!path.isEmpty()) {
      var key = "images/loading.gif";
      if (!saveData(key, path)) {
         updateData(key, path);
      }
      loadingIndicatorImageChanged();
   } else {
      saveImageForOffline(url);
   }
}

def setDefaultLoadingImage() {
   var key = "images/loading.gif";
   if (!saveData(key, "")) {
      updateData(key, "");
   }
   loadingIndicatorImageChanged();
}

//------------------

def saveOtherAppsPageImages(string xml) {
   var fn = fun[](string url) {
      if (url.endsWith(".gif", false) || url.endsWith(".png", false) || url.endsWith(".jpg", false)) {
         saveImageForOffline(url);
      }
      return url;
   }
   var end = chaR('"').oR(chaR('\'')).oR(chaR('<'));
   stR("http", false).seq(any(end, "#<>").plus()).replaceInMapped(xml, fn, 0, -1);
}

//------------------

def putAdsImpl(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation, string rootTagName, string childTagName, string urlAttributeName, string wrapperTagName) {
   if ((!adLocation.equals("top", false)) && (!adLocation.equals("middle", false)) && (!adLocation.equals("bottom", false))) {
      return xml;
   }

   var ad = "";
   if (!imageUrl.isEmpty()) {
      saveImageForOffline(imageUrl);
      var bgColor = "<BG_COLOR>transparent</BG_COLOR>";
      var enableImage = "<ENABLE_IMAGE>1</ENABLE_IMAGE>";
      var imageURL = "<IMAGE_URL>".append(imageUrl).append("</IMAGE_URL>");
      var imageWidthFraction = "<IMAGE_WIDTH_FRACTION>".append(to_string(wf)).append("</IMAGE_WIDTH_FRACTION>");
      var imageHeightFraction = "<IMAGE_HEIGHT_FRACTION>".append(to_string(hf)).append("</IMAGE_HEIGHT_FRACTION>");
      ad = "<".append(childTagName).append(">").append("<A ").append(urlAttributeName).append("=\"").append(redirectUrl).append("\"></A>").append(bgColor).append(enableImage).append(imageURL).append(imageWidthFraction).append(imageHeightFraction).append("</").append(childTagName).append(">");
   } else {
      return xml;
   }

   if (adLocation.equals("middle", false)) {
      var count = 0;
      var i = xml.indexOf(urlAttributeName, 0, false);
      while (i != -1) {
         ++count;
         i = xml.indexOf(urlAttributeName, i + urlAttributeName.length(), false);
         if (count == 10000) { //we dont want to freeze ui do we?
            return xml;
         }
      }

      if (count > 1) {
         var middleItem = count / 2;
         var n = 0
         var fn = fun[n, middleItem, ad](string s) {
            var replace = (n == middleItem) ? (s + ad) : s;
            ++n;
            return replace;
         };

         return html_tag(childTagName).replaceInMapped(xml, fn, 0, -1);
      }
   }
   var topLocation = adLocation.equals("top", false);
   var tag = (topLocation ? "<" : "</") + rootTagName + ">";
   var i = xml.indexOf(tag, 0, false);
   if (i != -1) {
      var startChunk = xml.left(i);
      var endChunk = xml.mid(i + tag.length(), -1);
      if (topLocation) {
         return startChunk + tag + ad + endChunk;
      } else {
         return startChunk + ad + tag + endChunk;
      }
   }

   return xml;
}

def putAdsToMenu(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "NECTA_RESULTS", "RESULTS", "HREF", "");
}

def putAdsToHistoryPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "SCHOOLS", "SCHOOL", "URL", "");
}

def putAdsToRegionPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "DISTRICTS", "DISTRICT", "HREF", "REGION");
}

def putAdsToDistrictPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "SCHOOLS", "SCHOOL", "HREF", "DISTRICT");
}

def putAdsToSFNAPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "REGIONS", "REGION", "HREF", "SFNA");
}

//------------------

global EMAIL_US_REQUEST_CODE = 706033328;

def onShowAdvertiseWithUsDialogCommand(cmd, argv, argc) {
   if (cmd.equals("showAdvertiseWithUsDialog", false)) {
      requestCustomDialog(EMAIL_US_REQUEST_CODE, "fa::vcardo", " TANGAZA", "Taganza katika aplikesheni hii. Tangaza <font color='green'><u>shule</u></font>, <font color='yellow'><u>stationery</u></font>, <font color='cyan'><u>kitabu</u></font> n.k  kwa kutumia mfumo wa picha. Kwa maelezo zaidi tutumie barua pepe.", "Tuma", "<font color='white'>Baadae</font> ", "#emailUs", 0.8, 0.3, false);
   }
}

//------------------

global VISIT_MAGABE_LAB_REQUEST_CODE = 320230506;

def onVisitMagabeLabCommand(cmd, argv, argc) {
   if (cmd.equals("visitMagabeLab", false)) {
      requestCustomDialog(VISIT_MAGABE_LAB_REQUEST_CODE, "fa::rocket", " TUTEMBELEE", "<font color='cyan'>Tembelea tovuti yetu.</font>", "Sawa", "<font color='white'>Baadae</font> ", "#visitMagabeLab", 0.8, 0.15, false);
   }
}

//------------------
//video
class _VideoPlayerStatus {
   def _VideoPlayerStatus() {
      this.UnknownStatus = 0;
      this.NoMedia = 1;
      this.Loading = 2;
      this.Loaded = 3;
      this.Stalled = 4;
      this.Buffering = 5;
      this.Buffered = 6;
      this.EndOfMedia = 7;
      this.InvalidMedia = 8;
   }
   var NoMedia;
   var Loading;
   var Loaded;
   var Buffering;
   var Stalled;
   var Buffered;
   var EndOfMedia;
   var InvalidMedia;
   var UnknownStatus;
};
global VideoPlayerStatus = _VideoPlayerStatus();


class _VideoPlayerPlaybackState {
   def _VideoPlayerPlaybackState() {
      this.StoppedState = 0;
      this.PlayingState = 1;
      this.PausedState = 2;
   }
   var PlayingState;
   var PausedState;
   var StoppedState;
};
global VideoPlayerPlaybackState = _VideoPlayerPlaybackState();


class _VideoPlayerError {
   def _VideoPlayerError() {
      this.NoError = 0;
      this.ResourceError = 1;
      this.FormatError = 2;
      this.NetworkError = 3;
      this.AccessDenied = 4;
      this.ServiceMissing = 5;
   }
   var NoError;
   var ResourceError;
   var FormatError;
   var NetworkError;
   var AccessDenied;
   var ServiceMissing;
};

global VideoPlayerError = _VideoPlayerError();

//------------------

global currentResultYear = 0;

global adsShown = 0;
global adsInitialized = false;
global SHOW_AD_TIMERCODE = 1011001;

def getPremNoName() {
   return "PREM NO";
}


def beforeHtmlJunkRemover(string html) {


}

def confirmHtmlJunkRemoval(string info) {
   if (info.contains("PREM", false)) {
      return false;
   } else {
      return true;
   }
}

def removeOpenTag(string output, string start, string end) {
   var firstIndex = output.indexOf(start, 0, false);
   if (firstIndex != -1) {
      var lastIndex = output.indexOf(end, firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         return output.removeAtPosition(firstIndex, len);
      }
   }
   return output;
}


def fixFor2018ResultsAndBelow(string html) {
   var output = html;
   var tr = output.getTag("tr", 0);
   if (tr.valid) {
      var td = tr.value.getTag("td", 0);
      if (td.valid) {
         if (td.value.contains("WALIOSAJILIWA", false)) {
            var index = output.indexOf("</td></tr>", tr.index, false);
            if (index != -1) {
               output = output.replaceAtPosition(tr.index, index + 10 - tr.index, "<tr>" + td.value + "</tr>");
            }
         }
      }
   }
   return output;
}

def removeGradeTrFor2018ResultsAndBelow(string html) {
   var output = html;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false) ||
            text.contains("MWANAFUNZI", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         } else {
            break;
         }
      } else {
         break;
      }
   }
   return output;
}

def runMoreOlderResultFix(string html) {
   var output = html;
   //Fix summary
   var i1 = output.indexOf("</H3>", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("<CANDIDATES>", 0, false);
      if (i2 != -1) {
         var start = i1 + 5;
         var len = i2 - start;
         var summary = output.mid(start, len);
         var isSummary = summary.contains("WALIOSAJILIWA", false);
         if (isSummary) {
            output = output.replaceAtPosition(start, len, "<SUMMARY>" + summary + "</SUMMARY>");
         }
      }
   }
   //Remove header tr
   var headerTag = output.getTag("tr", 0);
   if (headerTag.valid) {
      if (headerTag.value.contains("CAND.", false)) {
         output = output.removeAtPosition(headerTag.index, headerTag.length);
      }
   }
   return output;
}

def isSFNAPage(string html) {
   return html.contains("reg_", false) && html.contains("<REGIONS>", false);
}

def isRegionPage(string html) {
   return html.contains("distr_", false) && html.contains("<DISTRICTS>", false);
}

def isDistrictPage(string html) {
   return html.contains(".htm", false) && html.contains("<SCHOOLS>", false);
}

def cleanSFNAPage(string html) {
   var output = html;
   if (isSFNAPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("reg_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("reg_.htm", false)) {
      output = cleanSFNAPage(output);
   }
   return output;
}


def cleanRegionPage(string html) {
   var output = html;
   if (isRegionPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("distr_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("distr_.htm", false)) {
      output = cleanRegionPage(output);
   }
   return output;
}

def cleanDistrictPage(string html) {
   var output = html;
   if (isDistrictPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("\".htm\"", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("\".htm\"", false)) {
      output = cleanDistrictPage(output);
   }
   return output;
}

//  Add filter logic inside this function
def filterHtml(string html) {
   var output = html;
   var year = 0;
   var titleTag = output.getTag("H1", 0);
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      currentResultYear = year;
   }


   if (year >= 2022) {
      return filterHtmlForYear2022AndAbove(output);
   }

   //Remove open table tag
   output = removeOpenTag(output, "<table", ">");
   output = removeOpenTag(output, "<font", ">");
   output = fixFor2018ResultsAndBelow(output);

   var summaryTag = Tag(false, -1, -1, "");

   //remove all unwanted tr tags
   while (true) {
      var tag = output.getTag("tr", 0);
      var tr = tag.value;

      if ((!tr.contains("KISWAHILI", false)) && (tr.contains("JINSI", false) ||
            tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false) ||
            tr.contains("WALIOSAJILIWA", false) ||
            tr.contains("GREDI", false))) {
         if (tr.contains("WALIOSAJILIWA", false)) {
            summaryTag = tag;
         }
         output = output.removeAtPosition(tag.index, tag.length);
         if (tr.contains("MASOMO", false)) { //the last unwanted tr
            break;
         }
      } else {
         break;
      }
   }

   if (summaryTag.valid) {
      var summary = removeOpenTag(summaryTag.value, "<td", ">");
      summary = summary.remove("</td>", false)
      summary = summary.replace("<tr>", "<SUMMARY>", false)
      summary = summary.replace("</tr>", " </SUMMARY>", false)
      summary = summary.append("<CANDIDATES>");
      output = output.replace("<CANDIDATES>", summary, false);
   }

   //Fix year 2016 results
   if (year == 2016) {
      output = runMoreOlderResultFix(html);
   }

   //Remove all , in candidate tags that may cause modifyCandidateDetails to fail
   var candidateTag = output.getTag("CANDIDATES", 0);
   if (candidateTag.valid) {
      var cleaned = candidateTag.value.remove(",", false);
      output = output.replaceAtPosition(candidateTag.index, candidateTag.length, cleaned);
   }

   output = modifyCandidateDetails("CANDIDATES", output, "Kiswahili", "Hisabati", "English");

   output = output.replace("&", "AND", false);

   output = removeGradeTrFor2018ResultsAndBelow(output);

   output = cleanSFNAPage(output);
   output = cleanRegionPage(output);
   output = cleanDistrictPage(output);


   return output;
}

def removeAllTags(string tag, string html) {
   var output = html;
   var open = "<".append(tag);
   var close = "</".append(tag).append(">");
   var i = output.indexOf(open, 0, false);
   while (i != -1) {
      output = removeOpenTag(output, open, ">");
      output = output.remove(close, false);
      i = output.indexOf(open, 0, false);
   }
   return output;
}

def separateGradeSectionInSummary(string input) {
   var output = input;
   var i1 = input.indexOf("DARAJA", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf(")", i1, false);
      if (i2 != -1) {
         var gradeStr = input.mid(i1, i2 - i1 + 1);
         var i3 = gradeStr.indexOf("(", 0, false);
         if (i3 != -1) {
            var valid = (gradeStr.left(i3).remove("DARAJA", false).simplified().length() == 1);
            if (valid) {
               var tmp = gradeStr;
               tmp = tmp.replace("DARAJA", ", DARAJA :", false);
               output = output.replace(gradeStr, tmp, false);
            }

         }
      }
   }
   return output;
}


def getSummary(string html) {
   var i1 = html.indexOf("WALIOFANYA", 0, false);
   if (i1 != -1) {
      var i2 = html.indexOf("</td>", i1 + 1, false);
      if (i2 == -1) {
         i2 = html.indexOf("</tr>", i1 + 1, false);
      }
      if (i2 == -1) {
         i2 = html.indexOf("<tr>", i1 + 1, false);
      }
      if (i2 == -1) {
         i2 = html.indexOf("<td>", i1 + 1, false);
      }
      if (i2 != -1) {
         var summary = html.mid(i1, i2 - i1).remove("<td>", false).remove("</td>", false);
         summary = summary.remove("<tr>", false).remove("</tr>", false).simplified();
         summary = separateGradeSectionInSummary(summary);
         return summary;
      }
   }
   return "";
}

def filterHtmlForYear2022AndAbove(string html) {
   var output = html;
   /* A fast and advanced  method */
   output = output.remove("MADARAJA YA UFAULU WA UJUMLA", false);

   //remove open table tag
   output = removeOpenTag(output, "<table", ">");
   output = removeOpenTag(output, "<font", ">");

   output = removeAllTags("tag", output);
   output = removeAllTags("span", output);


   var summary = getSummary(output);
   if (!summary.isEmpty()) {
      //Append  summary
      var i1 = output.indexOf("</H3>", 0, false);
      var i2 = output.indexOf("<CANDIDATES>", 0, false);
      if (i2 != -1) {
         var start = i1 + 5;
         var len = i2 - start;
         output = output.replaceAtPosition(start, len, "<SUMMARY>" + summary + "</SUMMARY>");

      }
   }

   //remove all unwanted tr tags
   while (true) {
      var tag = output.getTag("tr", 0);
      var tr = tag.value;
      var isResultsTableHeader = tr.contains("SEX", false);
      if ((!tr.contains("KISWAHILI", false)) && (tr.contains("JINSI", false) ||
            tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false) ||
            isResultsTableHeader)) {
         output = output.removeAtPosition(tag.index, tag.length);
      } else {
         break;
      }
   }

   output = output.remove("</td></tr>", false);
   output = output.remove("&nbsp;", false); //WARNING: THIS SPACE CHARACTER IS REMOVED WHEN BY FORMATING TOOLS, REMEMBER TO REPLACE
   output = output.replace("AVERAGE GRADE -", "</td><td>", false);
   output = output.replace("AVERAGE GRADE", "</td><td>", false);
   output = output.replace("</tr>", "</td></tr>", false);

   //futa summary ya masomo
   var i1 = output.indexOf("<td >UFAULU", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("</CANDIDATES>", 0, false);
      if (i2 != -1) {
         output = output.removeAtPosition(i1, i2 - i1);
         output = output.replace("<tr></CANDIDATES>", "</CANDIDATES>", false);
      }
   }

   //short fix subject scores
   output = output.replace("- A", "- A;", false).replace("- B", "- B;", false).replace("- C", "- C;", false).replace("- D", "- D;", false).replace("- E", "- E;", false).replace("- F", "- F;", false);

   output = output.replace("&", "AND", false);

   return output;
}


def getTdNodeTagNameForResults(int tdIndex, int tdCount, string tagText) {
   if (tdCount == 6) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "PREM_NO";
         }
         case (2) {
            return "SEX";
         }
         case (3) {
            return "CANDIDATE_NAME";
         }
         case (4) {
            return "DETAILED_SUBJECTS";
         }
         case (5) {
            return "AVERAGE";
         }
      }

   } else {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return tagText.simplified().length() == 1 ? "SEX" : "PREM_NO";
         }
         case (2) {
            return tagText.simplified().length() == 1 ? "SEX" : "CANDIDATE_NAME";
         }
         case (3) {
            return tagText.contains("Kiswahili", false) || tagText.contains("English", false) ? "DETAILED_SUBJECTS" : "CANDIDATE_NAME";
         }
         case (4) {
            return tagText.simplified().length() == 1 ? "AVERAGE" : "";
         }
      }

   }

   return "";
}


def updateMenu(string menu) {
   var output = menu;

   return output;
}

def formatGender(string input) {
   var json = input;
   if (!json.contains("WASICHANA", false)) {
      json = json.replace("WAS", "WASICHANA", false);
   }
   if (!json.contains("WAVULANA", false)) {
      json = json.replace("WAV", "WAVULANA", false);
   }
   return json;
}

def getGenderWisePerformanceDataFor2018ResultsAndBelow(string html) {
   var output = html;
   var titleTag = output.getTag("H1", 0);
   var year = 0;
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      if (year > 2018) {
         return "";
      }
   } else {
      return "";
   }

   var json = year != 2016 ? "[{\"_0\":\"GREDI\",\"_1\":\"WAS\",\"_2\":\"WAV\",\"_3\":\"JUMLA\"}," : "[";
   var index = 0;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("WALIOSAJILIWA", false) ||
         tr.contains("GREDI", false) ||
         tr.contains("WAS.", false)) {
         output = output.removeAtPosition(tag.index, tag.length);
         continue;
      }
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false)) {
            var index = 0;
            var item = "{";
            while (true) {
               var tdTag = tr.getTag("td", 0);
               if (tdTag.valid) {
                  var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
                  item = item.append(",");
                  tr = tr.removeAtPosition(tdTag.index, tdTag.length);
                  index = index + 1;
               } else {
                  break;
               }
            }
            if (item.endsWith(",", true)) {
               item = item.mid(0, item.length() - 1);
            }
            item = item.append("}");
            var empty = (item.length() == 2);
            if (!empty) {
               json = json.append(item);
               json = json.append(",");
            }
            output = output.removeAtPosition(tag.index, tag.length);

         } else {
            break;
         }
      } else {
         break;
      }
   }
   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   json = json.replace("JINSI", "GREDI", false);
   json = formatGender(json);
   var empty = (json.length() == 68);
   if (empty) {
      json = "";
   }
   return json;
}


def getGenderWisePerformanceData(string html) {
   var output = html;
   var year = 0;
   var titleTag = output.getTag("H1", 0);
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      currentResultYear = year;
   }

   if (year <= 2016) {
      return "";
   }

   if (year >= 2022) {
      return getGenderWisePerformanceDataFor2022AndAbove(output);
   }

   var json = getGenderWisePerformanceDataFor2018ResultsAndBelow(output);

   if (!json.isEmpty()) {
      return json;
   } else {
      json = "[";
   }

   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("GREDI", false) ||
         tr.contains("kati", false)) {
         output = output.removeAtPosition(tag.index, tag.length);
         continue;
      }

      if (tr.contains("MASOMO", false) ||
         tr.contains("English", false) ||
         tr.contains("Kiswahili", false) ||
         tr.contains("Hisabati", false) ||
         tr.contains("Sayansi", false)) {
         break;
      }
      if (tr.contains("REFERRED", false) ||
         tr.contains("WAS", false) ||
         tr.contains("WAV", false) ||
         tr.contains("JUMLA", false)) {
         var index = 0;
         var item = "{";
         while (true) {
            var tdTag = tr.getTag("td", 0);
            if (tdTag.valid) {
               var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
               if (text == "A" || text == "a") {
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append("JINSI").append("\"");
                  item = item.append(",");
                  index = index + 1;
               }
               item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
               item = item.append(",");

               tr = tr.removeAtPosition(tdTag.index, tdTag.length);
               index = index + 1;
            } else {
               break;
            }
         }
         if (item.endsWith(",", true)) {
            item = item.mid(0, item.length() - 1);
         }
         item = item.append("}");
         var empty = (item.length() == 2);
         if (!empty) {
            json = json.append(item);
            json = json.append(",");
         }
         output = output.removeAtPosition(tag.index, tag.length);

         if (tr.contains("JUMLA", false)) {
            break;
         }
      } else {
         break;
      }
   }

   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   json = json.replace("JINSI", "GREDI", false);
   json = formatGender(json);
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def getGenderWisePerformanceDataFor2022AndAbove(string html) {
   var output = html;

   var i1 = output.indexOf("<td>JINSI", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("<td>CAND.", i1 + 1, false);
      if (i2 != -1) {
         output = "<tr>".append(output.mid(i1, i2 - i1));
      } else {
         return "";
      }
   } else {
      return "";
   }

   var json = "[";
   var trPos = 0;
   var trTag = output.getTag("tr", trPos);
   while (trTag.valid) {
      var tr = trTag.value;
      var item = "{";
      var tdPos = 0;
      var tdTag = tr.getTag("td", tdPos);
      var index = 0;
      while (tdTag.valid) {
         var td = tdTag.value;
         if (tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false)) {
            var text = td.removeOpenTag("td").removeCloseTag("td").trim();
            item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
            item = item.append(",");
         }
         index = index + 1;
         tdPos = tdTag.index + tdTag.length;
         tdTag = tr.getTag("td", tdPos);
      }
      if (item.endsWith(",", true)) {
         item = item.mid(0, item.length() - 1);
      }
      item = item.append("}");
      var empty = (item.length() == 2);
      if (!empty) {
         json = json.append(item);
         json = json.append(",");
      }
      trPos = trTag.index + trTag.length;
      trTag = output.getTag("tr", trPos);
   }


   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   json = json.replace("JINSI", "GREDI", false);
   json = formatGender(json);
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def verifyBaseUrlLastSegment(string url, string lastSegment) {
   var year = getYear(url, "");
   if (year <= 2016) {
      return "";
   } else {
      return lastSegment;
   }
}

def getNectaMenuUrl() {
   return "https://necta.go.tz/sfna_results";
}


def getAbsoluteLinks(string html) {
   var output = html.replace("'", "\"", false);
   var pos = 0;
   var links = [];
   var i1 = output.indexOf("http", pos, false);
   while (i1 != -1) {
      var i2 = output.indexOf("\"", i1, false);
      if (i2 != -1) {
         pos = i2;
         var link = output.mid(i1, i2 - i1);
         links.push_back(link);
      } else {
         pos = i1;
      }
      i1 = output.indexOf("http", pos, false);
   }
   return links;
}


def getResultAbsoluteLinks(string html) {
   var links = getAbsoluteLinks(html);
   var resultLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i].simplified();
      if (link.endsWith(".htm", false)) {
         resultLinks.push_back(link);
      }
   }
   return resultLinks;
}

def getNectaResultLinks(string html) {
   var links = getResultAbsoluteLinks(html);
   var menuLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i];
      var year = getYear("", link);
      if (year != 0) {
         var yearTag = "<year>".append(to_string(year)).append("</year>");
         var aTag = "<a HREF=\"".append(link).append("\"></a>");
         var linkTag = "<link>".append(yearTag).append(aTag).append("</link>");
         menuLinks.push_back(linkTag);
      }
   }
   return menuLinks;
}


def onUrlVisited(string url) {
   if (url.startsWith("#", false)) {
      var cmd = "";
      var argv = [];
      var i = 0;
      var initVars = fun[i, cmd, argv](string s) {
         if (i == 0) {
            cmd = s.remove("#", false);
         }

         if (i > 0) {
            argv.push_back(s);
         }
         ++i;
      };

      var arr = url.split(";");
      forEachString(arr, initVars);

      onExecuteCommand(cmd, argv, argv.size());
   }

}

//argv is vector of strings whitch represents a list of command argurments
def onExecuteCommand(cmd, argv, argc) {
   onChangeLocaleCommand(cmd, argv, argc);
   onChangeFailureIdentifierCommand(cmd, argv, argc);
   onShowAdvertiseWithUsDialogCommand(cmd, argv, argc);
   onVisitMagabeLabCommand(cmd, argv, argc);
}


def onShareViaSms(string phoneNumber, string resultsShared) {


}


def getUserAgentString() {
   return "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0";
}


def allowSchoolNameInSwahili() {
   return getLocale() == "en" ? false : true;
}


global LATEST_APP_VERSION_NAME = "1.0"; //Always change this this on every App release
global WIN64_DOWLOAD_URL = "https://www.mediafire.com/file/vfrcot27x58nso1/Matokeo+La4+v1.0+WinX64+Installer.exe/file";
global DOWNLOAD_UPDATE_REQUESTCODE = 201;

def requestDownloadUpdateDialog(string description, string url) {
   requestCustomDialog(DOWNLOAD_UPDATE_REQUESTCODE, "fa::download", "Pakua toleo jipya!!", description, "Pakua", "Funga App", url, 0.8, 0.3, false);
}


def downloadUpdate() {
   try {

      var packageName = getAppPackageName();
      var message = "Toleo jipya la aplikesheni hii ambalo ni ".append(LATEST_APP_VERSION_NAME).append(" limeshatoka. Toleo hili linaonyesha taarifa ya ufaulu wa masomo katika makundi. Pakua sasa na pia usisahau ku-rate aplikesheni hii, Asante.");
      var os = getOperatingSystem();
      var url = (os == "android") ? packageNameToUrl(packageName) : WIN64_DOWLOAD_URL;
      var versionName = getVersionName(packageName);
      if (versionName != LATEST_APP_VERSION_NAME) {
         requestDownloadUpdateDialog(message, url);
      }

   } catch {}

}

global PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE = 32;
global FORM4_AND_6_PACKAGENAME = "com.magabelab.matokeo.kidato.cha4na6";

def onAppStarted() {
   try {

      downloadUpdate();

      var os = getOperatingSystem();
      if (os == "android") {

         //  if (!isPackageExisted(FORM4_AND_6_PACKAGENAME)) {
         // setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 0.5); //wait 30 sec
         //  }

      } //os

      var vn = getVersionName(getAppPackageName());

      if (vn == "0.8") {
         get("https://iplogger.com/1yLkh7.gif");
      }

      if (vn == "1.0") {
         get("https://iplogger.com/113eC.gif");
      }

      if (vn == "0.7") {
         get("https://iplogger.com/1F4bf7.gif");
      }

      initializeAds();

   } catch {}

}


def onAppExited(int status) {


}

def onStudentResultsOpened(string name, string no, string schoolName, string average, string year, string results) {

}

/* info is in json format*/
def onCandidateResultsClicked(string info) {

}

global PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE = 89;

/* pressedButton = no or yes */
def onCustomDialogClosed(int requestCode, string pressedButton, string answer) {
   switch (requestCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa, nitakukumbusha baadae");
            setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 1.5); //wait 1.5 min
         }
         break;
      }

      case (DOWNLOAD_UPDATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri");
         } else {
            showToastMessage(" :( "); //show sad face
            var os = getOperatingSystem();
            if (os == "android") {
               quit();
            }
         }
         break;
      }

      case (EMAIL_US_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("mailto:magabelab.tz@gmail.com");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }


      case (VISIT_MAGABE_LAB_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("https://magabelab-tz.web.app");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }

      default {
         break;
      }
   }

}

def onTimeOut(int timerCode) {
   switch (timerCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE, "fa::download", "Matokeo kidato cha 4 na 6", "Angalia matokeo ya kidato cha 6 kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(FORM4_AND_6_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      case (SHOW_AD_TIMERCODE) {
         showOrLoadAd();
         break;
      }


      case (SAVE_IMAGE_FOR_OFFLINE_TIMERCODE) {
         if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
            return;
         }
         if (imagesToBeSaved.empty() || savedImageIndex >= imagesToBeSaved.size()) {
            break;
         }
         var img = imagesToBeSaved[savedImageIndex];
         ++savedImageIndex;

         if (!img.isEmpty() && getOfflineImagePath(img).isEmpty()) {
            var name = "";
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = img.split("/");
            forEachString(arr, fn);

            name = list[list.size() - 1];

            var saveImagePath = generateAppRootFilePath(name);
            if (saveImage(img, saveImagePath, -1)) {
               if (!saveData(img, saveImagePath)) {
                  updateData(img, saveImagePath);
               }
               onImageSaved(img, saveImagePath);
            }
         }

         break;
      }

      default {
         break;
      }

   }

}

def onImageSaved(string url, string path) {
   log("Image saved: url = ".append(url).append(" , path = ").append(path));

   //if(url.endsWith("magabelab1.gif",false)){
   //   setLoadingImage(url);
   //}
}


def getSubjectsPerformanceData(string html) {
   var input = removeAllTags("span", html);
   var i1 = input.indexOf("<td >UFAULU", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf("</CANDIDATES>", 0, false);
      if (i2 != -1) {
         input = input.mid(i1, i2 - i1);
      } else {
         return "";
      }
   } else {
      return "";
   }

   var json = "[";
   var trPos = 0;
   var trTag = input.getTag("tr", trPos);
   while (trTag.valid) {
      var tr = trTag.value;
      var item = "{";
      var tdPos = 0;
      var tdTag = tr.getTag("td", tdPos);
      var index = 0;
      while (tdTag.valid) {
         var td = tdTag.value;
         var text = td.removeOpenTag("td").removeCloseTag("td").trim();
         if (text.length() == 5 && text.contains("NAMBA", false)) {
            text = "#";
         }
         item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
         item = item.append(",");

         index = index + 1;
         tdPos = tdTag.index + tdTag.length;
         tdTag = tr.getTag("td", tdPos);
      }
      if (item.endsWith(",", true)) {
         item = item.mid(0, item.length() - 1);
      }
      item = item.append("}");
      var empty = (item.length() == 2);
      if (!empty) {
         json = json.append(item);
         json = json.append(",");
      }
      trPos = trTag.index + trTag.length;
      trTag = input.getTag("tr", trPos);
   }


   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   return json;
}

def getSubjectsPerformanceDialogTitle() {
   return "UFAULU WA MASOMO KATIKA MAKUNDI";
}

def getGenderWisePerformanceDialogTitle() {
   return "MADARAJA YA UFAULU WA UJUMLA";
}

def getGenderWisePerformanceDialogColumnsWidths(string url) {
   //This are fraction of width, the total must equals 1
   if (currentResultYear >= 2019) {
      return "0.28, 0.12, 0.12, 0.12 , 0.12, 0.24";
   } else {
      return "0.24, 0.27, 0.27, 0.22 , 0, 0";
   }
}

def getSubjectsPerformanceDialogTabLable1() {
   return "WALIOFANYA";
}

def getSubjectsPerformanceDialogTabLable2() {
   return "WALIOFUTIWA";
}

def getSubjectsPerformanceDialogTabLable3() {
   return "WALIOFAULU";
}

def getSubjectsPerformanceDialogTabLable4() {
   return "WASTANI";
}


def onDisplaySFNA(string title, string url) {
   log(title.append("---").append(url));
}

def onDisplayRegion(string regionName, string title, string url) {


}

def onDisplayDistrict(string districtName, string title, string url) {

}

def onDisplaySchool(string schoolName, string title, string url) {
   currentResultYear = getYear(schoolName, title);
   if (adsShown == 0) {
      showOrLoadAd();
   }

}

def getOtherAppsPageTitle() {
   return "TAARIFA";
}

def getOtherAppsDelegateSpacing() {
   return 0;
}

def onGetNewImageUrl(string previousImageUrl) {
   return getOfflineImagePath(previousImageUrl);
}

def changeFailureIdentifier(string input) {
   var fid = getFailureIdentifier();
   if (!fid.equals("REFERRED", false)) {
      input = input.replace("REFERRED", fid, false);
   }
   return input;
}

def beforeDisplayResults(string displayName, int year, string url, string xml) {
   var output = xml.simplified();

   output = changeFailureIdentifier(output);

   return output;
}

def beforeDisplayGenderWisePerformance(string url, string json) {
   var output = json;

   output = changeFailureIdentifier(output);

   return output;
}

def beforeDisplaySubjectsPerformance(string url, string json) {
   return json;
}

def beforeDisplayMenuPage(string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

   output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza3.gif", "#showAdvertiseWithUsDialog", w, 0.3, "middle");
   output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.22, "bottom");

   return output;
}

def beforeDisplaySFNAPage(string title, string url, string xml) {
   var output = xml;
   var w = 0.85;

   output = putAdsToSFNAPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.40, "top");
   output = putAdsToSFNAPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.20, "bottom");

   return output;

}

def beforeDisplayRegionPage(string title, string url, string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

   output = putAdsToRegionPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.40, "bottom");
   output = putAdsToRegionPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.20, "bottom");

   return output;
}

def beforeDisplayDistrictPage(string title, string url, string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

   output = putAdsToDistrictPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.30, "top");
   output = putAdsToDistrictPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.20, "bottom");

   return output;
}

def beforeDisplayHistoryPage(string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

   output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.80, "bottom");
   output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.20, "bottom");

   return output;
}


def beforeDisplayOtherAppsPage(string xml) {
   saveOtherAppsPageImages(xml);
   var output = xml;

   output = updateFailureIdentifierMenu(output);

   return output;
}

//Ads
def initializeAds() {
   try {
      initAds("ca-app-pub-2466182993358829/8819992826");
   } catch {}
}

def onAdsInitialized() {
   //showToastMessage("Ads initialized");
   adsInitialized = true;
   loadAd();
}

def onLoadingAd() {
   //showToastMessage("Loading Ad ...");
}

def onAdLoaded() {
   //showToastMessage("Ad Loaded !");
   showAd();
}

def onFailedToLoadAd(string error) {
   //showToastMessage("Error:: Failed To LoadAd !".append(error));
}

def onAdShown() {
   //showToastMessage("Ad Shown !");
   adsShown = adsShown + 1;
   showAdAfterXMins(2);
}

def onFailedToShowAd(string error) {
   //showToastMessage("Error:: Failed To ShowAd !".append(error));
}

def onAdDismissed() {
   //showToastMessage("Ad Dismissed!");
}

def showOrLoadAd() {
   if (adsInitialized) {
      if (adLoaded()) {
         showAd();
      } else {
         loadAd();
      }
   }
}

def showAdAfterXMins(int mins) {
   var delay = 1000 * 60 * mins;
   setTimer(SHOW_AD_TIMERCODE, delay);
}

//Video
def onVideoDialogOpened(string videoUrl, string videoDescription, string redirectUrl) {
   //setVideoPlayerLoadingIndicator("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif");
   //setVideoThumbnail("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif")

   videoPlayerPlay();
}

def onVideoDialogClosed(string videoUrl, string videoDescription, string redirectUrl) {
   //log(" Video dialog closed"+ videoUrl);
}

def isVideoDialogCloseDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.8;
   }
}

def isVideoSeekForwardDisabled(string videoUrl, double position, double duration) {
   return false;
}

def onVideoPlayerStatusChanged(string videoUrl, int status) {

   switch (status) {

      case (VideoPlayerStatus.NoMedia) {
         log("VideoPlayerStatus.NoMedia");

         break;
      }

      case (VideoPlayerStatus.Loading) {
         log("VideoPlayerStatus.Loading");

         break;
      }

      case (VideoPlayerStatus.Loaded) {
         log("VideoPlayerStatus.Loaded");

         break;
      }

      case (VideoPlayerStatus.Buffering) {
         log("VideoPlayerStatus.Buffering");

         break;
      }

      case (VideoPlayerStatus.Stalled) {
         log("VideoPlayerStatus.Stalled");

         break;
      }

      case (VideoPlayerStatus.Buffered) {
         log("VideoPlayerStatus.Buffered");

         break;
      }

      case (VideoPlayerStatus.EndOfMedia) {
         log("VideoPlayerStatus.EndOfMedia");

         break;
      }

      case (VideoPlayerStatus.InvalidMedia) {
         log("VideoPlayerStatus.InvalidMedia");

         break;
      }

      case (VideoPlayerStatus.UnknownStatus) {
         log("VideoPlayerStatus.UnknownStatus");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlaybackStateChanged(string videoUrl, int playbackState) {

   switch (playbackState) {

      case (VideoPlayerPlaybackState.PlayingState) {
         log("VideoPlayerPlaybackState.PlayingState");

         break;
      }

      case (VideoPlayerPlaybackState.PausedState) {
         log("VideoPlayerPlaybackState.PausedState");

         break;
      }

      case (VideoPlayerPlaybackState.StoppedState) {
         log("VideoPlayerPlaybackState.StoppedState");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlayerVolumeChanged(string videoUrl, double volume) {
   //log("onVideoPlayerVolumeChanged , volume = "+ to_string(volume));
}

def onVideoPlayerError(string videoUrl, int errorCode, string error) {
   closeVideoDialog();

   var errorDisplay = "";

   switch (errorCode) {

      case (VideoPlayerError.NoError) {
         errorDisplay = "VideoPlayerError.NoError";

         break;
      }

      case (VideoPlayerError.ResourceError) {
         errorDisplay = "VideoPlayerError.ResourceError";

         break;
      }

      case (VideoPlayerError.FormatError) {
         errorDisplay = "VideoPlayerError.FormatError";

         break;
      }

      case (VideoPlayerError.NetworkError) {
         errorDisplay = "VideoPlayerError.NetworkError";

         break;
      }

      case (VideoPlayerError.AccessDenied) {
         errorDisplay = "VideoPlayerError.AccessDenied";

         break;
      }

      case (VideoPlayerError.ServiceMissing) {
         errorDisplay = "VideoPlayerError.ServiceMissing";
         break;
      }

      default {
         break;
      }
   }

   requestCustomDialog(100520231, "fa::close", "<font color='red'>Imeshindwa kuonyesha</font>", errorDisplay, "Sawa", "", "#", 0.8, 0.2, false);
}


def isVideoDialogMinimizeDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.2;
   }
}


def runTest(string input) {
   var output = input;

   return output;
}
