/**
 * Copyright 2022 - MagabeLab (Tanzania). All Rights Reserved.
 * Author Edwin Magabe    edyma24@gmail.com
 */

/* --------------  extensions  ---------------*/

def getScriptRunnerVersion() {
   try {
      return scriptRunnerVersion();
   } catch {
      return 1;
   }
}

def getAppPackageName() {
   try {
      return getPackageName();
   } catch {
      return "com.magabelab.matokeo.ya.darasa.la.nne";
   }
}

def packageNameToUrl(string packageName) {
   return "https://play.google.com/store/apps/details?id=".append(packageName);
}

def boolToString(bool b) {
   return b ? "true" : "false";
}


def string::indexOf(string s, int start, bool caseSensitive) {
   return strIndexOf(this, s, start, caseSensitive);
}

def string::contains(string s, bool caseSensitive) {
   return strContains(this, s, caseSensitive);
}

def string::remove(string s, bool caseSensitive) {
   return strRemove(this, s, caseSensitive);
}

def string::right(int n) {
   return strRight(this, n);
}

def string::left(int n) {
   return strLeft(this, n);
}

def string::mid(int position, int n) {
   return strMid(this, position, n);
}

def string::length() {
   return strLength(this);
}

def string::replace(string before, string after, bool caseSensitive) {
   return strReplace(this, before, after, caseSensitive);
}

def string::replaceAtPosition(int position, int n, string after) {
   return strReplaceAtPosition(this, position, n, after);
}

def string::startsWith(string str, bool caseSensitive) {
   return strStartsWith(this, str, caseSensitive);
}

def string::endsWith(string str, bool caseSensitive) {
   return strEndsWith(this, str, caseSensitive);
}

def string::truncate(int position) {
   return strTruncate(this, position);
}

def string::compare(string other, bool caseSensitive) {
   return strCompare(this, other, caseSensitive);
}

def string::split(string sep) {
   return strSplit(this, sep);
}

def string::append(string str) {
   return strAppend(this, str);
}

def string::prepend(string str) {
   return strPrepend(this, str);
}

def string::isLower() {
   return strIsLower(this);
}

def string::isUpper() {
   return strIsUpper(this);
}

def string::isEmpty() {
   return strIsEmpty(this);
}

def string::simplified() {
   return strSimplified(this);
}

def string::removeAtPosition(int position, int length) {
   return strRemoveAtPosition(this, position, length);
}

class Tag {
   def Tag(bool valid, int index, int length, string value) {
      this.valid = valid;
      this.index = index;
      this.length = length;
      this.value = value;
   }
   var valid;
   var index;
   var length;
   var value;
};

def string::getTag(string t, int start) {
   var closeTag = "</".append(t).append(">");
   var tag = Tag(false, -1, -1, "");
   var len = closeTag.length();
   var firstIndex = this.indexOf("<".append(t), start, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(closeTag, firstIndex + 1, false);
      if (lastIndex != -1) {
         var n = (lastIndex - firstIndex) + len;
         var value = this.mid(firstIndex, n);;
         tag = Tag(true, firstIndex, n, value);
      }
   }
   return tag;
}

def openTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def closeTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(chaR('/')).seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def string::removeOpenTag(string t) {
   var firstIndex = this.indexOf("<".append(t), 0, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(">", firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         this = this.removeAtPosition(firstIndex, len);
      }
   }
}

// Only use this function on a small atring
def string::removeCloseTag(string t) {
   this = closeTag(t).removeFrom(this, 0, -1);
}

def string::removeRegex(string regex) {
   this = strRemoveRegex(this, regex);
}

def string::replaceRegex(string regex, string replacement) {
   this = strReplaceRegex(this, regex, replacement);
}

/* -------------------------------------------------*/


def beforeHtmlJunkRemover(string html) {


}

def confirmHtmlJunkRemoval(string info) {
   if (info.contains("PREM", false)) {
      return false;
   } else {
      return true;
   }
}

def removeOpenTag(string output, string start, string end) {
   var firstIndex = output.indexOf(start, 0, false);
   if (firstIndex != -1) {
      var lastIndex = output.indexOf(end, firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         return output.removeAtPosition(firstIndex, len);
      }
   }
   return output;
}


def fixFor2018ResultsAndBelow(string html) {
   var output = html;
   var tr = output.getTag("tr", 0);
   if (tr.valid) {
      var td = tr.value.getTag("td", 0);
      if (td.valid) {
         if (td.value.contains("WALIOSAJILIWA", false)) {
            var index = output.indexOf("</td></tr>", tr.index, false);
            if (index != -1) {
               output = output.replaceAtPosition(tr.index, index + 10 - tr.index, "<tr>" + td.value + "</tr>");
            }
         }
      }
   }
   return output;
}

def removeGradeTrFor2018ResultsAndBelow(string html) {
   var output = html;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false) ||
            text.contains("MWANAFUNZI", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         } else {
            break;
         }
      } else {
         break;
      }
   }
   return output;
}

def runMoreOlderResultFix(string html) {
   var output = html;
   //Fix summary
   var i1 = output.indexOf("</H3>", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("<CANDIDATES>", 0, false);
      if (i2 != -1) {
         var start = i1 + 5;
         var len = i2 - start;
         var summary = output.mid(start, len);
         var isSummary = summary.contains("WALIOSAJILIWA", false);
         if (isSummary) {
            output = output.replaceAtPosition(start, len, "<SUMMARY>" + summary + "</SUMMARY>");
         }
      }
   }
   //Remove header tr
   var headerTag = output.getTag("tr", 0);
   if (headerTag.valid) {
      if (headerTag.value.contains("CAND.", false)) {
         output = output.removeAtPosition(headerTag.index, headerTag.length);
      }
   }
   return output;
}

def isSFNAPage(string html) {
   return html.contains("reg_", false) && html.contains("<REGIONS>", false);
}

def isRegionPage(string html) {
   return html.contains("distr_", false) && html.contains("<DISTRICTS>", false);
}

def isDistrictPage(string html) {
   return html.contains(".htm", false) && html.contains("<SCHOOLS>", false);
}

def cleanSFNAPage(string html) {
   var output = html;
   if (isSFNAPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("reg_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("reg_.htm", false)) {
      output = cleanSFNAPage(output);
   }
   return output;
}


def cleanRegionPage(string html) {
   var output = html;
   if (isRegionPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("distr_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("distr_.htm", false)) {
      output = cleanRegionPage(output);
   }
   return output;
}

def cleanDistrictPage(string html) {
   var output = html;
   if (isDistrictPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("\".htm\"", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("\".htm\"", false)) {
      output = cleanDistrictPage(output);
   }
   return output;
}

//  Add filter logic inside this function
def filterHtml(string html) {
   var output = html;
   var year = 0;
   var titleTag = output.getTag("H1", 0);
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
   }

   //Remove open table tag
   output = removeOpenTag(output, "<table", ">");
   output = removeOpenTag(output, "<font", ">");
   output = fixFor2018ResultsAndBelow(output);

   var summaryTag = Tag(false, -1, -1, "");

   //remove all unwanted tr tags
   while (true) {
      var tag = output.getTag("tr", 0);
      var tr = tag.value;

      if (tr.contains("JINSI", false) ||
         tr.contains("REFERRED", false) ||
         tr.contains("WAS", false) ||
         tr.contains("WAV", false) ||
         tr.contains("JUMLA", false) ||
         tr.contains("WALIOSAJILIWA", false) ||
         tr.contains("GREDI", false)) {
         if (tr.contains("WALIOSAJILIWA", false)) {
            summaryTag = tag;
         }
         output = output.removeAtPosition(tag.index, tag.length);
         if (tr.contains("MASOMO", false)) { //the last unwanted tr
            break;
         }
      } else {
         break;
      }
   }

   if (summaryTag.valid) {
      var summary = removeOpenTag(summaryTag.value, "<td", ">");
      summary = summary.remove("</td>", false)
      summary = summary.replace("<tr>", "<SUMMARY>", false)
      summary = summary.replace("</tr>", " </SUMMARY>", false)
      summary = summary.append("<CANDIDATES>");
      output = output.replace("<CANDIDATES>", summary, false);
   }

   //Fix year 2016 results
   if (year == 2016) {
      output = runMoreOlderResultFix(html);
   }

   //Remove all , in candidate tags that may cause modifyCandidateDetails to fail
   var candidateTag = output.getTag("CANDIDATES", 0);
   if (candidateTag.valid) {
      var cleaned = candidateTag.value.remove(",", false);
      output = output.replaceAtPosition(candidateTag.index, candidateTag.length, cleaned);
   }

   output = modifyCandidateDetails("CANDIDATES", output, "Kiswahili", "Hisabati", "English");

   //Remove PRE & from BLUE SKY PRE & PRIMARY SCHOOL(Arusha  -> meru)
   output = output.remove("PRE &", false);

   output = removeGradeTrFor2018ResultsAndBelow(output);

   output = cleanSFNAPage(output);
   output = cleanRegionPage(output);
   output = cleanDistrictPage(output);


   return output;
}


def getTdNodeTagNameForResults(int tdIndex, int tdCount, string tagText) {

   switch (tdIndex) {
      case (0) {
         return "CNO";
      }
      case (1) {
         return "SEX";
      }
      case (2) {
         return "CANDIDATE_NAME";
      }
      case (3) {
         return "DETAILED_SUBJECTS";
      }
      case (4) {
         return "AVERAGE";
      }
   }

   return "";
}


def updateMenu(string menu) {
   var output = menu;

   return output;
}


def getGenderWisePerformanceDataFor2018ResultsAndBelow(string html) {
   var output = html;
   var titleTag = output.getTag("H1", 0);
   var year = 0;
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      if (year > 2018) {
         return "";
      }
   } else {
      return "";
   }

   var json = year != 2016 ? "[{\"_0\":\"GREDI\",\"_1\":\"WAS\",\"_2\":\"WAV\",\"_3\":\"JUMLA\"}," : "[";
   var index = 0;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("WALIOSAJILIWA", false) ||
         tr.contains("GREDI", false) ||
         tr.contains("WAS.", false)) {
         output = output.removeAtPosition(tag.index, tag.length);
         continue;
      }
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false)) {
            var index = 0;
            var item = "{";
            while (true) {
               var tdTag = tr.getTag("td", 0);
               if (tdTag.valid) {
                  var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
                  item = item.append(",");
                  tr = tr.removeAtPosition(tdTag.index, tdTag.length);
                  index = index + 1;
               } else {
                  break;
               }
            }
            if (item.endsWith(",", true)) {
               item = item.mid(0, item.length() - 1);
            }
            item = item.append("}");
            var empty = (item.length() == 2);
            if (!empty) {
               json = json.append(item);
               json = json.append(",");
            }
            output = output.removeAtPosition(tag.index, tag.length);

         } else {
            break;
         }
      } else {
         break;
      }
   }
   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   var empty = (json.length() == 68);
   if (empty) {
      json = "";
   }
   return json;
}


def getGenderWisePerformanceData(string html) {
   var json = getGenderWisePerformanceDataFor2018ResultsAndBelow(html);

   if (!json.isEmpty()) {
      return json;
   } else {
      json = "[";
   }

   while (true) {
      var tag = html.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("GREDI", false) ||
         tr.contains("kati", false)) {
         html = html.removeAtPosition(tag.index, tag.length);
         continue;
      }

      if (tr.contains("MASOMO", false) ||
         tr.contains("English", false) ||
         tr.contains("Kiswahili", false) ||
         tr.contains("Hisabati", false) ||
         tr.contains("Sayansi", false)) {
         break;
      }
      if (tr.contains("REFERRED", false) ||
         tr.contains("WAS", false) ||
         tr.contains("WAV", false) ||
         tr.contains("JUMLA", false)) {
         var index = 0;
         var item = "{";
         while (true) {
            var tdTag = tr.getTag("td", 0);
            if (tdTag.valid) {
               var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
               if (text == "A" || text == "a") {
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append("JINSI").append("\"");
                  item = item.append(",");
                  index = index + 1;
               }
               item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
               item = item.append(",");

               tr = tr.removeAtPosition(tdTag.index, tdTag.length);
               index = index + 1;
            } else {
               break;
            }
         }
         if (item.endsWith(",", true)) {
            item = item.mid(0, item.length() - 1);
         }
         item = item.append("}");
         var empty = (item.length() == 2);
         if (!empty) {
            json = json.append(item);
            json = json.append(",");
         }
         html = html.removeAtPosition(tag.index, tag.length);

         if (tr.contains("JUMLA", false)) {
            break;
         }
      } else {
         break;
      }
   }

   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def verifyBaseUrlLastSegment(string url, string lastSegment) {
   var year = getYear(url, "");
   if (year <= 2016) {
      return "";
   } else {
      return lastSegment;
   }
}

def getNectaMenuUrl() {
   return "https://necta.go.tz/sfna_results";
}


def getNectaResultLinks(string html) {
   var links = [];
   //links.push_back("");

   return links;
}

def onUrlVisited(string url) {


}


def onShareViaSms(string phoneNumber, string resultsShared) {


}


def getUserAgentString() {
   return "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0";
}


def allowSchoolNameInSwahili() {
   return false;
}


global LATEST_APP_VERSION_NAME = "0.2"; //Always change this this on every App release
global WIN64_DOWLOAD_URL = "#"; //Todo put link
global DOWNLOAD_UPDATE_REQUESTCODE = 201;

def requestDownloadUpdateDialog(string description, string url) {
   requestCustomDialog(DOWNLOAD_UPDATE_REQUESTCODE, "fa::download", "Pakua toleo jipya!!", description, "Pakua", "Baadae", url, 0.8, 0.3, false);
}


def downloadUpdate() {
   try {

      var packageName = getAppPackageName();
      var message = "Toleo jipya la aplikesheni hii ambalo ni ".append(LATEST_APP_VERSION_NAME).append(" limeshatoka. Toleo hili lina muonekano bora, pakua sasa na pia usisahau ku-rate aplikesheni hii, Asante.");
      var os = getOperatingSystem();
      var url = (os == "android") ? packageNameToUrl(packageName) : WIN64_DOWLOAD_URL;
      var versionName = getVersionName(packageName);
      if (versionName != LATEST_APP_VERSION_NAME) {
         requestDownloadUpdateDialog(message, url);
      }

   } catch {}

}

global PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE = 32;
global FORM4_AND_6_PACKAGENAME = "com.magabelab.matokeo.kidato.cha4na6";

def onAppStarted() {
   try {

      downloadUpdate();

      var os = getOperatingSystem();
      if (os == "android") {

         if (!isPackageExisted(FORM4_AND_6_PACKAGENAME)) {
            setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 0.5); //wait 30 sec
         }

      } //os

      get("https://iplogger.com/1F4dd7.gif");

   } catch {}

}


def onAppExited(int status) {


}

def onStudentResultsOpened(string name, string no, string schoolName, string average, string year, string results) {

}

/* info is in json format*/
def onCandidateResultsClicked(string info) {

}

global PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE = 89;

/* pressedButton = no or yes */
def onCustomDialogClosed(int requestCode, string pressedButton, string answer) {
   switch (requestCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa, nitakukumbusha baadae");
            setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 1.5); //wait 1.5 min
         }
         break;
      }

      case (DOWNLOAD_UPDATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri");
         } else {
            showToastMessage(" :( "); //show sad face
         }
         break;
      }

      default {
         break;
      }
   }

}

def onTimeOut(int timerCode) {
   switch (timerCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE, "fa::download", "Matokeo kidato cha 4 na 6", "Angalia matokeo ya kidato cha 6 kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(FORM4_AND_6_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      default {
         break;
      }

   }

}

def runTest(string input) {
   var output = input;

   return output;
}
