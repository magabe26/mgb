/**
 * Copyright 2022-2023 , MagabeLab (Tanzania). All Rights Reserved.
 * Author Edwin Magabe    edyma24@gmail.com
 */

//------------------

def getScriptRunnerVersion() {
   try {
      return scriptRunnerVersion();
   } catch {
      return 1;
   }
}

def getAppPackageName() {
   try {
      return getPackageName();
   } catch {
      return "com.magabelab.matokeo.ya.darasa.la.nne";
   }
}

def packageNameToUrl(string packageName) {
   return "https://play.google.com/store/apps/details?id=".append(packageName);
}

//------------------

global MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES = 1.1

def getVersionNameAsDouble() {
   return to_double(getVersionName(getAppPackageName()));
}

//------------------

def boolToString(bool b) {
   return b ? "true" : "false";
}

//------------------

def saveOrUpdateData(string key, string value) {
   if (!saveData(key, value)) {
      return updateData(key, value);
   } else {
      return true;
   }
}

//------------------

def openTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def closeTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(chaR('/')).seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

//------------------

class Tag {
   def Tag(bool valid, int index, int length, string value) {
      this.valid = valid;
      this.index = index;
      this.length = length;
      this.value = value;
   }
   var valid;
   var index;
   var length;
   var value;
};

//------------------

/* -------------- string extensions  ---------------*/

def string::indexOf(string s, int start, bool caseSensitive) {
   return strIndexOf(this, s, start, caseSensitive);
}

def string::contains(string s, bool caseSensitive) {
   return strContains(this, s, caseSensitive);
}

def string::remove(string s, bool caseSensitive) {
   return strRemove(this, s, caseSensitive);
}

def string::right(int n) {
   return strRight(this, n);
}

def string::left(int n) {
   return strLeft(this, n);
}

def string::mid(int position, int n) {
   return strMid(this, position, n);
}

def string::length() {
   return strLength(this);
}

def string::replace(string before, string after, bool caseSensitive) {
   return strReplace(this, before, after, caseSensitive);
}

def string::replaceAtPosition(int position, int n, string after) {
   return strReplaceAtPosition(this, position, n, after);
}

def string::startsWith(string str, bool caseSensitive) {
   return strStartsWith(this, str, caseSensitive);
}

def string::endsWith(string str, bool caseSensitive) {
   return strEndsWith(this, str, caseSensitive);
}

def string::truncate(int position) {
   return strTruncate(this, position);
}

def string::compare(string other, bool caseSensitive) {
   return strCompare(this, other, caseSensitive);
}

def string::split(string sep) {
   return strSplit(this, sep);
}

def string::append(string str) {
   return strAppend(this, str);
}

def string::prepend(string str) {
   return strPrepend(this, str);
}

def string::isLower() {
   return strIsLower(this);
}

def string::isUpper() {
   return strIsUpper(this);
}

def string::isEmpty() {
   return strIsEmpty(this);
}

def string::simplified() {
   return strSimplified(this);
}

def string::removeAtPosition(int position, int length) {
   return strRemoveAtPosition(this, position, length);
}

def string::getTag(string t, int start) {
   var closeTag = "</".append(t).append(">");
   var tag = Tag(false, -1, -1, "");
   var len = closeTag.length();
   var firstIndex = this.indexOf("<".append(t), start, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(closeTag, firstIndex + 1, false);
      if (lastIndex != -1) {
         var n = (lastIndex - firstIndex) + len;
         var value = this.mid(firstIndex, n);;
         tag = Tag(true, firstIndex, n, value);
      }
   }
   return tag;
}

def string::removeOpenTag(string t) {
   var firstIndex = this.indexOf("<".append(t), 0, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(">", firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         this = this.removeAtPosition(firstIndex, len);
      }
   }
}

// Only use this function on a small atring
def string::removeCloseTag(string t) {
   this = closeTag(t).removeFrom(this, 0, -1);
}

def string::removeRegex(string regex) {
   this = strRemoveRegex(this, regex);
}

def string::replaceRegex(string regex, string replacement) {
   this = strReplaceRegex(this, regex, replacement);
}

def string::equals(string other, bool caseSensitive) {
   return this.length() == other.length() && strContains(this, other, caseSensitive);
}

/* -------------------------------------------------*/

//------------------

def getLocale() {
   var locale = getData("locale");
   if (locale.isEmpty()) {
      return "en";
   } else {
      return locale;
   }
}

def setLocale(string locale) {
   saveOrUpdateData("locale", locale);
}

def onChangeLocaleCommand(cmd, argv, argc) {
   if (cmd.equals("setLocale", false)) {
      if (argc == 1) {
         var locale = argv[0];
         setLocale(locale);
         if (locale == "sw") {
            requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4dff12'><u>Kiswahili</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         } else {
            requestCustomDialog(421, "fa::gear", "<font color='#4dff12'>MPANGILIO UMEBADILISHWA</font>", "Sasa majina ya shule yatasomeka kwa lugha ya <font color='#4d12ff'><u>Kiingereza</u></font>", "Sawa", "", "#", 0.8, 0.2, false);
         }
      }
   }
}

//------------------

def getFailureIdentifier() {
   var fid = getData("FailureIdentifier");
   if (fid.isEmpty()) {
      return "REFERRED";
   } else {
      return fid;
   }
}

def setFailureIdentifier(string fid) {
   saveOrUpdateData("FailureIdentifier", fid);
}

def onChangeFailureIdentifierCommand(cmd, argv, argc) {
   if (cmd.equals("changeFailureIdentifier", false)) {
      if (argc == 1) {
         var fid = argv[0];
         setFailureIdentifier(fid);
      }
   }
}

def updateFailureIdentifierMenu(string xml) {
   var output = xml;
   var tag = output.getTag("SELECT_TEXT", 0);
   var value = tag.value;
   if (value.removeOpenTag("SELECT_TEXT").removeCloseTag("SELECT_TEXT").trim().equals("REFERRED", false)) {
      value = tag.value;
      var tmp = changeFailureIdentifier(value);
      output = output.replace(tag.value, tmp, false);
   }
   return output;
}

//------------------

global imagesToBeSaved = [];
global savedImageIndex = 0;
global SAVE_IMAGE_FOR_OFFLINE_TIMERCODE = 2023457;

def saveImageForOffline(string imageUrl) {
   imagesToBeSaved.push_back(imageUrl);
   setTimer(SAVE_IMAGE_FOR_OFFLINE_TIMERCODE, 100);
}

def getOfflineImagePath(string imageUrl) {
   var path = getData(imageUrl);
   if (!path.isEmpty()) {
      if (fileExists(path) && (getFileSize(path) > 0)) {
         path = path.prepend("file:");
      } else {
         path = "";
      }
   }
   return path;
}

//------------------

global LOADING_IMAGE_RESOURCE_URL = "images/loading.gif";
global recentLoadingImageSet = "";

def setLoadingImage(string url) {
   var path = getOfflineImagePath(url).remove("file:", false);
   if (!path.isEmpty()) {
      saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL , path);
      loadingIndicatorImageChanged();
   } else {
      recentLoadingImageSet = url;
      saveImageForOffline(url);
   }
}

def setDefaultLoadingImage() {
   saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL , "");
   loadingIndicatorImageChanged();
}


def onLoadingImageSaved(string url, string path) {
   if (recentLoadingImageSet.equals(url, false)) {
      saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL, path);
      loadingIndicatorImageChanged();
      recentLoadingImageSet = "";
      var vn = getVersionNameAsDouble();
      var lvn = to_double(LATEST_APP_VERSION_NAME);
      if(vn == lvn){
         showOperationSuccessDialog("Kiashiria cha upakiaji kimebadilishwa.");
      }
    /*  if (getData("firstTime").isEmpty()) {
         saveOrUpdateData("firstTime", "no");
         if(vn == lvn){
            showLifeQuote();
         }
      }*/
   }
}

global HIDE_LOADING_INDICATOR_TIMER_CODE = 130620232;
global showLoadingIndicatorForXMillisCallback = fun[](){};

def showLoadingIndicatorForXMillis(double millis,cb){
    showLoadingIndicator();
	showLoadingIndicatorForXMillisCallback = cb;
	setTimer(HIDE_LOADING_INDICATOR_TIMER_CODE,millis);
}

def onShowLoadingIndicatorTimeOut(int timerCode){
  if (timerCode == HIDE_LOADING_INDICATOR_TIMER_CODE){;
	    hideLoadingIndicator();
	    try {
          showLoadingIndicatorForXMillisCallback();
        } catch {}
		showLoadingIndicatorForXMillisCallback = fun[](){};
	}
}

global CHANGE_LOADING_INDICATOR_REQUEST_CODE = 13062023;
global loadingIndicators = [
   "Kiashiria 0",
   "Kiashiria 1",
   "Kiashiria 2",
   "Kiashiria 3",
   "Kiashiria 4",
   "Tafadhali Subiri",
   "Kiashiria 6",
   "Kiashiria 7",
   "Kiashiria 8"
 ];
 
global loadingIndicatorsBaseURL  = "https://raw.githubusercontent.com/magabe26/mgb/master/";
global loadingIndicatorsUrls = [
  "",
  "loader2.gif",
  "loader3.gif",
  "loader4.gif",
  "loader5.gif",
  "TafadhaliSubiri.gif",
  "loader6.gif",
  "loader7.gif",
  "loader8.gif"
 
 ];

def onChangeLoadingIndictorCommand(cmd, argv, argc) {
    if (cmd.equals("changeLoadingIndicator", false) || cmd.contains("Upakiaji",false)) {
	     if(loadingIndicators.size() == loadingIndicatorsUrls.size()){
		       var options = "";
		       for (var i = 0; i < loadingIndicators.size(); ++i) {
			      options = options.append("&nbsp;&nbsp;&nbsp;<font color='#71f090'>"+to_string(i)+"</font>&nbsp;:&nbsp;").append("<font color='white'>"+loadingIndicators[i]+"</font><br>");
			   }
		 	 if(cmd.contains("Upakiaji",false)){
			   	  showCustomDialogAfterXMillis(CHANGE_LOADING_INDICATOR_REQUEST_CODE, "fa::cogs", "<font color='#71f090'>Badilisha Kiashiria Cha Upakiaji</font>", "<br><font color='#71f090'>Viashiria Vya Upakiaji Vilivyopo:-<br>" + options + "<br><font color='#10dee6'>Chagua:&nbsp;</font> <font color='white'>Weka namba ya kiashiria</font>", "Badilisha", "Funga", "#", 0.8, 0.5, true, 500);
			   }else{
			   	  requestCustomDialog(CHANGE_LOADING_INDICATOR_REQUEST_CODE, "fa::cogs", "<font color='#71f090'>Badilisha Kiashiria Cha Upakiaji</font>", "<br><font color='#71f090'>Viashiria Vya Upakiaji Vilivyopo:-<br>" + options + "<br><font color='#10dee6'>Chagua:&nbsp;</font> <font color='white'>Weka namba ya kiashiria</font>", "Badilisha", "Funga", "#", 0.8, 0.5, true);
			   }
		 }else{
             log("onChangeLoadingIndictorCommand Error: Size does not match, LoadingIndicators = " + to_string(loadingIndicators.size()) + ", LoadingIndicatorsUrls = " + to_string(loadingIndicatorsUrls.size()));
		 }	    
   }
}

def onChangeLoadingIndictorDialogClosed(int requestCode, string pressedButton, string answer) {

if( pressedButton == "no" ){ return;}

    if(requestCode == CHANGE_LOADING_INDICATOR_REQUEST_CODE){
	   var showPreview = fun [](int no,string url,cb){
	        var sleepTime = 2000;
	        if(no == 0){
			   showLoadingIndicatorForXMillis(sleepTime,cb);
			   return;
			}
			
			if(!url.isEmpty()){
			   var path = getOfflineImagePath(url).remove("file:", false);
			   if(fileExists(path)){
			      showLoadingIndicatorForXMillis(sleepTime,cb);
			      return;
			   }
			}
			showToastMessage("Tafadhali hakikisha umejiunga na huduma ya internet");
	   };	   
	   
	   var no = to_int(answer);
	   if(no >= 0 && no < loadingIndicators.size()){
	      var url = "";
	      if(no == 0){
		    setDefaultLoadingImage();
		  }else{
		    url = loadingIndicatorsBaseURL + loadingIndicatorsUrls[no];
		    setLoadingImage(url);
		  }
		 showPreview(no,url,fun[no](){
		     showOperationSuccessDialog("Kiashiria cha upakiaji sasa ni: <font color='#71f090'>" + loadingIndicators[no] + "</font>");
		  });
	   }else{
	      showOperationFailedDialog("Namba ya kiashiria si sahihi!");
	   }
	}
}

def setMyFavoriteLoadingIndicator(){
     var key = "MyFavoriteLoadingIndicatorSetForFirstTime";
     var r =  getData(key);
	 if(r.isEmpty()){
	    saveOrUpdateData(key,"1");
		setLoadingImage(loadingIndicatorsBaseURL + "loader4.gif");
	 }
 }
//------------------

def saveOtherAppsPageImages(string xml) {
   var fn = fun[](string url) {
      if (url.endsWith(".gif", false) || url.endsWith(".png", false) || url.endsWith(".jpg", false)) {
         saveImageForOffline(url);
      }
      return url;
   }
   var end = chaR('"').oR(chaR('\'')).oR(chaR('<'));
   stR("http", false).seq(any(end, "#<>").plus()).replaceInMapped(xml, fn, 0, -1);
}

//------------------

def putAdsImpl(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation, string rootTagName, string childTagName, string urlAttributeName, string wrapperTagName) {
   if ((!adLocation.equals("top", false)) && (!adLocation.equals("middle", false)) && (!adLocation.equals("bottom", false))) {
      return xml;
   }

   var ad = "";
   if (!imageUrl.isEmpty()) {
      saveImageForOffline(imageUrl);
      var bgColor = "<BG_COLOR>transparent</BG_COLOR>";
      var enableImage = "<ENABLE_IMAGE>1</ENABLE_IMAGE>";
      var imageURL = "<IMAGE_URL>".append(imageUrl).append("</IMAGE_URL>");
      var imageWidthFraction = "<IMAGE_WIDTH_FRACTION>".append(to_string(wf)).append("</IMAGE_WIDTH_FRACTION>");
      var imageHeightFraction = "<IMAGE_HEIGHT_FRACTION>".append(to_string(hf)).append("</IMAGE_HEIGHT_FRACTION>");
      ad = "<".append(childTagName).append(">").append("<A ").append(urlAttributeName).append("=\"").append(redirectUrl).append("\"></A>").append(bgColor).append(enableImage).append(imageURL).append(imageWidthFraction).append(imageHeightFraction).append("</").append(childTagName).append(">");
   } else {
      return xml;
   }

   if (adLocation.equals("middle", false)) {
      var count = 0;
      var i = xml.indexOf(urlAttributeName, 0, false);
      while (i != -1) {
         ++count;
         i = xml.indexOf(urlAttributeName, i + urlAttributeName.length(), false);
         if (count == 10000) { //we dont want to freeze ui do we?
            return xml;
         }
      }

      if (count > 1) {
         var middleItem = count / 2;
         var n = 0
         var fn = fun[n, middleItem, ad](string s) {
            var replace = (n == middleItem) ? (s + ad) : s;
            ++n;
            return replace;
         };

         return html_tag(childTagName).replaceInMapped(xml, fn, 0, -1);
      }
   }
   var topLocation = adLocation.equals("top", false);
   var tag = (topLocation ? "<" : "</") + rootTagName + ">";
   var i = xml.indexOf(tag, 0, false);
   if (i != -1) {
      var startChunk = xml.left(i);
      var endChunk = xml.mid(i + tag.length(), -1);
      if (topLocation) {
         return startChunk + tag + ad + endChunk;
      } else {
         return startChunk + ad + tag + endChunk;
      }
   }

   return xml;
}

def putAdsToMenu(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "NECTA_RESULTS", "RESULTS", "HREF", "");
}

def putAdsToHistoryPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "SCHOOLS", "SCHOOL", "URL", "");
}

def putAdsToRegionPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "DISTRICTS", "DISTRICT", "HREF", "REGION");
}

def putAdsToDistrictPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "SCHOOLS", "SCHOOL", "HREF", "DISTRICT");
}

def putAdsToSFNAPage(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "REGIONS", "REGION", "HREF", "SFNA");
}

//------------------

global EMAIL_US_REQUEST_CODE = 706033328;

def onShowAdvertiseWithUsDialogCommandForConsole(cmd, argv, argc) {
   if (cmd.equals("tangaza", false)) {
      showCustomDialogAfterXMillis(EMAIL_US_REQUEST_CODE, "fa::vcardo", " TANGAZA", "Tangaza katika aplikesheni hii. Tangaza <font color='green'><u>shule</u></font>, <font color='yellow'><u>stationery</u></font>, <font color='cyan'><u>kitabu</u></font> n.k  kwa kutumia mfumo wa picha. Kwa maelezo zaidi tutumie barua pepe.", "Tuma", "<font color='white'>Badae</font> ", "#emailUs", 0.8, 0.3, false,500);
   }
}

def onShowAdvertiseWithUsDialogCommand(cmd, argv, argc) {
   if (cmd.equals("showAdvertiseWithUsDialog", false)) {
      requestCustomDialog(EMAIL_US_REQUEST_CODE, "fa::vcardo", " TANGAZA", "Tangaza katika aplikesheni hii. Tangaza <font color='green'><u>shule</u></font>, <font color='yellow'><u>stationery</u></font>, <font color='cyan'><u>kitabu</u></font> n.k  kwa kutumia mfumo wa picha au video. Kwa maelezo zaidi tutumie barua pepe.", "Tuma", "<font color='white'>Badae</font> ", "#emailUs", 0.8, 0.3, false);
   }
   onShowAdvertiseWithUsDialogCommandForConsole(cmd, argv, argc);
}

def onEmailUsCommand(cmd, argv, argc) {
   if (cmd.equals("emailUs", false)) {
showToastMessage("Tafadhali subiri!");
      openPage("mailto:magabelab.tz@gmail.com");
   }
}
//------------------

global VISIT_MAGABE_LAB_REQUEST_CODE = 320230506;

def onVisitMagabeLabCommandForConsole(cmd, argv, argc) {
   if (cmd.equals("MagabeLab", false)) {
      showCustomDialogAfterXMillis(VISIT_MAGABE_LAB_REQUEST_CODE, "fa::rocket", " TUTEMBELEE", "<font color='cyan'>Tembelea tovuti yetu.</font>", "Sawa", "<font color='white'>Badae</font> ", "#visitMagabeLab", 0.8, 0.15, false,500);
   }
}
def onVisitMagabeLabCommand(cmd, argv, argc) {
   if (cmd.equals("visitMagabeLab", false)) {
      requestCustomDialog(VISIT_MAGABE_LAB_REQUEST_CODE, "fa::rocket", " TUTEMBELEE", "<font color='cyan'>Tembelea tovuti yetu.</font>", "Sawa", "<font color='white'>Badae</font> ", "#visitMagabeLab", 0.8, 0.15, false);
   }
   onVisitMagabeLabCommandForConsole(cmd, argv, argc);
}

//------------------
//video
class _VideoPlayerStatus {
   def _VideoPlayerStatus() {
      this.UnknownStatus = 0;
      this.NoMedia = 1;
      this.Loading = 2;
      this.Loaded = 3;
      this.Stalled = 4;
      this.Buffering = 5;
      this.Buffered = 6;
      this.EndOfMedia = 7;
      this.InvalidMedia = 8;
   }
   var NoMedia;
   var Loading;
   var Loaded;
   var Buffering;
   var Stalled;
   var Buffered;
   var EndOfMedia;
   var InvalidMedia;
   var UnknownStatus;
};
global VideoPlayerStatus = _VideoPlayerStatus();

class _VideoPlayerPlaybackState {
   def _VideoPlayerPlaybackState() {
      this.StoppedState = 0;
      this.PlayingState = 1;
      this.PausedState = 2;
   }
   var PlayingState;
   var PausedState;
   var StoppedState;
};
global VideoPlayerPlaybackState = _VideoPlayerPlaybackState();

class _VideoPlayerError {
   def _VideoPlayerError() {
      this.NoError = 0;
      this.ResourceError = 1;
      this.FormatError = 2;
      this.NetworkError = 3;
      this.AccessDenied = 4;
      this.ServiceMissing = 5;
   }
   var NoError;
   var ResourceError;
   var FormatError;
   var NetworkError;
   var AccessDenied;
   var ServiceMissing;
};
global VideoPlayerError = _VideoPlayerError();

//------------------

global SHOW_CONSOLE_REQUEST_CODE = 12052023;

def onShowConsoleCommand(cmd, argv, argc) {
   if (cmd.equals("showConsole", false)) {
      requestCustomDialog(SHOW_CONSOLE_REQUEST_CODE, "fa::windowmaximize", "Console", "<font color='cyan'>Weka Amri <font color='white'>[ Mfano: rekebisha;]</font> :- </font>", "Tuma", "", "#showConsole", 0.98, 0.5, true);
   }
}

//------------------

def getOfflineVideoPath(string url) {
   var path = getData(url);
   if (!path.isEmpty()) {
      if (fileExists(path) && (getFileSize(path) > 0)) {
         path = path.prepend("file:");
      } else {
         path = "";
      }
   }
   return path;
}

def onPlayVideoCommand(cmd, argv, argc) {
   if (cmd.equals("playVideo", false) || cmd.equals("onyeshaVideo", false)) {
      if (argc > 0) {
         var url = argv[0];
         var path = getOfflineVideoPath(url);
         if (!path.isEmpty()) {
            playVideo(path);
         } else {
            playVideo(url);
         }
      }
   }
}

//------------------

def sleep(int millis) {
   var t1 = getTimestamp();
   while ((getTimestamp() - t1) < millis) {}
}

//------------------

def encodeData(string data) {
   encryptAndSaveToFile(data, "tmp");
   return getFileData(generateAppRootFilePath("tmp.mgb"));
}

def decodeData(string data) {
   saveFileData(data, "tmp", "txt");
   return getDecryptedFileData(generateAppRootFilePath("tmp.txt"));
}

//------------------

global SHOW_CUSTOM_DIALOG_TIMERCODE = 12520232;
def showCustomDialogAfterXMillis(requestCode, icon, title, description, yesButtonText, noButtonText, url, percentWidth, percentHeight, showInputText, millis) {
   saveOrUpdateData("Custom_Dialog_Request_Code", to_string(requestCode));
   saveOrUpdateData("Custom_Dialog_Icon", icon);
   saveOrUpdateData("Custom_Dialog_Request_Title", encodeData(title));
   saveOrUpdateData("Custom_Dialog_Request_Description", encodeData(description));
   saveOrUpdateData("Custom_Dialog_Request_YesButtonText", encodeData(yesButtonText));
   saveOrUpdateData("Custom_Dialog_Request_NoButtonText", encodeData(noButtonText));
   saveOrUpdateData("Custom_Dialog_Request_Url", url);
   saveOrUpdateData("Custom_Dialog_Request_PercentWidth", to_string(percentWidth));
   saveOrUpdateData("Custom_Dialog_Request_PercentHeight", to_string(percentHeight));
   saveOrUpdateData("Custom_Dialog_Request_ShowInputText", to_string(showInputText ? 1 : 0));
   setTimer(SHOW_CUSTOM_DIALOG_TIMERCODE, millis);
}

def showOperationSuccessDialog(string message) {
   showCustomDialogAfterXMillis(421, "fa::smileo", "<font color='white'>IMEFANIKIWA</font>", message, "Sawa", "", "#", 0.8, 0.2, false, 500);
}

def showOperationFailedDialog(string message) {
   showCustomDialogAfterXMillis(421, "fa::close", "<font color='white'>IMESHINDWA</font>", "<font color='red'>" + message + "</font>", "Sawa", "", "#", 0.8, 0.2, false, 500);
}

//------------------

def onSaveFileCommand(cmd, argv, argc) {
   if (cmd.equals("saveFile", false) || cmd.equals("tunzaFaili", false)) {
      showLoadingIndicator();
      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            hideLoadingIndicator();
            showOperationFailedDialog("Invalid url");
            return;
         }

         var fileName = "";
         if (argc > 1) {
            fileName = argv[1];
         } else {
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = url.split("/");
            forEachString(arr, fn);

            fileName = list[list.size() - 1];
         }

         var path = generateAppRootFilePath(fileName);
         if (saveFile(url, path)) {
            saveOrUpdateData(url, path);
            pasteToClipboard(path);
            hideLoadingIndicator();
            showOperationSuccessDialog("<font color='green'> url: " + url + "<br>imetunzwa : " + path + "</font>");
         } else {
            hideLoadingIndicator();
            showOperationFailedDialog("<font color='red'> imeshindwa kutunza faili</font>");
         }

      }
      hideLoadingIndicator();
   }
}

//------------------

def onSaveAndPlayVideoCommand(cmd, argv, argc) {
   if (cmd.equals("saveAndPlayVideo", false) || cmd.equals("tunzaNaOnyeshaVideo", false)) {

      showLoadingIndicator();

      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            showOperationFailedDialog("Invalid url");
            hideLoadingIndicator();
            return;
         }

         var path = getOfflineVideoPath(url);
         if (!path.isEmpty()) {
            hideLoadingIndicator();
            playVideo(path);
            return;
         }

         var fileName = "";
         if (argc > 1) {
            fileName = argv[1];
         } else {
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = url.split("/");
            forEachString(arr, fn);

            fileName = list[list.size() - 1];
         }

         path = generateAppRootFilePath(fileName);
         if (saveFile(url, path)) {
            saveOrUpdateData(url, path);
            pasteToClipboard(path);
            hideLoadingIndicator();
            playVideo("file:" + path);
         } else {
            hideLoadingIndicator();
            showOperationFailedDialog("<font color='red'> imeshindwa kutunza faili</font>");
         }
      }
      hideLoadingIndicator();
   }
}


//------------------

def onOfflineVideoCommand(cmd, argv, argc) {
   if (cmd.equals("offlineVideo", false) || cmd.equals("videoIlipotuzwa", false)) {
      showLoadingIndicator();
      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            showOperationFailedDialog("Invalid url");
            hideLoadingIndicator();
            return;
         }

         var path = getOfflineVideoPath(url);
         pasteToClipboard(path);
         showCustomDialogAfterXMillis(421, "fa::close", "VIDEO ILIPOTUNZWA", "Imetunzwa = " + path, "Ok", "", "#", 0.8, 0.2, false, 500);
      }
      hideLoadingIndicator();
   }
}

//------------------
//------------------

global lifeQuotes = [
  "A CONFIDENT PERSON AVOIDS TWO THINGS IN LIFE: IDLE GOSSIP AND PETTY CONFLICTS, CHOOSING INSTEAD TO CULTIVATE UNDERSTANDING AND FOSTER HARMONY",
  "THE KEY IS TO KEEP COMPANY ONLY WITH PEOPLE WHO UPLIFT YOU, WHOSE PRESENCE CALLS FORTH YOUR BEST.",
  "THE AIM OF THE WISE IS NOT TO SECURE PLEASURE BUT TO AVOID PAIN.",
  "THE MISFORTUNE OF THE WISE IS BETTER THAN THE PROSPERITY OF THE FOOL.",
  "WHAT IT LIES IN OUR POWER TO DO, IT LIES IN OUR POWER NOT TO DO.",
  "COURAGE IS THE FIRST OF HUMAN QUALITIES BECAUSE IT IS THE QUALITY THAT GUARANTEES OTHERS.",
  "NO ONE IS MORE HATED THAN HE WHO SPEAKS THE TRUTH.",
  "BY DESIRING LITTLE, A POOR MAN MAKES HIMSELF RICH.",
  "THE ONLY TRUE WISDOM IS IN KNOWING YOU KNOW NOTHINGS.",
  "HE IS A MAN OF COURAGE WHO DOES NOT RUN AWAY BUT REMAINS AT HIS POST AND FIGHTS AGAINST THE ENEMY.",
  "DO NOT CHASE AFTER HAPPINESS, IT IS ALWAYS IN YOU.",
  "IN ANGER, WE SHOULD REFRAIN BOTH FROM SPEECH AND ACTION.",
  "LET HIM THAT WOULD MOVE THE WORLD FIRST MOVE HIMSELF",
  "A FOOL IS KNOWN BY HIS SPEECH, AND A WISE MAN BY SILENCE.",
  "HE WHO LAUGHS AT HIMSELF NEVER RUNS OUT OF THINGS TO LAUGH AT.",
  "IN OLD AGE, WE ALL REGRET NOT HAVING KILLED LAZINESS IN OURSELVES.",
  "A WISE MAN SPEAKS BECAUSE HE HAS SOMETHING TO SAY, A FOOL BECAUSE HE HAS TO SAY SOMETHING.",
  "MEN SHOULD STRIVE TO THINK MUCH AND KNOW LITTLE.",
  "MANKIND IS MADE OF TWO KINDS OF PEOPLE: WISE PEOPLE WHO KNOW THEY`RE FOOLS, AND FOOLS WHO THINK THEY ARE WISE.",
  "HE IS RICHEST WHO IS CONTENT WITH THE LEAST, FOR CONTENT IS THE WEALTH OF NATURE.",
  "REST SATISFIED WITH DOING WELL, AND LEAVE OTHERS TO TALK OF YOU AS THEY PLEASE.",
  "REALITY IS CREATED BY THE MIND, WE CAN CHANGE OUR REALITY BY CHANGING OUR MIND",
  "EMPLOY YOUR TIME IN IMPROVING YOURSELF BY OTHER MEN`S WRITINGS, SO THAT YOU SHALL GAIN EASILY WHAT OTHERS HAVE LABORED HARD FOR.",
  "THE OLDEST, SHORTEST WORDS -- `YES` AND `NO` ARE THOSE WHICH REQUIRE THE MOST THOUGHT.",
  "MAN IS NOT WORRIED BY REAL PROBLEMS SO MUCH AS BY HIS IMAGINED ANXIETIES ABOUT REAL PROBLEMS.",
  "SMALL-MINDED PEOPLE BLAME OTHERS. AVERAGE PEOPLE BLAME THEMSELVES. THE WISE SEE ALL BLAME AS FOOLISHNESS",
  "SMART PEOPLE LEARN FROM EVERYTHING AND EVERYONE, AVERAGE PEOPLE FROM THEIR EXPERIENCES, STUPID PEOPLE ALREADY HAVE ALL THE ANSWERS.",
  "STRONG MINDS DISCUSS IDEAS, AVERAGE MINDS DISCUSS EVENTS, WEAK MINDS DISCUSS PEOPLE.",
  
  //Asha-Rose Migiro
  "MORE AND MORE LEADERS AROUND THE WORLD ARE JOINING THE STRUGGLE. MORE AND MORE INDIVIDUALS UNDERSTAND THAT ANY ABUSE OF ANY WOMEN IS INTOLERABLE.",
  
  //Jakaya Kikwete
  
  "ROADS ARE THE BLOOD VESSELS OF THE ECONOMY.",
  "AFRICA NEEDS ACCESS TO MARKETS.",
  
  //Benjamin Mkapa
  "THERE IS A THOUGHT THAT POVERTY IS A PUBLIC POLICY FAILURE; POVERTY IS MAN-MADE BY ACTION AND NON ACTION; POVERTY CAN BE ELIMINATED.",
  
  //John Pombe Magufuli
  "TUKO HAPA KWA AJILI YA KULINDA MASLAHI YA WATANZANIA. TUMECHEZEWA MNO.",
  "MWIZI NI MWIZI TU! HATA KAMA AWE MZUNGU! WALIKUWA WANATUIBIA DHAHABU ZETU. NIMEWATUMBUA BILA AIBU... BILA WOGA!",

  //President Samia Suluhu Hassan
  "WE ARE NOT ENEMIES WITH ANYBODY. WE RESPECT THE VIEWS OF THOSE WE DO NOT AGREE WITH, EVEN AS WE CONTINUE TO DEFEND OURS AS A RESPONSIBILITY PASSED DOWN FROM OUR FOREFATHERS.",
  "SUALA LA USALAMA BARABARANI HALINA BUDI KUPEWA UZITO MKUBWA NA KUWA AJENDA YA TAIFA. SUALA LA AJALI LINAMGUSA KILA MTU HALICHAGUI, NAOMBA MLIPE UZITO MKUBWA IWE AJENDA YA TAIFA",
  "A WOMAN IS LIKE A TEA BAG; YOU CAN`T TELL HOW STRONG SHE IS UNTIL YOU PUT HER IN HOT WATER.",

  // Julius Nyerere
  "VIONGOZI WABOVU WENYE MIOYO YA KUKU, HULIZWA NA MATATIZO; BALI WATU MADHUBUTI, WENYE MIOYO THABITI, HUKOMAZWA NAYO ... HATIMA YA NCHI YETU NI JUKUMU LETU. KWA PAMOJA TUNAWEZA KUISAIDIA NCHI YETU KUSONGA MBELE KUELEKEA KWENYE HAKI ZAIDI NA USAWA ZAIDI KWA WATANZANIA WOTE.",
  "TUNATAKA KUONA VIJANA JEURI KATIKA TAIFA HILI NA WENYE KUJIAMINI NA SIO WAOGA AKINA `NDIO BWANA MKUBWA`. TUNATAKA KUONA VIJANA WENYE UJASIRI WA KUHOJI NA KUPIGA VITA MIFUMO YA KIDHALIMU ISIYOSHABIHIANA NA MATAKWA NA MATARAJIO YA JAMII YA KITANZANIA.",
  "NITASEMA KWELI DAIMA. FITINA KWANGU NI MWIKO.",
  "INDEPENDENCE CANNOT BE REAL IF A NATION DEPENDS UPON GIFTS.",
  "MAKOSA YETU MENGINE HUTOKANA NA WOGA; WOGA UNAOTUZUIA KUMLAUMU MKUBWA JAPO TUNAJUA KUWA KAKOSA, AU KUMTETEA MDOGO ANAYELAUMIWA NA WAKUBWA JAPO TUNAJUA KUWA HANA MAKOSA",
  "THERE IS NO TIME TO WASTE. WE MUST EITHER UNITE NOW OR PERISH.",
  "WATU WALIO HATARI SANA NI WALE AMBAO WANAFIKIRI KUWA WANAJUA KILA KITU, WALA HAWANA HAJA KUJIFUNZA ZAIDI. HII NI TABIA MBAYA AMBAYO HUZUIA KABISA MAENDELEO.",
  "SMALL NATIONS ARE LIKE INDECENTLY DRESSED WOMEN. THEY TEMPT THE EVIL-MINDED.",
  "WENGINE HUGAWA WATU KATIKA MAFUNGU. `FULANI` JAPO AKIFANYA KOSA KUBWA SANA HASEMWI, LAKINI `FULANI` WA PILI AKIFANYA KOSA JAPO DOGO, KOSA LILE HUKUZWA LIKAWA KAMA MLIMA KILIMANJARO.",
  "YOU CANNOT DEVELOP PEOPLE. YOU MUST ALLOW PEOPLE TO DEVELOP THEMSELVES.",
  "WENGINE HUMWONA MWENZAO ANAFANYA KOSA. BADALA YA KUMWAMBIA PALE PALE KIJAMAA KWAMBA ATENDALO NI KOSA, WATANYAMAZA KIMYA. LAKINI HAWANYAMAZI KIMYA KABISA! WATAKWENDA KUMTETA KATIKA VIKUNDI VYA SIRI SIRI.",
  "IF REAL DEVELOPMENT IS TO TAKE PLACE, THE PEOPLE HAVE TO BE INVOLVED.",
  "UKIONDOA MATATIZO WAYAPATAYO BINADAMU KWA SABABU YA MAMBO KAMA MAFURIKO, NZIGE, KIANGAZI N.K, MATATIZO YAO MENGI HUTOKANA NA UNAFSI.",
  "EDUCATION IS NOT A WAY TO ESCAPE POVERTY, IT IS A WAY OF FIGHTING IT.",
  "KUJIELIMISHA NI KUTAFUTA UKWELI WA MAMBO.",
  "KOSA JINGINE NI KUTOJIELIMISHA. KANUNI YETU MOJA INASEMA: `NITAJIELIMISHA KWA KADIRI YA UWEZO WANGU WOTE NA KUTUMIA ELIMU YANGU KWA FAIDA YA WOTE`. WENGINE HUFIKIRI KUWA KUJIELIMISHA NI KUJUA KUSOMA NA KUANDIKA. HILO NI KOSA, LAKINI SI KUBWA KAMA LA PILI. WENGI WETU, HASA BAADHI YA VIONGOZI, HUFIKIRI KUWA TUNAJUA KILA KITU NA HATUNA HAJA KUJIFUNZA JAMBO LOLOTE ZAIDI."

  
];

global lifeQuotesAuthor = [
  "Epicurus",
  "Epictetus",
  "Aristotle",
  "Epicurus",
  "Aristotle",
  "Aristotle",
  "Plato",
  "Democritus",
  "Socrates",
  "Socrates",
  "Pythagoras",
  "Pythagoras",
  "Socrates",
  "Pythagoras",
  "Epictetus",
  "Epicurus",
  "Plato",
  "Democritus",
  "Socrates",
  "Socrates",
  "Pythagoras",
  "Plato",
  "Socrates",
  "Pythagoras",
  "Epictetus",
  "Epictetus",
  "Socrates",
  "Socrates",
  //Asha-Rose Migiro
  
  "Asha-Rose Migiro",
  
  //Jakaya Kikwete
  
  "Dr. Jakaya Kikwete",
  "Dr. Jakaya Kikwete",
  
  //Benjamin Mkapa
  
  "Benjamin Mkapa",
  //John Pombe Magufuli
  "Dr. John Pombe Magufuli",
  "Dr. John Pombe Magufuli",

  //President Samia Suluhu Hassan
  
  "Dr. Samia Suluhu Hassan <font color='gray'>[President Of United Republic Of Tanzania]</font>",
  "Dr. Samia Suluhu Hassan <font color='gray'>[Rais Wa Tanzania]</font>",
  "Dr. Samia Suluhu Hassan <font color='gray'>[President Of United Republic Of Tanzania]</font>",
   
  // Julius Nyerere
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>"

];

global LIFE_QUOTE_REQUESTCODE = 1002023;

def showLifeQuote(){
  if(lifeQuotes.size()  == lifeQuotesAuthor.size()){
     var key = "CurrentLifeQuote";
     var len = lifeQuotes.size();
     var indexStr = getData(key);
	 var index = len - 1;
	 if(!indexStr.isEmpty()){
	    index = to_int(indexStr);
	 }
	 
	 if(index < 0 || index >= len){
	    index = len - 1;
	 }
	 
	 showCustomDialogAfterXMillis(LIFE_QUOTE_REQUESTCODE, "fa::bell", "<br><font color='white'>NUKUU</font>", "<br><font color='cyan'>("+ to_string(index + 1) + ")&nbsp;</font>" +lifeQuotes[index] + "<br><i><u><font color='cyan'>" + lifeQuotesAuthor[index] + "</u></i></font><br><br><font color='yellow'>[Hiari]</font>&nbsp;Weka namba ya nukuu, mfano:- " + to_string(lifeQuotes.size()), "Nyingine", "Funga", "#", 0.9, 0.6, true,600);	 
	 saveOrUpdateData(key,to_string(index - 1));
  }else{
     log("ERROR: LIFE QUOTES LENGTH DOES NOT MARCH , lifeQuotes = " + to_string(lifeQuotes.size()) + ", lifeQuotesAuthor = " + to_string(lifeQuotesAuthor.size()));
  }
}


def onLifeQuoteDialogClosed(int requestCode, string pressedButton, string answer){
if(requestCode == LIFE_QUOTE_REQUESTCODE){
   if (pressedButton == "yes") {
       var n = -1;
	   try{
	     n = to_int(answer);
		 if(n > 0){
		    saveOrUpdateData("CurrentLifeQuote",to_string(n - 1));
		 }
	   }catch{}	   
      showLifeQuote();
   }
  }
}


def onShowQuotesCommand(cmd, argv, argc) {
   if (cmd.equals("showQuotes", false)  || cmd.equals("nukuu", false) || cmd.equals("quotes", false) || cmd.equals("quote", false)) {
       showLifeQuote();
   }
}

global currentResultYear = 0;

global adsShown = 0;
global adsInitialized = false;
global SHOW_AD_TIMERCODE = 1011001;

//------------------

global ENABLE_ACCESS_POINTS_FEATURE = false;
global ACCESS_POINTS_DIALOG_REQUEST_CODE = 260620231;
global SCHOOL_RESULT_REQUIRED_ACCESS_POINTS = 5;
global STUDENT_RESULT_REQUIRED_ACCESS_POINTS = 1.25;
global REWARD_ACCESS_POINTS_FOR_AD = 80;
global rewardInitiatedByCommand = false;

def saveAccessPoints(double points) {
   saveOrUpdateData("ACCESS_POINTS", to_string(points));
}

def getAccessPoints() {
   var points = getData("ACCESS_POINTS");
   if (points.isEmpty()) {
      return 0;
   } else {
      return to_double(points);
   }
}

def incrementAccessPoints(double points) {
   saveAccessPoints(points + getAccessPoints());
}

def enableAccessPointsGuard(double requiredPoints, redirectFn) {
   if (ENABLE_ACCESS_POINTS_FEATURE) {
      var points = getAccessPoints();
      if (points < requiredPoints) {
         showLoadingIndicatorForXMillis(100, fun[redirectFn, points, requiredPoints]() {
            try {
               redirectFn();
            } catch {}
            var message = "Ili kufunguka unaitaji pointi <h1><font color='cyan'>" + to_string(requiredPoints) + "</font></h1><br> Kwa sasa una jumla ya pointi <font color='red'>" + to_string(points) + "</font><br> <font color='#71f090'>Angalia tangazo hili kuongeza pointi zako.</font>";
            requestCustomDialog(ACCESS_POINTS_DIALOG_REQUEST_CODE, "fa::bullhorn", "<br><font color='white'>POINTI ZAKO HAZITOSHI</font>", message, "Ongeza pointi", "<font color='white'>Badae</font>", "#", 0.98, 0.3, false);
         });
      } else {
         incrementAccessPoints(-1 * requiredPoints);
      }
   }
}

def onAccessPointsDialogClosed(int requestCode, string pressedButton, string answer) {
   if (requestCode == ACCESS_POINTS_DIALOG_REQUEST_CODE) {
      if (pressedButton == "yes") {
         showToastMessage("Tafadhali hakikisha umejiunga na huduma ya intaneti.");
         if (adsInitialized) {
            showOrLoadAd();
         } else {
            initializeAds();
         }
showLoadingIndicator();
      } else {
         showToastMessage("sawa");
      }
   }
}

def giveRewardForAd() {
   if (!ENABLE_ACCESS_POINTS_FEATURE) {
      return;
   }
   incrementAccessPoints(REWARD_ACCESS_POINTS_FOR_AD);
   var message = "Sasa una jumla ya pointi <font color='cyan'><h1>" + to_string(getAccessPoints()) + "</h1></font>";
   requestCustomDialog(421, "fa::coffee", "UMEPOKEA POINTI " + to_string(REWARD_ACCESS_POINTS_FOR_AD), message, "Sawa", "", "#", 0.98, 0.2, false);
if(rewardInitiatedByCommand){
	  rewardInitiatedByCommand = false;
      requestOtherAppsPage();
	}
}

global currentSchool = "";
def enableAccessPointsGuardForSchoolResult(string displayName) {
   var os = getOperatingSystem();
   if (os != "android") {
      return;	   
   }
   var points = getAccessPoints();
   if ((!currentSchool.isEmpty()) && (currentSchool == displayName) && (points >= STUDENT_RESULT_REQUIRED_ACCESS_POINTS /*ok*/ )) {
      return;
   }
   enableAccessPointsGuard(SCHOOL_RESULT_REQUIRED_ACCESS_POINTS, fun[]() {
      requestHistoryPage();
   });
   currentSchool = displayName;
}

def enableAccessPointsGuardForStudentResult() {
   var os = getOperatingSystem();
   if (os != "android") {
      return;	   
   }
   enableAccessPointsGuard(STUDENT_RESULT_REQUIRED_ACCESS_POINTS, fun[]() {
      requestHistoryPage();
   });
}


def putAccessPointsBalanceOnOtherAppsInfo(string xml) {
   if (!ENABLE_ACCESS_POINTS_FEATURE) {
      return xml;
   }

   var os = getOperatingSystem();
   if (os != "android") {
       return xml;	   
   }
   if (xml.contains("<APPS>", false)) {
      xml = xml.remove("<APPS>", false);
      xml = stR("<?xml", false).seq(any(chaR('>'), "").plus()).seq(chaR('>')).removeFrom(xml, 0, -1);

      var points = getAccessPoints();
      var pointsXml = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><APPS>";
      pointsXml = pointsXml.append("<APP><A HREF='#addPoints'>Jumla ya pointi zako ni ").append(to_string(points)).append("</A>");
      pointsXml = pointsXml.append("<COLOR>white</COLOR>");
      pointsXml = pointsXml.append("<BG_COLOR>transparent</BG_COLOR>");
      pointsXml = pointsXml.append("<ENABLE_BUTTON>1</ENABLE_BUTTON>");
      pointsXml = pointsXml.append("<BUTTON_TEXT>Ongeza pointi</BUTTON_TEXT>");
      pointsXml = pointsXml.append("<BUTTON_TEXT_COLOR>#71f090</BUTTON_TEXT_COLOR>");
      pointsXml = pointsXml.append("<BUTTON_BG_COLOR>blue</BUTTON_BG_COLOR>");
      pointsXml = pointsXml.append("<BOLD_TEXT>1</BOLD_TEXT>");
      pointsXml = pointsXml.append("</APP>");

      pointsXml = pointsXml.append("<APP><A HREF='#'></A>");
      pointsXml = pointsXml.append("<BG_COLOR>transparent</BG_COLOR>");
      pointsXml = pointsXml.append("</APP>");
      xml = pointsXml + xml;
   }

   return xml;
}

def onAddPointsCommand(cmd, argv, argc) {
   if (cmd.equals("addPoints", false)) {
      var message = "<font color='#71f090'>Angalia tangazo hili kuongeza pointi zako.</font><br><u><i>(Tafadhali hakikisha umejiunga na huduma ya intaneti)</i></u>";
      requestCustomDialog(ACCESS_POINTS_DIALOG_REQUEST_CODE, "fa::coffee", "ONGEZA POINTI", message, "Ongeza pointi", "<font color='white'>Badae</font>", "#", 0.98, 0.2, false);
rewardInitiatedByCommand = true;
   }
}

def enableAccessPointsGuardForPerformanceChecks(){
   if(ENABLE_ACCESS_POINTS_FEATURE && (getAccessPoints() >= 0.5)){
	  incrementAccessPoints(-0.5);
   }
}

def enableAccessPointsGuardForPages(){
   if(ENABLE_ACCESS_POINTS_FEATURE && (getAccessPoints() >= 0.25)){
	  incrementAccessPoints(-0.25);
   }
}

//------------------

def arrayCount(array) {
   var count = 0;
   forEachString(array, fun[count](string) {
      ++count
   });
   return count;
}

def getCandidateItemTag(string text) {
   text = text.simplified();
   if (text.equals("m", false) || text.equals("f", false) || text.equals("male", false) || text.equals("female", false) || text.equals("msichana", false) || text.equals("mvulana", false)) {
      return "SEX";
   } else if (text.equals("a", false) || text.equals("b", false) || text.equals("c", false) || text.equals("d", false) || text.equals("e", false) || text.equals("f", false) || text.equals("referred", false)) {
      return "AVERAGE";
   } else if (text.equals("i", false) || text.equals("ii", false) || text.equals("iii", false) || text.equals("iv", false) || text.equals("0", false) || text.equals("merit", false) || text.equals("demerit", false)) {
      return "DIV";
   } else {
      var hasSpace = space().hasMatch(text, 0);
      if (hasSpace) {
          var wordCount = arrayCount(text.split(" "));

         if (!(digit().hasMatch(text, 0)) && (wordCount == 2 || wordCount == 3) && ((!text.contains("-", false)) && (!text.contains(",", false)) && (!text.contains(";", false)))) {
            return "CANDIDATE_NAME";
         } else {
            var separator = chaR('-').oR(chaR('~')).optional();
            var quote = chaR('\'').oR(chaR('"')).optional();
            var score = stR("a", false).oR(stR("b", false)).oR(stR("c", false)).oR(stR("d", false)).oR(stR("e", false)).oR(stR("f", false));
            var containSubjectScore = letter().plus().seq(spaceOptional()).seq(separator).seq(spaceOptional()).seq(quote).seq(spaceOptional()).seq(score).seq(spaceOptional()).seq(quote).hasMatch(text, 0);
            if (containSubjectScore) {
               return "DETAILED_SUBJECTS";
            }
         }
      } else {
         if (text.contains("-", false) || text.contains("/", false) || (text.length() > 2 && text.length() <= 4)) {
            return "CNO";
         } else if ((text.length() > 4) && (!letter().hasMatch(text, 0))) {
            return "PREM_NO";
         } else if ((!letter().hasMatch(text, 0)) && (text.length() == 1 || text.length() == 2)) {
            return "AGGT";
         }
      }
   }
   return "";
}

def getTagText(string input) {
   return chaR('<').seq(any(chaR('>'), "<>").plus()).seq(chaR('>')).removeFrom(input, 0, -1).simplified();
}

def formatCandidateResult(string input) { //input = candidate tr
   var output = "<CANDIDATE>";

   stR("<td", false).seq(any(stR("td>", false), "").plus()).seq(stR("td>", false)).replaceInMapped(input, fun[output](string tag) {
      var text = getTagText(tag);
      var newTag = getCandidateItemTag(text);
      if (!newTag.isEmpty()) {
         var item = "<" + newTag + ">" + text + "</" + newTag + ">";
         output += item;
      }
      return tag;
   }, 0, -1);

   output += "</CANDIDATE>";

   return output;
}

//------------------
//--------------------------

def onOpenURLCommand(cmd, argv, argc) {
   if (cmd.equals("openurl", false)) {
      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            return;
         }
         openPage(url);
      }
   }

}

//--------------------------
def getPremNoName() {
   return "PREM NO";
}

/*---------------------------------*/

def githubFile(string name) {
   return "https://raw.githubusercontent.com/magabe26/mgb/master/".append(name);
}

/*------Menu download-------------*/

def getGithubMenuURL() {
   var pn = getAppPackageName();
   if (pn.endsWith("la.nne", false)) {
      return githubFile("std4_menu.xml");
   } else if (pn.endsWith("la.saba", false)) {
      return githubFile("necta.primary.std7.xml");
   } else if (pn.endsWith("ya.qt", false)) {
      return githubFile("QT_menu.xml");
   } else {
      return "";
   }

}

def isMenuXML(string xml) {
   return html_tag("NECTA_RESULTS").hasMatch(xml, 0) && html_tag("RESULTS").hasMatch(xml, 0) && html_tag("A").hasMatch(xml, 0);
}

/*
A fast method to get links from necta website news section
Use this instead of getMainResultURLs in addResultLinksFromNectaFrontPage 
*/
def getNectaNewsLinks(string content) {
   var links = [];
   var fn = fun[links](string input) {
      var link = stR("href=", false).oR(chaR('"')).oR(chaR('\'')).removeFrom(html_attr("href").firstStringMatch(input, 0), 0, -1);
      links.push_back(link);
      return "";
   };
   stR("class=\"news-title\">", false).seq(any(chaR('>'), "").plus()).replaceInMapped(content, fn, 0, -1);
   return links;
}

def addResultLinksFromNectaFrontPage(string resultType, string menu) {
   var updatedMenu = menu;
   var content = get("https://www.necta.go.tz/");
   var i1 = content.indexOf("<!--START NEWS-->", 0, false);
   if (i1 != -1) {
      var i2 = content.indexOf("<!--END NEWS-->", i1, false);
      if (i2 != -1) {
         content = content.mid(i1, i2 - i1);
      }
   }
   var links = getNectaNewsLinks(content);
   if(links.size() == 0){
      links = getMainResultURLs(content);
   }

   forEachString(links, fun[updatedMenu, resultType](link) {
      if (link.contains("selection", false)) {
         return;
      }
      var end = stR(".htm", false);
      var fileName = chaR('/').seq(any(end, "/").plus()).seq(end).firstStringMatch(link, 0);
      if (!fileName.contains(resultType, false)) {
         return;
      }

      var year = getYear("", link);
      if (year != 0) {
         var name = to_string(year);
         if (!updatedMenu.contains(name, false)) {
            updatedMenu = addLinkToMenuXML(name, link, updatedMenu);
         }
      }

   });
   return updatedMenu;
}

def getNectaUpdatedMenu(string menu) {
   var updatedMenu = menu;
   var links = getMainResultURLs(get(getNectaMenuUrl()));
   forEachString(links, fun[updatedMenu](link) {
      var year = getYear("", link);
      if (year != 0) {
         var name = to_string(year);
         if (!updatedMenu.contains(name, false)) {
            updatedMenu = addLinkToMenuXML(name, link, updatedMenu);
         }
      }

   });
   return addResultLinksFromNectaFrontPage("sfna",updatedMenu);
}

def downloadMenu(string url) {
   var menu = get(url);
   if (isMenuXML(menu)) {
      deleteFile(generateAppRootFilePath("Menu.mgb"));
      encryptAndSaveToFile(getNectaUpdatedMenu(menu), "Menu");
   }
}

/*--------------------------------*/
/*----------------sys cleanup-----------------*/

def toToIndexedList(stringArray) {
   var list = [];
   var fn = fun[list](string s) {
      list.push_back(s);
   };
   forEachString(stringArray, fn);
   return list;
}

def createSelectQuery(columns, table, whereColumn, like) {
   return "SELECT ".append(columns).append(" FROM ").append(table).append(" WHERE ").append(whereColumn).append(" LIKE '").append(like).append("'");
}

def createDeleteQuery(table, whereColumn, like) {
   return "DELETE FROM ".append(table).append(" WHERE ").append(whereColumn).append(" LIKE '").append(like).append("'");
}

def fetchSingleDBValue(query, fn) {
   excuteDBQuery(query, fun[fn](success, values) {
      if (success) {
         var data = toToIndexedList(values);
         if (data.size() == 1) {
            fn(true, data[0]);
         } else {
            fn(false, "");
         }
      } else {
         fn(false, "");
      }
   });
}

def excuteBooleanDBQuery(query, fn) {
   excuteDBQuery(query, fun[fn](success, values) {
      fn(success);
   });
}

def deleteResultData(string url) {
   var opResult = false;
   fetchSingleDBValue(createSelectQuery("fpath", "Results", "url", url), fun[opResult, url](success, path) {
      if (success) {
         if (deleteFile(path)) {
            excuteBooleanDBQuery(createDeleteQuery("Results", "url", url), fun[](success) {});
            excuteBooleanDBQuery(createDeleteQuery("GenderWisePerformance", "url", url), fun[](success) {});
            excuteBooleanDBQuery(createDeleteQuery("SubjectsPerformance", "url", url), fun[](success) {});
            opResult = true;
         }
      }
   });
   return opResult;
}

def deleteAllResultsData() {
   excuteDBQuery("SELECT url FROM Results", fun[](success, values) {
      if (success) {
         forEachString(values, fun[](value) {
            deleteResultData(value);
         });
      }
   });
}

def deletePageData(table) {
   excuteDBQuery("SELECT fpath FROM ".append(table), fun[table](success, values) {
      if (success) {
         forEachString(values, fun[table](path) {
            if (deleteFile(path)) {
               excuteBooleanDBQuery(createDeleteQuery(table, "fpath", path), fun[](success) {});
            }
         });
      }
   });
}

def deleteAllPageData() {
   deletePageData(getAppPackageName().contains("saba", false) ? "PSLE" : "SFNA");
   deletePageData("Regions");
   deletePageData("Districts");
}

def deleteAllImages() {
   forEachString(getFiles(getAppRootPath()), fun[](file) {
      if (file.endsWith(".gif", false) || file.endsWith(".png", false) || file.endsWith(".jpg", false) || file.endsWith(".jpeg", false)) {
         var path = generateAppRootFilePath(file);
         deleteFile(path);
      }
   });
}

def resetMyFavoriteLoadingIndicator()
{
  saveOrUpdateData("MyFavoriteLoadingIndicatorSetForFirstTime","");
  setMyFavoriteLoadingIndicator();
}

def doSystemReset() {
try {
      deleteAllPageData();
      deleteAllResultsData();
      deleteAllImages();
      downloadMenu(getGithubMenuURL());
      resetMyFavoriteLoadingIndicator();  
   } catch {}
   saveOrUpdateData("MyFavoriteLoadingIndicatorSetForFirstTime", "");
   saveOrUpdateData("HolidayLoadingIndicatorSetForFirstTime", "");
   hideLoadingIndicator();
   quit();
}

global SYSTEM_RESET_DIALOG_REQUEST_CODE = 20240108;

def onShowSystemResetDialogCommand(cmd, argv, argc) {
   if (cmd.equals("showSystemResetDialog", false) || cmd.equals("reset", false) || cmd.equals("rekebisha", false)) {
      showCustomDialogAfterXMillis(SYSTEM_RESET_DIALOG_REQUEST_CODE, "fa::cogs", "MABORESHO YA MFUMO", "Rudisha mfumo katika hali ya mwanzo.", "Sawa", "Hapana", "#", 0.8, 0.2, false, 500);
   }
}

def onSystemResetDialogClosed(int requestCode, string pressedButton, string answer) {
   if (requestCode == SYSTEM_RESET_DIALOG_REQUEST_CODE) {
      if (pressedButton == "yes") {
         showLoadingIndicator();
         doSystemReset();
         hideLoadingIndicator();
         requestMenuPage();
         showToastMessage("Imefanikiwa");
      }
   }
}

/*---------------------------------*/
def setHolidayLoadingIndicator() {
   var key = "HolidayLoadingIndicatorSetForFirstTime";
   var r = getData(key);
   if (r.isEmpty()) {
      saveOrUpdateData(key, "1");
      setLoadingImage(loadingIndicatorsBaseURL + "loader6.gif");
   }
}
//----------NECTA INFO--------

def getNectaInfo() { return "";
   var pageUrl = "https://necta.go.tz/"
   return stripTag(html_tag("marquee").firstStringMatch(get(pageUrl), 0), "marquee").trim();
}

def showNectaInfo(string info) {
   if (info.isEmpty()) {
      info = "HAKUNA TAARIFA YEYOTE ILIYOTOLEWA";
   }
   info = "<font color='cyan'>".append(info).append("</font>");
   requestCustomDialog(411, "fa::bullhorn", "<br> <font color='yellow'>TAARIFA KUTOKA NECTA</font>", info, "sawa", "", "#", 0.98, 0.5, false);
}

def showNectaInfoOrLifeQuote() {
   var info = getNectaInfo();
   if (!info.isEmpty()) {
      showNectaInfo(info);
   } else {
      showLifeQuote();
   }
}

def onShowNectaInfoCommand(cmd, argv, argc) {
   if (cmd.equals("showNectaInfo", false)) {
      showLoadingIndicator();
      showNectaInfo(getNectaInfo());
      hideLoadingIndicator();
   }
}
//------------------ 

global _clickCountImageDialog = 0;
def showImageDialogAfterXClicks(int clicks, string imageUrl,string redirectURL,double percentWidth,double percentHeight,bool showCloseButton,double showCloseButtonAfterXMills)
{
     ++_clickCountImageDialog; 
	 if(_clickCountImageDialog > clicks){
	    _clickCountImageDialog = 1;
		return;
	 }
	 if(_clickCountImageDialog == clicks){ 
	    var cachedImage = getOfflineImagePath(imageUrl);
		if(cachedImage.isEmpty()){
		   saveImageForOffline(imageUrl);
		}
	    showImageDialog(cachedImage.isEmpty() ? imageUrl : cachedImage,redirectURL,percentWidth,percentHeight,showCloseButton,showCloseButtonAfterXMills);
	 }	
}

//------------------ 
//------------------
def onShowMamboDialogCommand(cmd, argv, argc) {
   if (cmd.equals("mambo", false)) {
      requestCustomDialog(411, "", "", "Mambo?", "Poa", "", "#", 0.4, 0.2, false);
   }
}

//------------------
//------------------

def beforeHtmlJunkRemover(string html) {


}

def confirmHtmlJunkRemoval(string info) {
   if (info.contains("PREM", false)) {
      return false;
   } else {
      return true;
   }
}

def removeOpenTag(string output, string start, string end) {
   var firstIndex = output.indexOf(start, 0, false);
   if (firstIndex != -1) {
      var lastIndex = output.indexOf(end, firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         return output.removeAtPosition(firstIndex, len);
      }
   }
   return output;
}


def fixFor2018ResultsAndBelow(string html) {
   var output = html;
   var tr = output.getTag("tr", 0);
   if (tr.valid) {
      var td = tr.value.getTag("td", 0);
      if (td.valid) {
         if (td.value.contains("WALIOSAJILIWA", false)) {
            var index = output.indexOf("</td></tr>", tr.index, false);
            if (index != -1) {
               output = output.replaceAtPosition(tr.index, index + 10 - tr.index, "<tr>" + td.value + "</tr>");
            }
         }
      }
   }
   return output;
}

def removeGradeTrFor2018ResultsAndBelow(string html) {
   var output = html;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false) ||
            text.contains("MWANAFUNZI", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         } else {
            break;
         }
      } else {
         break;
      }
   }
   return output;
}

def runMoreOlderResultFix(string html) {
   var output = html;
   //Fix summary
   var i1 = output.indexOf("</H3>", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("<CANDIDATES>", 0, false);
      if (i2 != -1) {
         var start = i1 + 5;
         var len = i2 - start;
         var summary = output.mid(start, len);
         var isSummary = summary.contains("WALIOSAJILIWA", false);
         if (isSummary) {
            output = output.replaceAtPosition(start, len, "<SUMMARY>" + summary + "</SUMMARY>");
         }
      }
   }
   //Remove header tr
   var headerTag = output.getTag("tr", 0);
   if (headerTag.valid) {
      if (headerTag.value.contains("CAND.", false)) {
         output = output.removeAtPosition(headerTag.index, headerTag.length);
      }
   }
   return output;
}

def isSFNAPage(string html) {
   return html.contains("reg_", false) && html.contains("<REGIONS>", false);
}

def isRegionPage(string html) {
   return html.contains("distr_", false) && html.contains("<DISTRICTS>", false);
}

def isDistrictPage(string html) {
   return html.contains(".htm", false) && html.contains("<SCHOOLS>", false);
}

def cleanSFNAPage(string html) {
   var output = html;
   if (isSFNAPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("reg_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("reg_.htm", false)) {
      output = cleanSFNAPage(output);
   }
   return output;
}


def cleanRegionPage(string html) {
   var output = html;
   if (isRegionPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("distr_.htm", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("distr_.htm", false)) {
      output = cleanRegionPage(output);
   }
   return output;
}

def cleanDistrictPage(string html) {
   var output = html;
   if (isDistrictPage(output)) {
      var pos = 0;
      var tag = output.getTag("td", pos);
      while (tag.valid) {
         if (tag.value.contains("\".htm\"", false)) {
            output = output.removeAtPosition(tag.index, tag.length);
         }
         pos = tag.index + tag.length;
         tag = output.getTag("td", pos);
      }
   }
   if (output.contains("\".htm\"", false)) {
      output = cleanDistrictPage(output);
   }
   return output;
}

//  Add filter logic inside this function
def filterHtml(string html) {
   var output = html;
   var year = 0;
   var titleTag = output.getTag("H1", 0);
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      currentResultYear = year;
   }


   if (year >= 2022) {
      return filterHtmlForYear2022AndAbove(output);
   }

   //Remove open table tag
   output = removeOpenTag(output, "<table", ">");
   output = removeOpenTag(output, "<font", ">");
   output = fixFor2018ResultsAndBelow(output);

   var summaryTag = Tag(false, -1, -1, "");

   //remove all unwanted tr tags
   while (true) {
      var tag = output.getTag("tr", 0);
      var tr = tag.value;

      if ((!tr.contains("KISWAHILI", false)) && (tr.contains("JINSI", false) ||
            tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false) ||
            tr.contains("WALIOSAJILIWA", false) ||
            tr.contains("GREDI", false))) {
         if (tr.contains("WALIOSAJILIWA", false)) {
            summaryTag = tag;
         }
         output = output.removeAtPosition(tag.index, tag.length);
         if (tr.contains("MASOMO", false)) { //the last unwanted tr
            break;
         }
      } else {
         break;
      } 
   }

   if (summaryTag.valid) {
      var summary = removeOpenTag(summaryTag.value, "<td", ">");
      summary = summary.remove("</td>", false)
      summary = summary.replace("<tr>", "<SUMMARY>", false)
      summary = summary.replace("</tr>", " </SUMMARY>", false)
      summary = summary.append("<CANDIDATES>");
      output = output.replace("<CANDIDATES>", summary, false);
   }

   //Fix year 2016 results
   if (year == 2016) {
      output = runMoreOlderResultFix(html);
   }

   //Remove all , in candidate tags that may cause modifyCandidateDetails to fail
   var candidateTag = output.getTag("CANDIDATES", 0);
   if (candidateTag.valid) {
      var cleaned = candidateTag.value.remove(",", false);
      output = output.replaceAtPosition(candidateTag.index, candidateTag.length, cleaned);
   }

   output = modifyCandidateDetails("CANDIDATES", output, "Kiswahili", "Hisabati", "English");

   output = output.replace("&", "AND", false);

   output = removeGradeTrFor2018ResultsAndBelow(output);

   output = cleanSFNAPage(output);
   output = cleanRegionPage(output);
   output = cleanDistrictPage(output);


   return output;
}

def removeAllTags(string tag, string html) {
   var output = html;
   var open = "<".append(tag);
   var close = "</".append(tag).append(">");
   var i = output.indexOf(open, 0, false);
   while (i != -1) {
      output = removeOpenTag(output, open, ">");
      output = output.remove(close, false);
      i = output.indexOf(open, 0, false);
   }
   return output;
}

def separateGradeSectionInSummary(string input) {
   var output = input;
   var i1 = input.indexOf("DARAJA", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf(")", i1, false);
      if (i2 != -1) {
         var gradeStr = input.mid(i1, i2 - i1 + 1);
         var i3 = gradeStr.indexOf("(", 0, false);
         if (i3 != -1) {
            var valid = (gradeStr.left(i3).remove("DARAJA", false).simplified().length() == 1);
            if (valid) {
               var tmp = gradeStr;
               tmp = tmp.replace("DARAJA", ", DARAJA :", false);
               output = output.replace(gradeStr, tmp, false);
            }

         }
      }
   }
   return output;
}


def getSummary(string html) {
   var i1 = html.indexOf("WALIOFANYA", 0, false);
   if (i1 != -1) {
      var i2 = html.indexOf("</td>", i1 + 1, false);
      if (i2 == -1) {
         i2 = html.indexOf("</tr>", i1 + 1, false);
      }
      if (i2 == -1) {
         i2 = html.indexOf("<tr>", i1 + 1, false);
      }
      if (i2 == -1) {
         i2 = html.indexOf("<td>", i1 + 1, false);
      }
      if (i2 != -1) {
         var summary = html.mid(i1, i2 - i1).remove("<td>", false).remove("</td>", false);
         summary = summary.remove("<tr>", false).remove("</tr>", false).simplified();
         summary = separateGradeSectionInSummary(summary);
         return summary;
      }
   }
   return "";
}

//------------------

def getUserCountryName() {
   var name = get("https://get.geojs.io/v1/ip/country/full");
   if (name.isEmpty()) {
      name = getData("CountryName");
   } else {
      saveOrUpdateData("CountryName", name);
   }
   return name;
}

def getUserCountryCode() {
   var code = get("https://get.geojs.io/v1/ip/country");
   if (code.isEmpty()) {
      code = getData("CountryCode");
   } else {
      saveOrUpdateData("CountryCode", code);
   }
   return code;
}

def getFlag(string code) {
   if (code.equals("AD", false)) {
      return "🇦🇩";
   }
   if (code.equals("AE", false)) {
      return "🇦🇪";
   }
   if (code.equals("AF", false)) {
      return "🇦🇫";
   }
   if (code.equals("AG", false)) {
      return "🇦🇬";
   }
   if (code.equals("AI", false)) {
      return "🇦🇮";
   }
   if (code.equals("AL", false)) {
      return "🇦🇱";
   }
   if (code.equals("AM", false)) {
      return "🇦🇲";
   }
   if (code.equals("AO", false)) {
      return "🇦🇴";
   }
   if (code.equals("AQ", false)) {
      return "🇦🇶";
   }
   if (code.equals("AR", false)) {
      return "🇦🇷";
   }
   if (code.equals("AS", false)) {
      return "🇦🇸";
   }
   if (code.equals("AT", false)) {
      return "🇦🇹";
   }
   if (code.equals("AU", false)) {
      return "🇦🇺";
   }
   if (code.equals("AW", false)) {
      return "🇦🇼";
   }
   if (code.equals("AX", false)) {
      return "🇦🇽";
   }
   if (code.equals("AZ", false)) {
      return "🇦🇿";
   }
   if (code.equals("BA", false)) {
      return "🇧🇦";
   }
   if (code.equals("BB", false)) {
      return "🇧🇧";
   }
   if (code.equals("BD", false)) {
      return "🇧🇩";
   }
   if (code.equals("BE", false)) {
      return "🇧🇪";
   }
   if (code.equals("BF", false)) {
      return "🇧🇫";
   }
   if (code.equals("BG", false)) {
      return "🇧🇬";
   }
   if (code.equals("BH", false)) {
      return "🇧🇭";
   }
   if (code.equals("BI", false)) {
      return "🇧🇮";
   }
   if (code.equals("BJ", false)) {
      return "🇧🇯";
   }
   if (code.equals("BL", false)) {
      return "🇧🇱";
   }
   if (code.equals("BM", false)) {
      return "🇧🇲";
   }
   if (code.equals("BN", false)) {
      return "🇧🇳";
   }
   if (code.equals("BO", false)) {
      return "🇧🇴";
   }
   if (code.equals("BQ", false)) {
      return "🇧🇶";
   }
   if (code.equals("BR", false)) {
      return "🇧🇷";
   }
   if (code.equals("BS", false)) {
      return "🇧🇸";
   }
   if (code.equals("BT", false)) {
      return "🇧🇹";
   }
   if (code.equals("BV", false)) {
      return "🇧🇻";
   }
   if (code.equals("BW", false)) {
      return "🇧🇼";
   }
   if (code.equals("BY", false)) {
      return "🇧🇾";
   }
   if (code.equals("BZ", false)) {
      return "🇧🇿";
   }
   if (code.equals("CA", false)) {
      return "🇨🇦";
   }
   if (code.equals("CC", false)) {
      return "🇨🇨";
   }
   if (code.equals("CD", false)) {
      return "🇨🇩";
   }
   if (code.equals("CF", false)) {
      return "🇨🇫";
   }
   if (code.equals("CG", false)) {
      return "🇨🇬";
   }
   if (code.equals("CH", false)) {
      return "🇨🇭";
   }
   if (code.equals("CI", false)) {
      return "🇨🇮";
   }
   if (code.equals("CK", false)) {
      return "🇨🇰";
   }
   if (code.equals("CL", false)) {
      return "🇨🇱";
   }
   if (code.equals("CM", false)) {
      return "🇨🇲";
   }
   if (code.equals("CN", false)) {
      return "🇨🇳";
   }
   if (code.equals("CO", false)) {
      return "🇨🇴";
   }
   if (code.equals("CR", false)) {
      return "🇨🇷";
   }
   if (code.equals("CU", false)) {
      return "🇨🇺";
   }
   if (code.equals("CV", false)) {
      return "🇨🇻";
   }
   if (code.equals("CW", false)) {
      return "🇨🇼";
   }
   if (code.equals("CX", false)) {
      return "🇨🇽";
   }
   if (code.equals("CY", false)) {
      return "🇨🇾";
   }
   if (code.equals("CZ", false)) {
      return "🇨🇿";
   }
   if (code.equals("DE", false)) {
      return "🇩🇪";
   }
   if (code.equals("DJ", false)) {
      return "🇩🇯";
   }
   if (code.equals("DK", false)) {
      return "🇩🇰";
   }
   if (code.equals("DM", false)) {
      return "🇩🇲";
   }
   if (code.equals("DO", false)) {
      return "🇩🇴";
   }
   if (code.equals("DZ", false)) {
      return "🇩🇿";
   }
   if (code.equals("EC", false)) {
      return "🇪🇨";
   }
   if (code.equals("EE", false)) {
      return "🇪🇪";
   }
   if (code.equals("EG", false)) {
      return "🇪🇬";
   }
   if (code.equals("EH", false)) {
      return "🇪🇭";
   }
   if (code.equals("ER", false)) {
      return "🇪🇷";
   }
   if (code.equals("ES", false)) {
      return "🇪🇸";
   }
   if (code.equals("ET", false)) {
      return "🇪🇹";
   }
   if (code.equals("FI", false)) {
      return "🇫🇮";
   }
   if (code.equals("FJ", false)) {
      return "🇫🇯";
   }
   if (code.equals("FK", false)) {
      return "🇫🇰";
   }
   if (code.equals("FM", false)) {
      return "🇫🇲";
   }
   if (code.equals("FO", false)) {
      return "🇫🇴";
   }
   if (code.equals("FR", false)) {
      return "🇫🇷";
   }
   if (code.equals("GA", false)) {
      return "🇬🇦";
   }
   if (code.equals("GB", false)) {
      return "🇬🇧";
   }
   if (code.equals("GD", false)) {
      return "🇬🇩";
   }
   if (code.equals("GE", false)) {
      return "🇬🇪";
   }
   if (code.equals("GF", false)) {
      return "🇬🇫";
   }
   if (code.equals("GG", false)) {
      return "🇬🇬";
   }
   if (code.equals("GH", false)) {
      return "🇬🇭";
   }
   if (code.equals("GI", false)) {
      return "🇬🇮";
   }
   if (code.equals("GL", false)) {
      return "🇬🇱";
   }
   if (code.equals("GM", false)) {
      return "🇬🇲";
   }
   if (code.equals("GN", false)) {
      return "🇬🇳";
   }
   if (code.equals("GP", false)) {
      return "🇬🇵";
   }
   if (code.equals("GQ", false)) {
      return "🇬🇶";
   }
   if (code.equals("GR", false)) {
      return "🇬🇷";
   }
   if (code.equals("GS", false)) {
      return "🇬🇸";
   }
   if (code.equals("GT", false)) {
      return "🇬🇹";
   }
   if (code.equals("GU", false)) {
      return "🇬🇺";
   }
   if (code.equals("GW", false)) {
      return "🇬🇼";
   }
   if (code.equals("GY", false)) {
      return "🇬🇾";
   }
   if (code.equals("HK", false)) {
      return "🇭🇰";
   }
   if (code.equals("HM", false)) {
      return "🇭🇲";
   }
   if (code.equals("HN", false)) {
      return "🇭🇳";
   }
   if (code.equals("HR", false)) {
      return "🇭🇷";
   }
   if (code.equals("HT", false)) {
      return "🇭🇹";
   }
   if (code.equals("HU", false)) {
      return "🇭🇺";
   }
   if (code.equals("ID", false)) {
      return "🇮🇩";
   }
   if (code.equals("IE", false)) {
      return "🇮🇪";
   }
   if (code.equals("IL", false)) {
      return "🇮🇱";
   }
   if (code.equals("IM", false)) {
      return "🇮🇲";
   }
   if (code.equals("IN", false)) {
      return "🇮🇳";
   }
   if (code.equals("IO", false)) {
      return "🇮🇴";
   }
   if (code.equals("IQ", false)) {
      return "🇮🇶";
   }
   if (code.equals("IR", false)) {
      return "🇮🇷";
   }
   if (code.equals("IS", false)) {
      return "🇮🇸";
   }
   if (code.equals("IT", false)) {
      return "🇮🇹";
   }
   if (code.equals("JE", false)) {
      return "🇯🇪";
   }
   if (code.equals("JM", false)) {
      return "🇯🇲";
   }
   if (code.equals("JO", false)) {
      return "🇯🇴";
   }
   if (code.equals("JP", false)) {
      return "🇯🇵";
   }
   if (code.equals("KE", false)) {
      return "🇰🇪";
   }
   if (code.equals("KG", false)) {
      return "🇰🇬";
   }
   if (code.equals("KH", false)) {
      return "🇰🇭";
   }
   if (code.equals("KI", false)) {
      return "🇰🇮";
   }
   if (code.equals("KM", false)) {
      return "🇰🇲";
   }
   if (code.equals("KN", false)) {
      return "🇰🇳";
   }
   if (code.equals("KP", false)) {
      return "🇰🇵";
   }
   if (code.equals("KR", false)) {
      return "🇰🇷";
   }
   if (code.equals("KW", false)) {
      return "🇰🇼";
   }
   if (code.equals("KY", false)) {
      return "🇰🇾";
   }
   if (code.equals("KZ", false)) {
      return "🇰🇿";
   }
   if (code.equals("LA", false)) {
      return "🇱🇦";
   }
   if (code.equals("LB", false)) {
      return "🇱🇧";
   }
   if (code.equals("LC", false)) {
      return "🇱🇨";
   }
   if (code.equals("LI", false)) {
      return "🇱🇮";
   }
   if (code.equals("LK", false)) {
      return "🇱🇰";
   }
   if (code.equals("LR", false)) {
      return "🇱🇷";
   }
   if (code.equals("LS", false)) {
      return "🇱🇸";
   }
   if (code.equals("LT", false)) {
      return "🇱🇹";
   }
   if (code.equals("LU", false)) {
      return "🇱🇺";
   }
   if (code.equals("LV", false)) {
      return "🇱🇻";
   }
   if (code.equals("LY", false)) {
      return "🇱🇾";
   }
   if (code.equals("MA", false)) {
      return "🇲🇦";
   }
   if (code.equals("MC", false)) {
      return "🇲🇨";
   }
   if (code.equals("MD", false)) {
      return "🇲🇩";
   }
   if (code.equals("ME", false)) {
      return "🇲🇪";
   }
   if (code.equals("MF", false)) {
      return "🇲🇫";
   }
   if (code.equals("MG", false)) {
      return "🇲🇬";
   }
   if (code.equals("MH", false)) {
      return "🇲🇭";
   }
   if (code.equals("MK", false)) {
      return "🇲🇰";
   }
   if (code.equals("ML", false)) {
      return "🇲🇱";
   }
   if (code.equals("MM", false)) {
      return "🇲🇲";
   }
   if (code.equals("MN", false)) {
      return "🇲🇳";
   }
   if (code.equals("MO", false)) {
      return "🇲🇴";
   }
   if (code.equals("MP", false)) {
      return "🇲🇵";
   }
   if (code.equals("MQ", false)) {
      return "🇲🇶";
   }
   if (code.equals("MR", false)) {
      return "🇲🇷";
   }
   if (code.equals("MS", false)) {
      return "🇲🇸";
   }
   if (code.equals("MT", false)) {
      return "🇲🇹";
   }
   if (code.equals("MU", false)) {
      return "🇲🇺";
   }
   if (code.equals("MV", false)) {
      return "🇲🇻";
   }
   if (code.equals("MW", false)) {
      return "🇲🇼";
   }
   if (code.equals("MX", false)) {
      return "🇲🇽";
   }
   if (code.equals("MY", false)) {
      return "🇲🇾";
   }
   if (code.equals("MZ", false)) {
      return "🇲🇿";
   }
   if (code.equals("NA", false)) {
      return "🇳🇦";
   }
   if (code.equals("NC", false)) {
      return "🇳🇨";
   }
   if (code.equals("NE", false)) {
      return "🇳🇪";
   }
   if (code.equals("NF", false)) {
      return "🇳🇫";
   }
   if (code.equals("NG", false)) {
      return "🇳🇬";
   }
   if (code.equals("NI", false)) {
      return "🇳🇮";
   }
   if (code.equals("NL", false)) {
      return "🇳🇱";
   }
   if (code.equals("NO", false)) {
      return "🇳🇴";
   }
   if (code.equals("NP", false)) {
      return "🇳🇵";
   }
   if (code.equals("NR", false)) {
      return "🇳🇷";
   }
   if (code.equals("NU", false)) {
      return "🇳🇺";
   }
   if (code.equals("NZ", false)) {
      return "🇳🇿";
   }
   if (code.equals("OM", false)) {
      return "🇴🇲";
   }
   if (code.equals("PA", false)) {
      return "🇵🇦";
   }
   if (code.equals("PE", false)) {
      return "🇵🇪";
   }
   if (code.equals("PF", false)) {
      return "🇵🇫";
   }
   if (code.equals("PG", false)) {
      return "🇵🇬";
   }
   if (code.equals("PH", false)) {
      return "🇵🇭";
   }
   if (code.equals("PK", false)) {
      return "🇵🇰";
   }
   if (code.equals("PL", false)) {
      return "🇵🇱";
   }
   if (code.equals("PM", false)) {
      return "🇵🇲";
   }
   if (code.equals("PN", false)) {
      return "🇵🇳";
   }
   if (code.equals("PR", false)) {
      return "🇵🇷";
   }
   if (code.equals("PS", false)) {
      return "🇵🇸";
   }
   if (code.equals("PT", false)) {
      return "🇵🇹";
   }
   if (code.equals("PW", false)) {
      return "🇵🇼";
   }
   if (code.equals("PY", false)) {
      return "🇵🇾";
   }
   if (code.equals("QA", false)) {
      return "🇶🇦";
   }
   if (code.equals("RE", false)) {
      return "🇷🇪";
   }
   if (code.equals("RO", false)) {
      return "🇷🇴";
   }
   if (code.equals("RS", false)) {
      return "🇷🇸";
   }
   if (code.equals("RU", false)) {
      return "🇷🇺";
   }
   if (code.equals("RW", false)) {
      return "🇷🇼";
   }
   if (code.equals("SA", false)) {
      return "🇸🇦";
   }
   if (code.equals("SB", false)) {
      return "🇸🇧";
   }
   if (code.equals("SC", false)) {
      return "🇸🇨";
   }
   if (code.equals("SD", false)) {
      return "🇸🇩";
   }
   if (code.equals("SE", false)) {
      return "🇸🇪";
   }
   if (code.equals("SG", false)) {
      return "🇸🇬";
   }
   if (code.equals("SH", false)) {
      return "🇸🇭";
   }
   if (code.equals("SI", false)) {
      return "🇸🇮";
   }
   if (code.equals("SJ", false)) {
      return "🇸🇯";
   }
   if (code.equals("SK", false)) {
      return "🇸🇰";
   }
   if (code.equals("SL", false)) {
      return "🇸🇱";
   }
   if (code.equals("SM", false)) {
      return "🇸🇲";
   }
   if (code.equals("SN", false)) {
      return "🇸🇳";
   }
   if (code.equals("SO", false)) {
      return "🇸🇴";
   }
   if (code.equals("SR", false)) {
      return "🇸🇷";
   }
   if (code.equals("SS", false)) {
      return "🇸🇸";
   }
   if (code.equals("ST", false)) {
      return "🇸🇹";
   }
   if (code.equals("SV", false)) {
      return "🇸🇻";
   }
   if (code.equals("SX", false)) {
      return "🇸🇽";
   }
   if (code.equals("SY", false)) {
      return "🇸🇾";
   }
   if (code.equals("SZ", false)) {
      return "🇸🇿";
   }
   if (code.equals("TC", false)) {
      return "🇹🇨";
   }
   if (code.equals("TD", false)) {
      return "🇹🇩";
   }
   if (code.equals("TF", false)) {
      return "🇹🇫";
   }
   if (code.equals("TG", false)) {
      return "🇹🇬";
   }
   if (code.equals("TH", false)) {
      return "🇹🇭";
   }
   if (code.equals("TJ", false)) {
      return "🇹🇯";
   }
   if (code.equals("TK", false)) {
      return "🇹🇰";
   }
   if (code.equals("TL", false)) {
      return "🇹🇱";
   }
   if (code.equals("TM", false)) {
      return "🇹🇲";
   }
   if (code.equals("TN", false)) {
      return "🇹🇳";
   }
   if (code.equals("TO", false)) {
      return "🇹🇴";
   }
   if (code.equals("TR", false)) {
      return "🇹🇷";
   }
   if (code.equals("TT", false)) {
      return "🇹🇹";
   }
   if (code.equals("TV", false)) {
      return "🇹🇻";
   }
   if (code.equals("TW", false)) {
      return "🇹🇼";
   }
   if (code.equals("TZ", false)) {
      return "🇹🇿";
   }
   if (code.equals("UA", false)) {
      return "🇺🇦";
   }
   if (code.equals("UG", false)) {
      return "🇺🇬";
   }
   if (code.equals("UM", false)) {
      return "🇺🇲";
   }
   if (code.equals("US", false)) {
      return "🇺🇸";
   }
   if (code.equals("UY", false)) {
      return "🇺🇾";
   }
   if (code.equals("UZ", false)) {
      return "🇺🇿";
   }
   if (code.equals("VA", false)) {
      return "🇻🇦";
   }
   if (code.equals("VC", false)) {
      return "🇻🇨";
   }
   if (code.equals("VE", false)) {
      return "🇻🇪";
   }
   if (code.equals("VG", false)) {
      return "🇻🇬";
   }
   if (code.equals("VI", false)) {
      return "🇻🇮";
   }
   if (code.equals("VN", false)) {
      return "🇻🇳";
   }
   if (code.equals("VU", false)) {
      return "🇻🇺";
   }
   if (code.equals("WF", false)) {
      return "🇼🇫";
   }
   if (code.equals("WS", false)) {
      return "🇼🇸";
   }
   if (code.equals("XK", false)) {
      return "🇽🇰";
   }
   if (code.equals("YE", false)) {
      return "🇾🇪";
   }
   if (code.equals("YT", false)) {
      return "🇾🇹";
   }
   if (code.equals("ZA", false)) {
      return "🇿🇦";
   }
   if (code.equals("ZM", false)) {
      return "🇿🇲";
   }
   return "🏳";
}

def getUserFlag() {
   return getFlag(getUserCountryCode());
}

//----------------
//----------HollydayAds--------------
global ENABLE_HOLLYDAY_AD = false;
global HOLLYDAY_IMG_1 = "newChangia1.png";
global HOLLYDAY_IMG_2 = "newChangia2.png";

def getHollydayAdFlag(){
   var flag = getData("HollydayAdFlag");
   return flag.isEmpty() ? 0 : to_int(flag);
}

def onShowHolidayAdCommand(cmd, argv, argc) {
   if(!ENABLE_HOLLYDAY_AD){
    return;
   }
   if (cmd.equals("donateMoney", false) || cmd.equals("changiaPesa", false)) {
       var flag = getHollydayAdFlag();
       saveOrUpdateData("HollydayAdFlag", flag == 0 ? "1" : "0");
	   requestMenuPage();
   }
}

def getMenuHolidayAd(string output){
  if(!ENABLE_HOLLYDAY_AD){
    return output;
  }
  var img = getHollydayAdFlag() == 0 ? HOLLYDAY_IMG_1 : HOLLYDAY_IMG_2  ;
  return putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/Ads/".append(img), "#donateMoney;", 1, 0.6, "bottom");
}

//------------------
//---------Credbo---------
global CREDBO_DIALOG_REQUEST_CODE = 12112023;
global CONTACT_CREDBO_DIALOG_REQUEST_CODE = 220231119;
global CREDBO_AD_URL = "https://raw.githubusercontent.com/magabe26/mgb/master/Ads/Credbo/Ad.txt";
global CREDBO_EMAIL = "contact@credbo.com";
global CREDBO_PHONE = "+255 712 611 544";
global CREDBO_PHONE_OWNER = "WILFRED WILLIAM (Credbo Company Manager)";
global CREDBO_PHONE2 = "+255 786 670 537";

def getCredboAd(){
    var key = "CREDBO_AD";
    var ad = get(CREDBO_AD_URL);
	if(!ad.isEmpty()){
	   saveOrUpdateData(key,ad);
	}else{
	   ad = getData(key);
	}
	return ad;
}

def recordCustomerVisit(string method){
     if(method.equals("sms",false)){
	     get("https://iplogger.com/1XNea7.gif");
	 }else if(method.equals("tel",false)){
	     get("https://iplogger.com/1X2ra7.gif");
	 }else if(method.equals("email",false)){
	     get("https://iplogger.com/1X3ra7.gif");
	 }else if(method.equals("whatsapp",false)){
	     get("https://iplogger.com/1X4ra7.gif");
	 }else if(method.equals("website",false)){
	     get("https://iplogger.com/1X5ra7.gif");
	 }else if(method.equals("dialog",false)){
	    get("https://iplogger.com/1X7ra7.gif");
	 }
}

def getCredboContactDetails() {
	return "Website:<font color='#58ACFA'> https://credbo.com</font> <br>Email:<font color='#40FF00'> contact@credbo.com</font> <br>Mobile(s):<font color='cyan'>" + CREDBO_PHONE + " / " + CREDBO_PHONE2 + " </font><br>P.O BOX <font color='white'>10167 Mwanza, Tanzania.</font>";
}

def getCredboInfo(){
   return "Empowering Your Success Across Materials, Branding, Bulk SMS, Domain & Hosting, and Software Development.<br>Credbo Company Limited , Your One-Stop Solution for Excellence.";
}

def onContactCredboCommand(cmd, argv, argc) {
   if (cmd.equals("contactCredbo", false)) {
        if (argc >= 1) {
         var url = argv[0];
		 var i = url.indexOf(":",0,false);
		 if(i != -1){
		  openPage(url);
		  var method = url.left(i).trim();
		  recordCustomerVisit(method);
		  return;
		 }
       }
	   var ad = getCredboAd();
	   var height = 0.92;
	   if(ad.isEmpty()){
	      height = 0.4;
		  ad = getCredboInfo() + "<br><br>" + getCredboContactDetails();
	   }
	   showCustomDialogAfterXMillis(CONTACT_CREDBO_DIALOG_REQUEST_CODE, "fa::star", "Credbo Company Limited", ad, "<font color='#40FF00'>WhatsApp Us</font>", "<font color='white'>Call Us</font>", "#", 0.98, height, false, 600);
   }
}

def onContactCredboDialogClosed(int requestCode, string pressedButton, string answer) {
   if (requestCode == CONTACT_CREDBO_DIALOG_REQUEST_CODE) {
      if (pressedButton == "yes") {
	      onUrlVisited("#contactCredbo;https://wa.me/" + CREDBO_PHONE);
		  showToastMessage("WhatsApp : " + CREDBO_PHONE + "\n"+ CREDBO_PHONE_OWNER);
      } else {
	      onUrlVisited("#contactCredbo;tel:/" + CREDBO_PHONE);
          showToastMessage("Call : " + CREDBO_PHONE + "\n"+ CREDBO_PHONE_OWNER);
      }
   }
}

def onShowCredboAdCommand(cmd, argv, argc) {
   if (cmd.equals("showCredboAd", false)) {
        var ad = getCredboAd();
		if(ad.isEmpty()){
		   openPage("sms:/".append(CREDBO_PHONE));
		   recordCustomerVisit("sms");
		}else{
		   requestCustomDialog(CREDBO_DIALOG_REQUEST_CODE, "fa::star", "Credbo Company Limited", ad, "<font color='white'>Call Us</font>", "Close", "#", 0.98, 0.85, false);
		   recordCustomerVisit("dialog");
		}
   }
}

def onCredboAdDialogClosed(int requestCode, string pressedButton, string answer) {
   if (requestCode == CREDBO_DIALOG_REQUEST_CODE) {
      if (pressedButton == "yes") {
	      onUrlVisited("#contactCredbo;tel:/" + CREDBO_PHONE);
		  showToastMessage("Call : " + CREDBO_PHONE + "\n"+ CREDBO_PHONE_OWNER);
      } 
   }
}

//------------------
def filterHtmlForYear2022AndAbove(string html) {
   var output = html;
   /* A fast and advanced  method */
   output = output.remove("MADARAJA YA UFAULU WA UJUMLA", false);

   //remove open table tag
   output = removeOpenTag(output, "<table", ">");
   output = removeOpenTag(output, "<font", ">");

   output = removeAllTags("tag", output);
   output = removeAllTags("span", output);


   var summary = getSummary(output);
   if (!summary.isEmpty()) {
      //Append  summary
      var i1 = output.indexOf("</H3>", 0, false);
      var i2 = output.indexOf("<CANDIDATES>", 0, false);
      if (i2 != -1) {
         var start = i1 + 5;
         var len = i2 - start;
         output = output.replaceAtPosition(start, len, "<SUMMARY>" + summary + "</SUMMARY>");

      }
   }

   //remove all unwanted tr tags
   while (true) {
      var tag = output.getTag("tr", 0);
      var tr = tag.value;
      var isResultsTableHeader = tr.contains("SEX", false);
      if ((!tr.contains("KISWAHILI", false)) && (tr.contains("JINSI", false) ||
            tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false) ||
            isResultsTableHeader)) {
         output = output.removeAtPosition(tag.index, tag.length);
      } else {
         break;
      }
   }

   output = output.remove("</td></tr>", false);
   output = output.remove("&nbsp;", false); //WARNING: THIS SPACE CHARACTER IS REMOVED WHEN BY FORMATING TOOLS, REMEMBER TO REPLACE
   output = output.replace("AVERAGE GRADE -", "</td><td>", false);
   output = output.replace("AVERAGE GRADE", "</td><td>", false);
   output = output.replace("</tr>", "</td></tr>", false);

   //futa summary ya masomo
   var i1 = output.indexOf("<td >UFAULU", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("</CANDIDATES>", 0, false);
      if (i2 != -1) {
         output = output.removeAtPosition(i1, i2 - i1);
         output = output.replace("<tr></CANDIDATES>", "</CANDIDATES>", false);
      }
   }

   //short fix subject scores
   output = output.replace("- A", "- A;", false).replace("- B", "- B;", false).replace("- C", "- C;", false).replace("- D", "- D;", false).replace("- E", "- E;", false).replace("- F", "- F;", false);

   output = output.replace("&", "AND", false);

   return output;
}


def getTdNodeTagNameForResults(int tdIndex, int tdCount, string tagText) {
  //var name = getCandidateItemTag(tagText);
   //if (!name.isEmpty()) {
   //   return name;
   //}


   if (tdCount == 6) {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return "PREM_NO";
         }
         case (2) {
            return "SEX";
         }
         case (3) {
            return "CANDIDATE_NAME";
         }
         case (4) {
            return "DETAILED_SUBJECTS";
         }
         case (5) {
            return "AVERAGE";
         }
      }

   } else {
      switch (tdIndex) {
         case (0) {
            return "CNO";
         }
         case (1) {
            return tagText.simplified().length() == 1 ? "SEX" : "PREM_NO";
         }
         case (2) {
            return tagText.simplified().length() == 1 ? "SEX" : "CANDIDATE_NAME";
         }
         case (3) {
            return tagText.contains("Kiswahili", false) || tagText.contains("English", false) ? "DETAILED_SUBJECTS" : "CANDIDATE_NAME";
         }
         case (4) {
            return tagText.simplified().length() == 1 ? "AVERAGE" : "";
         }
      }

   }

   return "";
}


/*
 Stating from 2024,  the only use this in updateMenu function ,to update menu from website
*/
def addResultLinksToMenuFromNectaPage(string menu, string url) {
   if(url.isEmpty()){
     return menu;
   }
   var html = get(url);
   if(html.isEmpty()){
     return menu;
   }
   var output = menu;
   var end = stR(".htm", false);
   stR("http", false).seq(any(end, "<>").plus()).seq(end).replaceInMapped(html, fun[output](string link) {
	  var year = getYear("", link);
      if (year != 0) {
         var name = to_string(year);
         if (!output.contains(name, false)) {
            output = addLinkToMenuXML(name, link, output);
         }
      }
      return link;
   }, 0, -1);
  
   return output;
}

def updateMenu(string menu) {
   return menu;
}

def formatGender(string input) {
   var json = input;
   if (!json.contains("WASICHANA", false)) {
      json = json.replace("WAS", "WASICHANA", false);
   }
   if (!json.contains("WAVULANA", false)) {
      json = json.replace("WAV", "WAVULANA", false);
   }
   return json;
}

def getGenderWisePerformanceDataFor2018ResultsAndBelow(string html) {
   var output = html;
   var titleTag = output.getTag("H1", 0);
   var year = 0;
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      if (year > 2018) {
         return "";
      }
   } else {
      return "";
   }

   var json = year != 2016 ? "[{\"_0\":\"GREDI\",\"_1\":\"WAS\",\"_2\":\"WAV\",\"_3\":\"JUMLA\"}," : "[";
   var index = 0;
   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("WALIOSAJILIWA", false) ||
         tr.contains("GREDI", false) ||
         tr.contains("WAS.", false)) {
         output = output.removeAtPosition(tag.index, tag.length);
         continue;
      }
      var tdTag = tr.getTag("td", 0);
      if (tdTag.valid) {
         var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
         if (text == "A" || text == "a" ||
            text == "B" || text == "b" ||
            text == "C" || text == "c" ||
            text == "D" || text == "d" ||
            text.contains("REFERRED", false)) {
            var index = 0;
            var item = "{";
            while (true) {
               var tdTag = tr.getTag("td", 0);
               if (tdTag.valid) {
                  var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
                  item = item.append(",");
                  tr = tr.removeAtPosition(tdTag.index, tdTag.length);
                  index = index + 1;
               } else {
                  break;
               }
            }
            if (item.endsWith(",", true)) {
               item = item.mid(0, item.length() - 1);
            }
            item = item.append("}");
            var empty = (item.length() == 2);
            if (!empty) {
               json = json.append(item);
               json = json.append(",");
            }
            output = output.removeAtPosition(tag.index, tag.length);

         } else {
            break;
         }
      } else {
         break;
      }
   }
   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   //formart gender first 
   json = formatGender(json);
   //then do WASTANI
   json = json.replace("JINSI", "WASTANI", false);
  
   var empty = (json.length() == 68);
   if (empty) {
      json = "";
   }
   return json;
}


def getGenderWisePerformanceData(string html) {
   var output = html;
   var year = 0;
   var titleTag = output.getTag("H1", 0);
   if (titleTag.valid) {
      var title = titleTag.value;
      year = getYear(title, "");
      currentResultYear = year;
   }

   if (year <= 2016) {
      return "";
   }

   if (year >= 2022) {
      return getGenderWisePerformanceDataFor2022AndAbove(output);
   }

   var json = getGenderWisePerformanceDataFor2018ResultsAndBelow(output);

   if (!json.isEmpty()) {
      return json;
   } else {
      json = "[";
   }

   while (true) {
      var tag = output.getTag("tr", 0);
      if (!tag.valid) {
         break;
      }
      var tr = tag.value;
      if (tr.contains("GREDI", false) ||
         tr.contains("kati", false)) {
         output = output.removeAtPosition(tag.index, tag.length);
         continue;
      }

      if (tr.contains("MASOMO", false) ||
         tr.contains("English", false) ||
         tr.contains("Kiswahili", false) ||
         tr.contains("Hisabati", false) ||
         tr.contains("Sayansi", false)) {
         break;
      }
      if (tr.contains("REFERRED", false) ||
         tr.contains("WAS", false) ||
         tr.contains("WAV", false) ||
         tr.contains("JUMLA", false)) {
         var index = 0;
         var item = "{";
         while (true) {
            var tdTag = tr.getTag("td", 0);
            if (tdTag.valid) {
               var text = tdTag.value.removeOpenTag("td").removeCloseTag("td").trim();
               if (text == "A" || text == "a") {
                  item = item.append("\"_").append(to_string(index)).append("\":\"").append("JINSI").append("\"");
                  item = item.append(",");
                  index = index + 1;
               }
               item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
               item = item.append(",");

               tr = tr.removeAtPosition(tdTag.index, tdTag.length);
               index = index + 1;
            } else {
               break;
            }
         }
         if (item.endsWith(",", true)) {
            item = item.mid(0, item.length() - 1);
         }
         item = item.append("}");
         var empty = (item.length() == 2);
         if (!empty) {
            json = json.append(item);
            json = json.append(",");
         }
         output = output.removeAtPosition(tag.index, tag.length);

         if (tr.contains("JUMLA", false)) {
            break;
         }
      } else {
         break;
      }
   }

   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   //formart gender first 
   json = formatGender(json);
   //then do WASTANI
   json = json.replace("JINSI", "WASTANI", false);
  
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def getGenderWisePerformanceDataFor2022AndAbove(string html) {
   var output = html;

   var i1 = output.indexOf("<td>JINSI", 0, false);
   if (i1 != -1) {
      var i2 = output.indexOf("<td>CAND.", i1 + 1, false);
      if (i2 != -1) {
         output = "<tr>".append(output.mid(i1, i2 - i1));
      } else {
         return "";
      }
   } else {
      return "";
   }

   var json = "[";
   var trPos = 0;
   var trTag = output.getTag("tr", trPos);
   while (trTag.valid) {
      var tr = trTag.value;
      var item = "{";
      var tdPos = 0;
      var tdTag = tr.getTag("td", tdPos);
      var index = 0;
      while (tdTag.valid) {
         var td = tdTag.value;
         if (tr.contains("REFERRED", false) ||
            tr.contains("WAS", false) ||
            tr.contains("WAV", false) ||
            tr.contains("JUMLA", false)) {
            var text = td.removeOpenTag("td").removeCloseTag("td").trim();
            item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
            item = item.append(",");
         }
         index = index + 1;
         tdPos = tdTag.index + tdTag.length;
         tdTag = tr.getTag("td", tdPos);
      }
      if (item.endsWith(",", true)) {
         item = item.mid(0, item.length() - 1);
      }
      item = item.append("}");
      var empty = (item.length() == 2);
      if (!empty) {
         json = json.append(item);
         json = json.append(",");
      }
      trPos = trTag.index + trTag.length;
      trTag = output.getTag("tr", trPos);
   }


   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   //formart gender first 
   json = formatGender(json);
   //then do WASTANI
   json = json.replace("JINSI", "WASTANI", false);
  
   var empty = (json.length() == 2);
   if (empty) {
      json = "";
   }

   return json;
}

def getBaseUrlLastSegment(string url, string lastSegment){
    var html =  get(url);
	if(html.isEmpty()){
	  return lastSegment;
	}
	var href =stR("href",false).seq(any(stR(".htm",false),"").plus()).firstStringMatch(html,0).remove("href=",false).remove("\"",false).trim();
	if(href.isEmpty()){
	  return lastSegment;
	}
	var i = href.indexOf("/",0,false);
        if(i == -1){
	   i = href.indexOf("\\",0,false);
        }
	if(i != -1){
	  return href.left(i);
	}else{
	  return "";
	}
}

def verifyBaseUrlLastSegment(string url, string lastSegment) {
    return getBaseUrlLastSegment(url, lastSegment);           
}

def getNectaMenuUrl() {
   return "localhost/fakeURL";
}


def getAbsoluteLinks(string html) {
   var output = html.replace("'", "\"", false);
   var pos = 0;
   var links = [];
   var i1 = output.indexOf("http", pos, false);
   while (i1 != -1) {
      var i2 = output.indexOf("\"", i1, false);
      if (i2 != -1) {
         pos = i2;
         var link = output.mid(i1, i2 - i1);
         links.push_back(link);
      } else {
         pos = i1;
      }
      i1 = output.indexOf("http", pos, false);
   }
   return links;
}


def getResultAbsoluteLinks(string html) {
   var links = getAbsoluteLinks(html);
   var resultLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i].simplified();
      if (link.endsWith(".htm", false)) {
         resultLinks.push_back(link);
      }
   }
   return resultLinks;
}

def getNectaResultLinks(string html) {
   var links = getResultAbsoluteLinks(html);
   var menuLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i];
      var year = getYear("", link);
      if (year != 0) {
         var yearTag = "<year>".append(to_string(year)).append("</year>");
         var aTag = "<a HREF=\"".append(link).append("\"></a>");
         var linkTag = "<link>".append(yearTag).append(aTag).append("</link>");
         menuLinks.push_back(linkTag);
      }
   }
   return menuLinks;
}

//----------onSaveAndPlayVideoAd--------

def onSaveAndPlayVideoAdCommand(cmd, argv, argc) {
   if (cmd.equals("saveAndPlayVideoAd", false)) {

      showLoadingIndicator();

      if (argc >= 4) {
         var videoUrl = argv[0];
         if (!videoUrl.contains("/", false)) {
            showOperationFailedDialog("Invalid videoUrl");
            hideLoadingIndicator();
            return;
         }	 
		 
        var descriptionImageUrl = argv[1];
        var descriptionText = "<font color=\"cyan\"><b>" + argv[2] + "</b></font>";
        var descriptionBGColor = argv[3];
		
		saveOrUpdateData("previous_descriptionImageUrl", descriptionImageUrl);
		saveOrUpdateData("previous_descriptionText", descriptionText);
		saveOrUpdateData("previous_descriptionBGColor", descriptionBGColor);

         var path = getOfflineVideoPath(videoUrl);
         if (!path.isEmpty()) {
            hideLoadingIndicator();
			playVideoAd(path,descriptionImageUrl,descriptionText,descriptionBGColor);
			
            return;
         }

         var fileName = "";
         if (argc > 4) {
            fileName = argv[4];
         } else {
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = videoUrl.split("/");
            forEachString(arr, fn);

            fileName = list[list.size() - 1];
         }

         path = generateAppRootFilePath(fileName);
         if (saveFile(videoUrl, path)) {
            saveOrUpdateData(videoUrl, path);
            pasteToClipboard(path);
            hideLoadingIndicator();
			playVideoAd("file:" + path,descriptionImageUrl,descriptionText,descriptionBGColor);
         } else {
            hideLoadingIndicator();
            showOperationFailedDialog("<font color='red'> imeshindwa kutunza faili</font>");
         }
      }
      hideLoadingIndicator();
   }
}

def onShowGoogleAdCommand(cmd, argv, argc) {
   if (cmd.equals("showGoogleAd", false)) {
        showToastMessage("Tafadhali subiri, hakikisha umejiunga na huduma ya intaneti.")
        if (adsInitialized) {
            showOrLoadAd();
         } else {
            initializeAds();
         }
   }
}

//------------------


def onUrlVisited(string url) {
   if (url.startsWith("#", false)) {
      var cmd = "";
      var argv = [];
      var i = 0;
      var initVars = fun[i, cmd, argv](string s) {
         if (i == 0) {
            cmd = s.remove("#", false);
         }

         if (i > 0) {
            argv.push_back(s);
         }
         ++i;
      };

      var arr = url.split(";");
      forEachString(arr, initVars);

      onExecuteCommand(cmd, argv, argv.size());
   }

}

//-------------------------Apps---------------------------------

def openApp(qml){
  setFullScreen(true);
  showAppTitle(false);
  var url = "file:/" + generateAppRootFilePath(qml);
  requestCustomPage(url,"");
}

def downloadUtaliiApp()
{
  showToastMessage("Installing Utalii extension ...");
  
  showLoadingIndicator();
  
  var images = [
        "arusha_np.jpg",
		"mahale.jpg",
		"ngorongoro.jpg",
		"serengeti.jpg",
		"zanzibar_st.jpg",
        "gombe.jpg", 
        "manyara.jpg",
		"nyerere.jpg",   
		"tarangire.jpg",
        "katavi.jpg", 
        "meru.jpg", 
	    "olduvai.jpg", 
	    "udzungwa.jpg",
        "kilimanjaro.jpg",  
        "mikumi.jpg", 
        "pemba.jpg",   
        "usambara.jpg",
        "mafia_island.jpg", 
        "natron.jpg",  
        "ruaha.jpg",  
        "victoria.jpg"
  ];
  
  var downloadedImages = 0;
  for(var i = 0; i < images.size(); ++i){
      var img = images[i];
      var path = generateAppRootFilePath(img);
	  var url = "https://raw.githubusercontent.com/magabe26/mgb/refs/heads/master/tztourism/images/".append(img);
      if (saveFile(url, path)) {
        downloadedImages += 1;
		log("Utalii image saved: ".append(img));
      }else{
	    log("Filed to save utalii image:  ".append(img));
	  }
  }
  
  if(downloadedImages == images.size()){
      log("All Utalii image saved");
      var app = "tztourism.qml";
	  var path = generateAppRootFilePath(app);
	  var url = "https://raw.githubusercontent.com/magabe26/mgb/refs/heads/master/tztourism/".append(app);
      if (saveFile(url, path)) {
		log("Utalii app saved: ".append(app));
		saveOrUpdateData("UTALII_APP_SAVED","1");
		var flagName = "tzflag.gif";
		var flag = generateAppRootFilePath(flagName);
		if(!fileExists(flag)){
		   var flagUrl = "https://raw.githubusercontent.com/magabe26/mgb/refs/heads/master/".append(flagName);
		   saveFile(flagUrl, flag);
		   log("TZ Flag saved");
		}
		openApp(app);
		hideLoadingIndicator();
      }else{
	    log("Filed to save utalii app:  ".append(app));
		hideLoadingIndicator();
	  }
  }else{
    hideLoadingIndicator();
  }

}

def downloadOrOpenUtaliiApp()
{
  if(getData("UTALII_APP_SAVED").simplified() != "1"){
    downloadUtaliiApp();
  }else{
    if(hasInternetAccess()){
	  var app = "tztourism.qml";
	  var path = generateAppRootFilePath(app);
	  var url = "https://raw.githubusercontent.com/magabe26/mgb/refs/heads/master/tztourism/".append(app);
	  saveFile(url, path);
	}
    openApp("tztourism.qml");
  }
}

def onUtaliiAppCommand(cmd, argv, argc) {
   if (cmd.equals("UtaliiApp", false)) {
      downloadOrOpenUtaliiApp();
   }
}


//---------------------------------------------------------

//----------------------------------------

//argv is vector of strings whitch represents a list of command argurments
def onExecuteCommand(cmd, argv, argc) {
   onChangeLocaleCommand(cmd, argv, argc);
   onChangeFailureIdentifierCommand(cmd, argv, argc);
   onShowAdvertiseWithUsDialogCommand(cmd, argv, argc);
   onVisitMagabeLabCommand(cmd, argv, argc);
   onShowConsoleCommand(cmd, argv, argc);
   onPlayVideoCommand(cmd, argv, argc);
   onSaveFileCommand(cmd, argv, argc);
   onSaveAndPlayVideoCommand(cmd, argv, argc);
   onOfflineVideoCommand(cmd, argv, argc);
// onShowQuotesCommand(cmd, argv, argc);
onChangeLoadingIndictorCommand(cmd, argv, argc);
onAddPointsCommand(cmd, argv, argc);
onEmailUsCommand(cmd, argv, argc);
onOpenURLCommand(cmd, argv, argc);
//onContactCredboCommand(cmd, argv, argc);
   //onShowCredboAdCommand(cmd, argv, argc);
onShowSystemResetDialogCommand(cmd, argv, argc);
// onShowNectaInfoCommand(cmd, argv, argc);
onShowMamboDialogCommand(cmd, argv, argc);
onShowHolidayAdCommand(cmd, argv, argc);
onSaveAndPlayVideoAdCommand(cmd, argv, argc);
onShowGoogleAdCommand(cmd, argv, argc);
onUtaliiAppCommand(cmd, argv, argc);

}


def onShareViaSms(string phoneNumber, string resultsShared) {


}


def getUserAgentString() {
   return "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0";
}


def allowSchoolNameInSwahili() {
   return getLocale() == "en" ? false : true;
}


global LATEST_APP_VERSION_NAME = "1.7"; //Always change this this on every App release
global WIN64_DOWLOAD_URL = "https://www.mediafire.com/file/xxjoim0oeg9jrzl/Matokeo+La4+v1.3+WinX64+Installer.exe/file";
global DOWNLOAD_UPDATE_REQUESTCODE = 201;

def requestDownloadUpdateDialog(string description, string url) {
   requestCustomDialog(DOWNLOAD_UPDATE_REQUESTCODE, "fa::download", "Pakua toleo jipya!!", description, "Pakua", "Funga App", url, 0.8, 0.3, false);
}


def downloadUpdate() {
   try {

      var packageName = getAppPackageName();
      var message = "Toleo jipya la aplikesheni hii ambalo ni ".append(LATEST_APP_VERSION_NAME).append(" limeshatoka. Pakua sasa na pia usisahau ku-rate aplikesheni hii, Asante.");
      var os = getOperatingSystem();
      var url = (os == "android") ? packageNameToUrl(packageName) : WIN64_DOWLOAD_URL;
      var versionName = getVersionName(packageName);
      if (versionName != LATEST_APP_VERSION_NAME) {
         requestDownloadUpdateDialog(message, url);
      }else {
      //showNectaInfoOrLifeQuote();
}

   } catch {}

}

def playWelcomeVideo(string url){
    var path = getOfflineVideoPath(url);
    if (!path.isEmpty()) {
	playVideoAd(path,getData("previous_descriptionImageUrl"),getData("previous_descriptionText"),getData("previous_descriptionBGColor"));
     }else {

onUrlVisited("#saveAndPlayVideoAd;" + url);

}
}

global PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE = 32;
global FORM4_AND_6_PACKAGENAME = "com.magabelab.matokeo.kidato.cha4na6";

def onAppStarted() { 
   try {
   
     // setMyFavoriteLoadingIndicator();
      setHolidayLoadingIndicator();

      downloadUpdate();

      var vn = getVersionNameAsDouble();

      //save country code for later use
      getUserCountryCode();
	  
      if (vn < 1.3) {
         initializeAds();
      } else {
         if (canShowAds()) {
            initializeAds();
         } else {
            loadConsentForm();
         }
      }

 //playWelcomeVideo("https://raw.githubusercontent.com/magabe26/mgb/master/Ads/samia-bday.mp4;#;President Samia Suluhu Hassan;transparent");

   } catch {}

}


def onAppExited(int status) {


}

def onStudentResultsOpened(string name, string no, string schoolName, string average, string year, string results) {
enableAccessPointsGuardForStudentResult();
//showImageDialogAfterXClicks(3,githubFile("Ads/changia.png"),"#",1,0.68,true,3000);
}

/* info is in json format*/
def onCandidateResultsClicked(string info) {

}

global PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE = 89;

/* pressedButton = no or yes */
def onCustomDialogClosed(int requestCode, string pressedButton, string answer) {
   switch (requestCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa, nitakukumbusha baadae");
            setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 1.5); //wait 1.5 min
         }
         break;
      }

      case (DOWNLOAD_UPDATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri");
         } else {
            showToastMessage(" :( "); //show sad face             
         }
         
         var os = getOperatingSystem();
         if (os == "android") {
            quit();
         }

         break;
      }

      case (EMAIL_US_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("mailto:magabelab.tz@gmail.com");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }


      case (VISIT_MAGABE_LAB_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("https://magabelab-tz.web.app");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }

      case (SHOW_CONSOLE_REQUEST_CODE) {
         if (answer.isEmpty()) {
            return;
         }

         if (pressedButton == "yes") {
            var cmd = "";
            var argv = [];
            var i = 0;
            var initVars = fun[i, cmd, argv](string s) {
               if (i == 0) {
                  cmd = s.remove("#", false).simplified();
               }

               if (i > 0) {
                  argv.push_back(s);
               }
               ++i;
            };

            var arr = answer.split(";");
            forEachString(arr, initVars);

            onExecuteCommand(cmd, argv, argv.size());
         }
         break;
      }
      
      default {
onLifeQuoteDialogClosed(requestCode,pressedButton,answer);
onChangeLoadingIndictorDialogClosed(requestCode, pressedButton, answer);
onAccessPointsDialogClosed(requestCode, pressedButton, answer);
onContactCredboDialogClosed(requestCode, pressedButton, answer);
         onCredboAdDialogClosed(requestCode, pressedButton, answer);
onSystemResetDialogClosed(requestCode, pressedButton, answer);

         break;
      }
   }

}

def onTimeOut(int timerCode) {
   switch (timerCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE, "fa::download", "Matokeo kidato cha 4 na 6", "Angalia matokeo ya kidato cha 6 kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(FORM4_AND_6_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      case (SHOW_AD_TIMERCODE) {
         showOrLoadAd();
         break;
      }

      case (SAVE_IMAGE_FOR_OFFLINE_TIMERCODE) {
         if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
            return;
         }
         if (imagesToBeSaved.empty() || savedImageIndex >= imagesToBeSaved.size()) {
            break;
         }
         var img = imagesToBeSaved[savedImageIndex];
         ++savedImageIndex;

         if (!img.isEmpty() && getOfflineImagePath(img).isEmpty()) {
            var name = "";
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = img.split("/");
            forEachString(arr, fn);

            name = list[list.size() - 1];

            var path = generateAppRootFilePath(name);
            if (saveImage(img, path, -1)) {
               saveOrUpdateData(img, path);
               onImageSaved(img, path);
            }
         }
         break;
      }

      case (SHOW_CUSTOM_DIALOG_TIMERCODE) {
         var requestCode = to_int(getData("Custom_Dialog_Request_Code"));
         var icon = getData("Custom_Dialog_Icon");
         var title = decodeData(getData("Custom_Dialog_Request_Title"));
         var description = decodeData(getData("Custom_Dialog_Request_Description"));
         var yesButtonText = decodeData(getData("Custom_Dialog_Request_YesButtonText"));
         var noButtonText = decodeData(getData("Custom_Dialog_Request_NoButtonText"));
         var url = getData("Custom_Dialog_Request_Url");
         var percentWidth = to_double(getData("Custom_Dialog_Request_PercentWidth"));
         var percentHeight = to_double(getData("Custom_Dialog_Request_PercentHeight"));
         var showInputText = (to_int(getData("Custom_Dialog_Request_ShowInputText")) > 0);
         requestCustomDialog(requestCode, icon, title, description, yesButtonText, noButtonText, url, percentWidth, percentHeight, showInputText);
         break;
      }

      default { onShowLoadingIndicatorTimeOut(timerCode);
         break;
      }

   }

}

def onImageSaved(string url, string path) {
   log("Image saved: url = ".append(url).append(" , path = ").append(path));
   
   onLoadingImageSaved(url,path);
}

def getSubjectsPerformanceData(string html) {
   var input = removeAllTags("span", html);
   var i1 = input.indexOf("<td >UFAULU", 0, false);
   if (i1 != -1) {
      var i2 = input.indexOf("</CANDIDATES>", 0, false);
      if (i2 != -1) {
         input = input.mid(i1, i2 - i1);
      } else {
         return "";
      }
   } else {
      return "";
   }

   var json = "[";
   var trPos = 0;
   var trTag = input.getTag("tr", trPos);
   while (trTag.valid) {
      var tr = trTag.value;
      var item = "{";
      var tdPos = 0;
      var tdTag = tr.getTag("td", tdPos);
      var index = 0;
      while (tdTag.valid) {
         var td = tdTag.value;
         var text = td.removeOpenTag("td").removeCloseTag("td").trim();
         if (text.length() == 5 && text.contains("NAMBA", false)) {
            text = "#";
         }
         item = item.append("\"_").append(to_string(index)).append("\":\"").append(text).append("\"");
         item = item.append(",");

         index = index + 1;
         tdPos = tdTag.index + tdTag.length;
         tdTag = tr.getTag("td", tdPos);
      }
      if (item.endsWith(",", true)) {
         item = item.mid(0, item.length() - 1);
      }
      item = item.append("}");
      var empty = (item.length() == 2);
      if (!empty) {
         json = json.append(item);
         json = json.append(",");
      }
      trPos = trTag.index + trTag.length;
      trTag = input.getTag("tr", trPos);
   }


   if (json.endsWith(",", true)) {
      json = json.mid(0, json.length() - 1);
   }

   json = json.append("]");

   return json;
}

def getSubjectsPerformanceDialogTitle() {
   return "UFAULU WA MASOMO KATIKA MAKUNDI";
}

def getGenderWisePerformanceDialogTitle() {
   return "MADARAJA YA UFAULU WA UJUMLA";
}

def getGenderWisePerformanceDialogColumnsWidths(string url) {
   //This are fraction of width, the total must equals 1
   if (currentResultYear >= 2019) {
      return "0.28, 0.12, 0.12, 0.12 , 0.12, 0.24";
   } else {
      return "0.24, 0.27, 0.27, 0.22 , 0, 0";
   }
}

def getSubjectsPerformanceDialogTabLable1() {
   return "WALIOFANYA";
}

def getSubjectsPerformanceDialogTabLable2() {
   return "WALIOFUTIWA";
}

def getSubjectsPerformanceDialogTabLable3() {
   return "WALIOFAULU";
}

def getSubjectsPerformanceDialogTabLable4() {
   return "WASTANI";
}


def onDisplaySFNA(string title, string url) {
   enableAccessPointsGuardForPages();
}

def onDisplayRegion(string regionName, string title, string url) {
enableAccessPointsGuardForPages();
}

def onDisplayDistrict(string districtName, string title, string url) {
enableAccessPointsGuardForPages();
}

def onDisplaySchool(string schoolName, string title, string url) {
   currentResultYear = getYear(schoolName, title);
   if (adsShown == 0) {
      showOrLoadAd();
   }
enableAccessPointsGuardForPages();
}

def getOtherAppsPageTitle() { 
  var code = getData("CountryCode");
   var flag = getFlag(code);
   return "👋🏾 " + flag + " 👋🏾<br/>TAARIFA";
}

def getOtherAppsDelegateSpacing() {
   return 0;
}

def onGetNewImageUrl(string previousImageUrl) {
   return getOfflineImagePath(previousImageUrl);
}

def changeFailureIdentifier(string input) {
   var fid = getFailureIdentifier();
   if (!fid.equals("REFERRED", false)) {
      input = input.replace("REFERRED", fid, false);
   }
   return input;
}

def beforeDisplayResults(string displayName, int year, string url, string xml) {
enableAccessPointsGuardForSchoolResult(displayName);
   var output = xml.simplified();

   output = changeFailureIdentifier(output);

   return output;
}

def beforeDisplayGenderWisePerformance(string url, string json) {
enableAccessPointsGuardForPerformanceChecks();

   var output = json;

   output = changeFailureIdentifier(output);

   return output;
}

def beforeDisplaySubjectsPerformance(string url, string json) {
enableAccessPointsGuardForPerformanceChecks();
   return json;
}

def beforeDisplayMenuPage(string xml) { 
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

  output = getMenuHolidayAd(output);
  // output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/natengeneza.gif", "#emailUs", w, 0.3, "middle");
  // output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/std7b.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabe.n3cta.matokeo.ya.darasa.la.saba", w, 0.16, "bottom");
 //  output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/qt.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.matokeo.ya.qt", w, 0.16, "bottom");
//output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/Ads/jaridalaelimu.png", "#mambo", 1, 0.8, "top");

   return output;
}

def beforeDisplaySFNAPage(string title, string url, string xml) {
   var output = xml;
   var w = 0.85;

 //  output = putAdsToSFNAPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/form4.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.matokeo.ya.kidato.cha.nne", w, 0.16, "top");
 //  output = putAdsToSFNAPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.40, "middle");
//   output = putAdsToSFNAPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/DoctorMagic.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.doctormagic", w, 0.20, "bottom");

   return output;

}

def beforeDisplayRegionPage(string title, string url, string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

 //  output = putAdsToRegionPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/form6.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.matokeo.ya.kidato.cha.sita", w, 0.18, "top");
 //  output = putAdsToRegionPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.40, "bottom");
 //  output = putAdsToRegionPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.20, "bottom");

   return output;
}

def beforeDisplayDistrictPage(string title, string url, string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

 //  output = putAdsToDistrictPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/SomaKidigitali.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.somakidijitali", w, 0.18, "top");
  // output = putAdsToDistrictPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.30, "bottom");
//   output = putAdsToDistrictPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/DoctorMagic.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.doctormagic", w, 0.20, "middle");

   return output;
}

def beforeDisplayHistoryPage(string xml) { 
enableAccessPointsGuardForPages();

   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

// output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/Ads/elimu.png", "#openurl;https://play.google.com/store/apps/developer?id=Magabe+Lab", 1, 0.8, "bottom");
//output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/Ads/changia.png", "#", 1, 0.8, "bottom");

  //output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza2.gif", "#showAdvertiseWithUsDialog", w, 0.30, "bottom");
//   output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/form2.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.matokeo.ya.kidato.cha.pili", w, 0.18, "bottom");
 //  output = putAdsToHistoryPage(output, "https://raw.githubusercontent.com/magabe26/mgb/master/form4n6.gif", "#openurl;https://play.google.com/store/apps/details?id=com.magabelab.matokeo.kidato.cha4na6", w, 0.18, "bottom");


   return output;
}


def beforeDisplayOtherAppsPage(string xml) { 
   saveOtherAppsPageImages(xml);
   var output = xml;

   output = updateFailureIdentifierMenu(output);
 output= putAccessPointsBalanceOnOtherAppsInfo(output);
   return output;
}

//Ads
def initializeAds() {
   try {
      initAds("ca-app-pub-2466182993358829/8819992826");
   } catch {}
}

def onAdsInitialized() {
   //showToastMessage("Ads initialized");
   adsInitialized = true;
   loadAd();
}

def onLoadingAd() {
   //showToastMessage("Loading Ad ...");
}

def onAdLoaded() {
   //showToastMessage("Ad Loaded !");
   showAd();
}

def onFailedToLoadAd(string error) {
   //showToastMessage("Error:: Failed To LoadAd !".append(error));
hideLoadingIndicator();
}

def onAdShown() {
   //showToastMessage("Ad Shown !");
   adsShown = adsShown + 1;
giveRewardForAd();
   showAdAfterXMins(1);
hideLoadingIndicator();
}

def onFailedToShowAd(string error) {
   //showToastMessage("Error:: Failed To ShowAd !".append(error));
hideLoadingIndicator();
}

def onAdDismissed() {
   //showToastMessage("Ad Dismissed!");
hideLoadingIndicator();
}

def showOrLoadAd() {
   if (adsInitialized) {
      if (adLoaded()) {
         showAd();
      } else {
         loadAd();
      }
   } else {
      var vn = getVersionNameAsDouble();
      if ((vn < 1.3) || canShowAds()) {
         initializeAds();
      }
   }
}

def showAdAfterXMins(int mins) {
   var delay = 1000 * 60 * mins;
   setTimer(SHOW_AD_TIMERCODE, delay);
}

//Video
def onVideoDialogOpened(string videoUrl, string videoDescription, string redirectUrl) {
   //setVideoPlayerLoadingIndicator("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif");
   //setVideoThumbnail("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif")

   videoPlayerPlay();
}

def onVideoDialogClosed(string videoUrl, string videoDescription, string redirectUrl) {
   //log(" Video dialog closed"+ videoUrl);
}

def isVideoDialogCloseDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.5;
   }
}

def isVideoSeekForwardDisabled(string videoUrl, double position, double duration) {
   return false;
}

def onVideoPlayerStatusChanged(string videoUrl, int status) {

   switch (status) {

      case (VideoPlayerStatus.NoMedia) {
         log("VideoPlayerStatus.NoMedia");

         break;
      }

      case (VideoPlayerStatus.Loading) {
         log("VideoPlayerStatus.Loading");

         break;
      }

      case (VideoPlayerStatus.Loaded) {
         log("VideoPlayerStatus.Loaded");

         break;
      }

      case (VideoPlayerStatus.Buffering) {
         log("VideoPlayerStatus.Buffering");

         break;
      }

      case (VideoPlayerStatus.Stalled) {
         log("VideoPlayerStatus.Stalled");

         break;
      }

      case (VideoPlayerStatus.Buffered) {
         log("VideoPlayerStatus.Buffered");

         break;
      }

      case (VideoPlayerStatus.EndOfMedia) {
         log("VideoPlayerStatus.EndOfMedia");

         playVideoAd(videoUrl,getData("previous_descriptionImageUrl"),getData("previous_descriptionText"),getData("previous_descriptionBGColor"));
    
         break;
      }

      case (VideoPlayerStatus.InvalidMedia) {
         log("VideoPlayerStatus.InvalidMedia");

         break;
      }

      case (VideoPlayerStatus.UnknownStatus) {
         log("VideoPlayerStatus.UnknownStatus");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlaybackStateChanged(string videoUrl, int playbackState) {

   switch (playbackState) {

      case (VideoPlayerPlaybackState.PlayingState) {
         log("VideoPlayerPlaybackState.PlayingState");

         break;
      }

      case (VideoPlayerPlaybackState.PausedState) {
         log("VideoPlayerPlaybackState.PausedState");

         break;
      }

      case (VideoPlayerPlaybackState.StoppedState) {
         log("VideoPlayerPlaybackState.StoppedState");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlayerVolumeChanged(string videoUrl, double volume) {
   //log("onVideoPlayerVolumeChanged , volume = "+ to_string(volume));
}

def onVideoPlayerError(string videoUrl, int errorCode, string error) {
   closeVideoDialog();

   var errorDisplay = "";

   switch (errorCode) {

      case (VideoPlayerError.NoError) {
         errorDisplay = "VideoPlayerError.NoError";

         break;
      }

      case (VideoPlayerError.ResourceError) {
         errorDisplay = "VideoPlayerError.ResourceError";

         break;
      }

      case (VideoPlayerError.FormatError) {
         errorDisplay = "VideoPlayerError.FormatError";

         break;
      }

      case (VideoPlayerError.NetworkError) {
         errorDisplay = "VideoPlayerError.NetworkError";

         break;
      }

      case (VideoPlayerError.AccessDenied) {
         errorDisplay = "VideoPlayerError.AccessDenied";

         break;
      }

      case (VideoPlayerError.ServiceMissing) {
         errorDisplay = "VideoPlayerError.ServiceMissing";
         break;
      }

      default {
         break;
      }
   }

   requestCustomDialog(100520231, "fa::close", "<font color='red'>Imeshindwa kuonyesha</font>", errorDisplay, "Sawa", "", "#", 0.8, 0.2, false);
}


def isVideoDialogMinimizeDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.2;
   }
}

//------------------------------------------------

def useNonBraggingAboutText(text) { 
   var end = "maneno.";
   var i = text.indexOf(end, 0, false);
   if (i != -1) {
      return text.left(i + end.length()) + " 😀";
   }
   return text;
}

def tr(text) {
   //return text;
   return useNonBraggingAboutText(text);
}

def showDebugMessage(msg) {
   requestCustomDialog(411, "fa::coffee", "Debug message", msg, "ok", "", "#", 0.98, 0.6, false);
}

//-------------------------------

def hasInternetAccess() {
   var code = get("https://get.geojs.io/v1/ip/country");
   return (!code.isEmpty());
}

def onDownloadFailed(url, errorCode, errorString)
{
  //log(url + "----" + to_string(errorCode) + "----" + errorString);
  
  if(hasInternetAccess()){
    disableDefaultDownloadErrorToastMessage();
    requestCustomDialog(411, "fa::bullhorn", "<br>Maboresho ya mfumo", "Nimeshindwa kupata taarifa hizo kwa sasa, tafadhali jaribu tena baadae au fungua console kisha tuma amri rekebisha; ", "sawa", "", "#", 0.98, 0.3, false);
  }
}

//-------------------------------
//-------------- ConsentManager -----------------

def onConsentInfoUpdateSuccess() {}

def onConsentInfoUpdateFailure(error) {}

def onConsentFormLoaded() {
   showConsentForm();
}

def onConsentFormLoadFailure(error) {}

def onConsentFormShowFailure(error) {}

def onConsentNotGranted(error) {}

def onConsentGranted() {
   initializeAds();
}

def onFormatCandidateNo(string cNo, bool isListItem)
{
   if(isListItem){
      return cNo; //For Faster loading
   }else{
      return formatCandidateNo(cNo,"-","white","#168490","cyan");
   }
}

//----------------------------------------

def getOtherAppsPageRightIcon()
{
  return "fa::automobile";
}

def onOtherAppsPageRightIconClicked()
{
   onUrlVisited("#UtaliiApp");

}

//----------------------------------------
//----------------------------------------


def runTest(string input) {
   var output = input;

   return output;
}

//----------------- Accesss Permissions -----------------------

global LATEST_RESULTS_YEAR = 2024;
global ACCESS_PERMISSIONS_FEATURE_ENABLED = false;
global ACCESS_PERMISSIONS_FEATURE_LANG = "sw";

def accessCodeDialogBuyBtnText()
{
   return ACCESS_PERMISSIONS_FEATURE_LANG.equals("en",false) ? "Buy" : "Nunua";
}

def hasSchoolResultsOpenPermission(school,url)
{
  var year = getYear("",url);
  if(year == 0){
    return true;
  }
  return  (!ACCESS_PERMISSIONS_FEATURE_ENABLED) || accessCodePurchased(to_string(LATEST_RESULTS_YEAR)) || (year < LATEST_RESULTS_YEAR) || accessCodePurchased(to_string(year));
}

def onSchoolResultsOpenPermissionDenied(school,url)
{
   accessCodeDialogOpen();
}

def hasYearResultsOpenPermission(year,url)
{
  return  (!ACCESS_PERMISSIONS_FEATURE_ENABLED) || accessCodePurchased(to_string(LATEST_RESULTS_YEAR)) || (year < LATEST_RESULTS_YEAR) || accessCodePurchased(to_string(year));
}

def onYearResultsOpenPermissionDenied(year,url)
{
  accessCodeDialogOpen();
}

def onBuyAccessCode(){
    accessCodeDialogClose();
	accessCodeDialogSetCode("");
	showDefaultPurchaseIntructions(ACCESS_PERMISSIONS_FEATURE_LANG);
}

def onEnterAccessCode(string accessCode)
{
   if(accessCode.isEmpty()){
      showToastMessage(ACCESS_PERMISSIONS_FEATURE_LANG == "en" ? "Empty code" : "Code tupu");
      return;
   }
   showLoadingIndicator();
   verifyAccessCode(accessCode,to_string(LATEST_RESULTS_YEAR));
}

//-- Verification --

def showVerificationSuccessMessage(accessCode,lang,h)
{
	var icon = "fa::bullhorn";
	var w = 0.98;
	if(lang.equals("en",false)){
		requestCustomDialog(20250320, icon, " <font color=\"#00c000\">Verification Success</font>", "<font color=\"#00c000\"> " + accessCode + "</font> confirmed. Thank you for contributing to the development of this application.", "Ok", "", "#", w, h, false);
	}else{
		requestCustomDialog(20250320, icon, " <font color=\"#00c000\">Uthibitisho Umefanikiwa</font>", "<font color=\"#00c000\"> " + accessCode + "</font> imefanikiwa. Asante kwa kuchangia katika maendelea ya aplikesheni hii.", "Sawa", "", "#", w, h, false);
	}
}

    def showVerificationFailure(accessCode,errorCode,lang,h)
    {
        var msg;
        if(lang.equals("en",false)){
            if(3 == errorCode){
                msg = "Used code";
            }
            else if(4 == errorCode){
                msg = "Revoked code";
            }
            else if(5 == errorCode){
                msg = "Invalid code";
            }
            else if(6 == errorCode){
                msg = "Empty code";
            }
            else if(7 == errorCode){
                msg = "Empty hint";
            }
            else if(8 == errorCode){
                msg = "Invalid end point";
            }
            else if(9 == errorCode){
                msg = "Unknown";
            }
            else if(10 == errorCode){
                msg = "Code mismatch";
            }
            else if(11 == errorCode){
                msg = "Hint mismatch";
            }
            else if(12 == errorCode){
                msg = "Invalid response";
            }
            else if(13 == errorCode){
                msg = "Network error";
            }
            msg.prepend("<font color=\"red\">Error</font> : ");
        }else{
            if(3 == errorCode){
                msg = "Code imeshatumika";
            }
            else if(4 == errorCode){
                msg = "Code imesitishwa";
            }
            else if(5 == errorCode){
                msg = "Code si sahihi";
            }
            else if(6 == errorCode){
                msg = "Code ni tupu";
            }
            else if(7 == errorCode){
                msg = "Kidokezo ni tupu";
            }
            else if(8 == errorCode){
                msg = "Invalid end point";
            }
            else if(9 == errorCode){
                msg = "Halijulikani";
            }
            else if(10 == errorCode){
                msg = "Code hazifanani";
            }
            else if(11 == errorCode){
                msg = "Vidokezo havifanani";
            }
            else if(12 == errorCode){
                msg = "Jibu batili";
            }
            else if(13 == errorCode){
                msg = "Matatizo ya mtandao";
            }
            msg.prepend("<font color=\"red\">Tatizo</font> : ");
        }
        var icon = "fa::bullhorn";
        var w = 0.98;
        if(lang.equals("en",false)){
            requestCustomDialog(20250320, icon, " <font color=\"red\">Verification of <font color=\"#00c000\">" +accessCode + "</font> failed</font>", msg, "Ok", "", "#", w, h, false);
        }else{
            requestCustomDialog(20250320, icon, " <font color=\"red\">Uthibitisho <font color=\"#00c000\">" +accessCode + "</font> umeshindikana</font>", msg, "Sawa", "", "#", w, h, false);
        }
    }
	
def accessCodeEncryptedEndpoint() 
{
   return "AwIai0H9Zo2yfGF0NJAW6soBSR8E/nKC4yp3YnrLRvbYBkIdAaZkmLhhIw=="; //Actual
}

def onAccessCodeVerificationSuccess(accessCode)
{
  hideLoadingIndicator();
  accessCodeDialogClose();
  accessCodeDialogSetCode("");
  showVerificationSuccessMessage(accessCode,ACCESS_PERMISSIONS_FEATURE_LANG,0.3);
}

def onAccessCodeVerificationFailure(accessCode,errorCode)
{
   hideLoadingIndicator();
  accessCodeDialogClose();
  accessCodeDialogSetCode("");
  showVerificationFailure(accessCode,errorCode,ACCESS_PERMISSIONS_FEATURE_LANG, 0.2);
}

def onAccessCodeRevoked(accessCode,note)
{

 log("onAccessCodeRevoked------ code = " + accessCode + "------- note = " + note);
 
}

//--------------------------------------------------
