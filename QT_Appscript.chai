/**
 * Copyright 2022-2023 MagabeLab (Tanzania). All Rights Reserved.
 * Author Edwin Magabe    edyma24@gmail.com
 */

/* --------------  extensions  ---------------*/

//------------------

def getScriptRunnerVersion() {
   try {
      return scriptRunnerVersion();
   } catch {
      return 1;
   }
}

def getAppPackageName() {
   try {
      return getPackageName();
   } catch {
      return "com.magabelab.matokeo.ya.qt";
   }
}

def packageNameToUrl(string packageName) {
   return "https://play.google.com/store/apps/details?id=".append(packageName);
}

//------------------

def boolToString(bool b) {
   return b ? "true" : "false";
}

//------------------

def saveOrUpdateData(string key, string value) {
   if (!saveData(key, value)) {
      return updateData(key, value);
   } else {
      return true;
   }
}

//------------------

def openTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

def closeTag(string tag) {
   return chaR('<').seq(spaceOptional()).seq(chaR('/')).seq(spaceOptional()).seq(stR(tag, false)).seq(spaceOptional()).seq(chaR('>'));
}

//------------------

def string::indexOf(string s, int start, bool caseSensitive) {
   return strIndexOf(this, s, start, caseSensitive);
}

def string::contains(string s, bool caseSensitive) {
   return strContains(this, s, caseSensitive);
}

def string::remove(string s, bool caseSensitive) {
   return strRemove(this, s, caseSensitive);
}

def string::right(int n) {
   return strRight(this, n);
}

def string::left(int n) {
   return strLeft(this, n);
}

def string::mid(int position, int n) {
   return strMid(this, position, n);
}

def string::length() {
   return strLength(this);
}

def string::replace(string before, string after, bool caseSensitive) {
   return strReplace(this, before, after, caseSensitive);
}

def string::replaceAtPosition(int position, int n, string after) {
   return strReplaceAtPosition(this, position, n, after);
}

def string::startsWith(string str, bool caseSensitive) {
   return strStartsWith(this, str, caseSensitive);
}

def string::endsWith(string str, bool caseSensitive) {
   return strEndsWith(this, str, caseSensitive);
}

def string::truncate(int position) {
   return strTruncate(this, position);
}

def string::compare(string other, bool caseSensitive) {
   return strCompare(this, other, caseSensitive);
}

def string::split(string sep) {
   return strSplit(this, sep);
}

def string::append(string str) {
   return strAppend(this, str);
}

def string::prepend(string str) {
   return strPrepend(this, str);
}

def string::isLower() {
   return strIsLower(this);
}

def string::isUpper() {
   return strIsUpper(this);
}

def string::isEmpty() {
   return strIsEmpty(this);
}

def string::simplified() {
   return strSimplified(this);
}

def string::removeAtPosition(int position, int length) {
   return strRemoveAtPosition(this, position, length);
}

class Tag {
   def Tag(bool valid, int index, int length, string value) {
      this.valid = valid;
      this.index = index;
      this.length = length;
      this.value = value;
   }
   var valid;
   var index;
   var length;
   var value;
};

def string::getTag(string t, int start) {
   var closeTag = "</".append(t).append(">");
   var tag = Tag(false, -1, -1, "");
   var len = closeTag.length();
   var firstIndex = this.indexOf("<".append(t), start, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(closeTag, firstIndex + 1, false);
      if (lastIndex != -1) {
         var n = (lastIndex - firstIndex) + len;
         var value = this.mid(firstIndex, n);;
         tag = Tag(true, firstIndex, n, value);
      }
   }
   return tag;
}

def string::removeOpenTag(string t) {
   var firstIndex = this.indexOf("<".append(t), 0, false);
   if (firstIndex != -1) {
      var lastIndex = this.indexOf(">", firstIndex + 1, false);
      if (lastIndex != -1) {
         var len = (lastIndex - firstIndex) + 1;
         this = this.removeAtPosition(firstIndex, len);
      }
   }
}

// Only use this function on a small atring
def string::removeCloseTag(string t) {
   this = closeTag(t).removeFrom(this, 0, -1);
}

def string::removeRegex(string regex) {
   this = strRemoveRegex(this, regex);
}

def string::replaceRegex(string regex, string replacement) {
   this = strReplaceRegex(this, regex, replacement);
}

def string::equals(string other, bool caseSensitive) {
   return this.length() == other.length() && strContains(this, other, caseSensitive);
}

/* -------------------------------------------------*/
//------------------

global MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES = 0.4

def getVersionNameAsDouble() {
   return to_double(getVersionName(getAppPackageName()));
}

//------------------

global imagesToBeSaved = [];
global savedImageIndex = 0;
global SAVE_IMAGE_FOR_OFFLINE_TIMERCODE = 2023457;


def saveImageForOffline(string imageUrl) {
   imagesToBeSaved.push_back(imageUrl);
   setTimer(SAVE_IMAGE_FOR_OFFLINE_TIMERCODE, 100);
}

def getOfflineImagePath(string imageUrl) {
   var path = getData(imageUrl);
   if (!path.isEmpty()) {
      if (fileExists(path) && (getFileSize(path) > 0)) {
         path = path.prepend("file:");
      } else {
         path = "";
      }
   }
   return path;
}

def saveOtherAppsPageImages(string xml) {
   var fn = fun[](string url) {
      if (url.endsWith(".gif", false) || url.endsWith(".png", false) || url.endsWith(".jpg", false)) {
         saveImageForOffline(url);
      }
      return url;
   }
   var end = chaR('"').oR(chaR('\'')).oR(chaR('<'));
   stR("http", false).seq(any(end, "#<>").plus()).replaceInMapped(xml, fn, 0, -1);
}

//------------------

global LOADING_IMAGE_RESOURCE_URL = "images/loading.gif";
global recentLoadingImageSet = "";

def setLoadingImage(string url) {
   var path = getOfflineImagePath(url).remove("file:", false);
   if (!path.isEmpty()) {
      saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL , path);
      loadingIndicatorImageChanged();
   } else {
      recentLoadingImageSet = url;
      saveImageForOffline(url);
   }
}

def setDefaultLoadingImage() {
   saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL , "");
   loadingIndicatorImageChanged();
}


def onLoadingImageSaved(string url, string path) {
  if(recentLoadingImageSet.equals(url,false)){
     saveOrUpdateData(LOADING_IMAGE_RESOURCE_URL, path);
     loadingIndicatorImageChanged();
	 recentLoadingImageSet = "";
  }
}

//------------------

class _VideoPlayerStatus {
   def _VideoPlayerStatus() {
      this.UnknownStatus = 0;
      this.NoMedia = 1;
      this.Loading = 2;
      this.Loaded = 3;
      this.Stalled = 4;
      this.Buffering = 5;
      this.Buffered = 6;
      this.EndOfMedia = 7;
      this.InvalidMedia = 8;
   }
   var NoMedia;
   var Loading;
   var Loaded;
   var Buffering;
   var Stalled;
   var Buffered;
   var EndOfMedia;
   var InvalidMedia;
   var UnknownStatus;
};
global VideoPlayerStatus = _VideoPlayerStatus();


class _VideoPlayerPlaybackState {
   def _VideoPlayerPlaybackState() {
      this.StoppedState = 0;
      this.PlayingState = 1;
      this.PausedState = 2;
   }
   var PlayingState;
   var PausedState;
   var StoppedState;
};
global VideoPlayerPlaybackState = _VideoPlayerPlaybackState();


class _VideoPlayerError {
   def _VideoPlayerError() {
      this.NoError = 0;
      this.ResourceError = 1;
      this.FormatError = 2;
      this.NetworkError = 3;
      this.AccessDenied = 4;
      this.ServiceMissing = 5;
   }
   var NoError;
   var ResourceError;
   var FormatError;
   var NetworkError;
   var AccessDenied;
   var ServiceMissing;
};

global VideoPlayerError = _VideoPlayerError();

//------------------

def putAdsImpl(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation, string rootTagName, string childTagName, string urlAttributeName, string wrapperTagName) {
   if ((!adLocation.equals("top", false)) && (!adLocation.equals("middle", false)) && (!adLocation.equals("bottom", false))) {
      return xml;
   }

   var ad = "";
   if (!imageUrl.isEmpty()) {
      saveImageForOffline(imageUrl);
      var bgColor = "<BG_COLOR>transparent</BG_COLOR>";
      var enableImage = "<ENABLE_IMAGE>1</ENABLE_IMAGE>";
      var imageURL = "<IMAGE_URL>".append(imageUrl).append("</IMAGE_URL>");
      var imageWidthFraction = "<IMAGE_WIDTH_FRACTION>".append(to_string(wf)).append("</IMAGE_WIDTH_FRACTION>");
      var imageHeightFraction = "<IMAGE_HEIGHT_FRACTION>".append(to_string(hf)).append("</IMAGE_HEIGHT_FRACTION>");
      ad = "<".append(childTagName).append(">").append("<A ").append(urlAttributeName).append("=\"").append(redirectUrl).append("\"></A>").append(bgColor).append(enableImage).append(imageURL).append(imageWidthFraction).append(imageHeightFraction).append("</").append(childTagName).append(">");
   } else {
      return xml;
   }

   if (adLocation.equals("middle", false)) {
      var count = 0;
      var i = xml.indexOf(urlAttributeName, 0, false);
      while (i != -1) {
         ++count;
         i = xml.indexOf(urlAttributeName, i + urlAttributeName.length(), false);
         if (count == 10000) { //we dont want to freeze ui do we?
            return xml;
         }
      }

      if (count > 1) {
         var middleItem = count / 2;
         var n = 0
         var fn = fun[n, middleItem, ad](string s) {
            var replace = (n == middleItem) ? (s + ad) : s;
            ++n;
            return replace;
         };

         return html_tag(childTagName).replaceInMapped(xml, fn, 0, -1);
      }
   }
   var topLocation = adLocation.equals("top", false);
   var tag = (topLocation ? "<" : "</") + rootTagName + ">";
   var i = xml.indexOf(tag, 0, false);
   if (i != -1) {
      var startChunk = xml.left(i);
      var endChunk = xml.mid(i + tag.length(), -1);
      if (topLocation) {
         return startChunk + tag + ad + endChunk;
      } else {
         return startChunk + ad + tag + endChunk;
      }
   }

   return xml;
}

def putAdsToMenu(string xml, string imageUrl, string redirectUrl, double wf, double hf, string adLocation) {
   return putAdsImpl(xml, imageUrl, redirectUrl, wf, hf, adLocation, "NECTA_RESULTS", "RESULTS", "HREF", "");
}

//------------------

global EMAIL_US_REQUEST_CODE = 706033328;

def onShowAdvertiseWithUsDialogCommandForConsole(cmd, argv, argc) {
   if (cmd.equals("tangaza", false)) {
      showCustomDialogAfterXMillis(EMAIL_US_REQUEST_CODE, "fa::vcardo", " TANGAZA", "Tangaza katika aplikesheni hii. Tangaza <font color='green'><u>shule</u></font>, <font color='yellow'><u>stationery</u></font>, <font color='cyan'><u>kitabu</u></font> n.k  kwa kutumia mfumo wa picha au video. Kwa maelezo zaidi tutumie barua pepe.", "Tuma", "<font color='white'>Badae</font> ", "#emailUs", 0.8, 0.3, false,500);
   }
}

def onShowAdvertiseWithUsDialogCommand(cmd, argv, argc) {
   if (cmd.equals("showAdvertiseWithUsDialog", false)) {
      requestCustomDialog(EMAIL_US_REQUEST_CODE, "fa::vcardo", " TANGAZA", "Tangaza katika aplikesheni hii. Tangaza <font color='green'><u>shule</u></font>, <font color='yellow'><u>stationery</u></font>, <font color='cyan'><u>kitabu</u></font> n.k  kwa kutumia mfumo wa picha au video. Kwa maelezo zaidi tutumie barua pepe.", "Tuma", "<font color='white'>Badae</font> ", "#emailUs", 0.8, 0.3, false);
   }
   onShowAdvertiseWithUsDialogCommandForConsole(cmd, argv, argc);
}

//------------------

global VISIT_MAGABE_LAB_REQUEST_CODE = 320230506;

def onVisitMagabeLabCommandForConsole(cmd, argv, argc) {
   if (cmd.equals("MagabeLab", false)) {
      showCustomDialogAfterXMillis(VISIT_MAGABE_LAB_REQUEST_CODE, "fa::rocket", " TUTEMBELEE", "<font color='cyan'>Tembelea tovuti yetu.</font>", "Sawa", "<font color='white'>Badae</font> ", "#visitMagabeLab", 0.8, 0.15, false,500);
   }
}
def onVisitMagabeLabCommand(cmd, argv, argc) {
   if (cmd.equals("visitMagabeLab", false)) {
      requestCustomDialog(VISIT_MAGABE_LAB_REQUEST_CODE, "fa::rocket", " TUTEMBELEE", "<font color='cyan'>Tembelea tovuti yetu.</font>", "Sawa", "<font color='white'>Badae</font> ", "#visitMagabeLab", 0.8, 0.15, false);
   }
   onVisitMagabeLabCommandForConsole(cmd, argv, argc);
}

//------------------
global SHOW_CONSOLE_REQUEST_CODE = 12052023

def onShowConsoleCommand(cmd, argv, argc) {
   if (cmd.equals("showConsole", false)) {
      requestCustomDialog(SHOW_CONSOLE_REQUEST_CODE, "fa::windowmaximize", "Console", "<font color='green'> Enter command :- </font>", "Execute", "", "#showConsole", 0.98, 0.5, true);
   }
}

//------------------

def getOfflineVideoPath(string url) {
   var path = getData(url);
   if (!path.isEmpty()) {
      if (fileExists(path) && (getFileSize(path) > 0)) {
         path = path.prepend("file:");
      } else {
         path = "";
      }
   }
   return path;
}

def onPlayVideoCommand(cmd, argv, argc) {
   if (cmd.equals("playVideo", false) || cmd.equals("onyeshaVideo", false)) {
      if (argc > 0) {
         var url = argv[0];
         var path = getOfflineVideoPath(url);
         if (!path.isEmpty()) {
            playVideo(path);
         } else {
            playVideo(url);
         }
      }
   }
}

//------------------

def sleep(int millis) {
   var t1 = getTimestamp();
   while ((getTimestamp() - t1) < millis) {}
}

//------------------

def encodeData(string data) {
   encryptAndSaveToFile(data, "tmp");
   return getFileData(generateAppRootFilePath("tmp.mgb"));
}

def decodeData(string data) {
   saveFileData(data, "tmp", "txt");
   return getDecryptedFileData(generateAppRootFilePath("tmp.txt"));
}

//------------------

global SHOW_CUSTOM_DIALOG_TIMERCODE = 12520232;
def showCustomDialogAfterXMillis(requestCode, icon, title, description, yesButtonText, noButtonText, url, percentWidth, percentHeight, showInputText, millis) {
   saveOrUpdateData("Custom_Dialog_Request_Code", to_string(requestCode));
   saveOrUpdateData("Custom_Dialog_Icon", icon);
   saveOrUpdateData("Custom_Dialog_Request_Title", encodeData(title));
   saveOrUpdateData("Custom_Dialog_Request_Description", encodeData(description));
   saveOrUpdateData("Custom_Dialog_Request_YesButtonText", encodeData(yesButtonText));
   saveOrUpdateData("Custom_Dialog_Request_NoButtonText", encodeData(noButtonText));
   saveOrUpdateData("Custom_Dialog_Request_Url", url);
   saveOrUpdateData("Custom_Dialog_Request_PercentWidth", to_string(percentWidth));
   saveOrUpdateData("Custom_Dialog_Request_PercentHeight", to_string(percentHeight));
   saveOrUpdateData("Custom_Dialog_Request_ShowInputText", to_string(showInputText ? 1 : 0));
   setTimer(SHOW_CUSTOM_DIALOG_TIMERCODE, millis);
}

def showOperationSuccessDialog(string message) {
   showCustomDialogAfterXMillis(421, "fa::smileo", "<font color='white'>OPERATION SUCCESS </font>", message, "Ok", "", "#", 0.8, 0.2, false, 500);
}

def showOperationFailedDialog(string message) {
   showCustomDialogAfterXMillis(421, "fa::close", "<font color='white'>OPERATION FAILED </font>", "<font color='red'>" + message + "</font>", "Ok", "", "#", 0.8, 0.2, false, 500);
}

//------------------

def onSaveFileCommand(cmd, argv, argc) {
   if (cmd.equals("saveFile", false) || cmd.equals("tunzaFaili", false)) {
      showLoadingIndicator();
      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            hideLoadingIndicator();
            showOperationFailedDialog("Invalid url");
            return;
         }

         var fileName = "";
         if (argc > 1) {
            fileName = argv[1];
         } else {
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = url.split("/");
            forEachString(arr, fn);

            fileName = list[list.size() - 1];
         }

         var path = generateAppRootFilePath(fileName);
         if (saveFile(url, path)) {
            saveOrUpdateData(url, path);
            pasteToClipboard(path);
            hideLoadingIndicator();
            showOperationSuccessDialog("<font color='green'> url: " + url + "<br>imetunzwa : " + path + "</font>");
         } else {
            hideLoadingIndicator();
            showOperationFailedDialog("<font color='red'> imeshindwa kutunza faili</font>");
         }

      }
      hideLoadingIndicator();
   }
}

//------------------

def onSaveAndPlayVideoCommand(cmd, argv, argc) {
   if (cmd.equals("saveAndPlayVideo", false) || cmd.equals("tunzaNaOnyeshaVideo", false)) {

      showLoadingIndicator();

      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            showOperationFailedDialog("Invalid url");
            hideLoadingIndicator();
            return;
         }

         var path = getOfflineVideoPath(url);
         if (!path.isEmpty()) {
            hideLoadingIndicator();
            playVideo(path);
            return;
         }

         var fileName = "";
         if (argc > 1) {
            fileName = argv[1];
         } else {
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = url.split("/");
            forEachString(arr, fn);

            fileName = list[list.size() - 1];
         }

         path = generateAppRootFilePath(fileName);
         if (saveFile(url, path)) {
            saveOrUpdateData(url, path);
            pasteToClipboard(path);
            hideLoadingIndicator();
            playVideo("file:" + path);
         } else {
            hideLoadingIndicator();
            showOperationFailedDialog("<font color='red'> imeshindwa kutunza faili</font>");
         }
      }
      hideLoadingIndicator();
   }
}


//------------------

def onOfflineVideoCommand(cmd, argv, argc) {
   if (cmd.equals("offlineVideo", false) || cmd.equals("videoIlipotuzwa", false)) {
      showLoadingIndicator();
      if (argc >= 1) {
         var url = argv[0];
         if (!url.contains("/", false)) {
            showOperationFailedDialog("Invalid url");
            hideLoadingIndicator();
            return;
         }

         var path = getOfflineVideoPath(url);
         pasteToClipboard(path);
         showCustomDialogAfterXMillis(421, "fa::close", "VIDEO ILIPOTUNZWA", "Imetunzwa = " + path, "Ok", "", "#", 0.8, 0.2, false, 500);
      }
      hideLoadingIndicator();
   }
}

//------------------

//------------------

global lifeQuotes = [
  "A CONFIDENT PERSON AVOIDS TWO THINGS IN LIFE: IDLE GOSSIP AND PETTY CONFLICTS, CHOOSING INSTEAD TO CULTIVATE UNDERSTANDING AND FOSTER HARMONY",
  "THE KEY IS TO KEEP COMPANY ONLY WITH PEOPLE WHO UPLIFT YOU, WHOSE PRESENCE CALLS FORTH YOUR BEST.",
  "THE AIM OF THE WISE IS NOT TO SECURE PLEASURE BUT TO AVOID PAIN.",
  "THE MISFORTUNE OF THE WISE IS BETTER THAN THE PROSPERITY OF THE FOOL.",
  "WHAT IT LIES IN OUR POWER TO DO, IT LIES IN OUR POWER NOT TO DO.",
  "COURAGE IS THE FIRST OF HUMAN QUALITIES BECAUSE IT IS THE QUALITY THAT GUARANTEES OTHERS.",
  "NO ONE IS MORE HATED THAN HE WHO SPEAKS THE TRUTH.",
  "BY DESIRING LITTLE, A POOR MAN MAKES HIMSELF RICH.",
  "THE ONLY TRUE WISDOM IS IN KNOWING YOU KNOW NOTHINGS.",
  "HE IS A MAN OF COURAGE WHO DOES NOT RUN AWAY BUT REMAINS AT HIS POST AND FIGHTS AGAINST THE ENEMY.",
  "DO NOT CHASE AFTER HAPPINESS, IT IS ALWAYS IN YOU.",
  "IN ANGER, WE SHOULD REFRAIN BOTH FROM SPEECH AND ACTION.",
  "LET HIM THAT WOULD MOVE THE WORLD FIRST MOVE HIMSELF",
  "A FOOL IS KNOWN BY HIS SPEECH, AND A WISE MAN BY SILENCE.",
  "HE WHO LAUGHS AT HIMSELF NEVER RUNS OUT OF THINGS TO LAUGH AT.",
  "IN OLD AGE, WE ALL REGRET NOT HAVING KILLED LAZINESS IN OURSELVES.",
  "A WISE MAN SPEAKS BECAUSE HE HAS SOMETHING TO SAY, A FOOL BECAUSE HE HAS TO SAY SOMETHING.",
  "MEN SHOULD STRIVE TO THINK MUCH AND KNOW LITTLE.",
  "MANKIND IS MADE OF TWO KINDS OF PEOPLE: WISE PEOPLE WHO KNOW THEY`RE FOOLS, AND FOOLS WHO THINK THEY ARE WISE.",
  "HE IS RICHEST WHO IS CONTENT WITH THE LEAST, FOR CONTENT IS THE WEALTH OF NATURE.",
  "REST SATISFIED WITH DOING WELL, AND LEAVE OTHERS TO TALK OF YOU AS THEY PLEASE.",
  "REALITY IS CREATED BY THE MIND, WE CAN CHANGE OUR REALITY BY CHANGING OUR MIND",
  "EMPLOY YOUR TIME IN IMPROVING YOURSELF BY OTHER MEN`S WRITINGS, SO THAT YOU SHALL GAIN EASILY WHAT OTHERS HAVE LABORED HARD FOR.",
  "THE OLDEST, SHORTEST WORDS -- `YES` AND `NO` ARE THOSE WHICH REQUIRE THE MOST THOUGHT.",
  "MAN IS NOT WORRIED BY REAL PROBLEMS SO MUCH AS BY HIS IMAGINED ANXIETIES ABOUT REAL PROBLEMS.",
  "SMALL-MINDED PEOPLE BLAME OTHERS. AVERAGE PEOPLE BLAME THEMSELVES. THE WISE SEE ALL BLAME AS FOOLISHNESS",
  "SMART PEOPLE LEARN FROM EVERYTHING AND EVERYONE, AVERAGE PEOPLE FROM THEIR EXPERIENCES, STUPID PEOPLE ALREADY HAVE ALL THE ANSWERS.",
  "STRONG MINDS DISCUSS IDEAS, AVERAGE MINDS DISCUSS EVENTS, WEAK MINDS DISCUSS PEOPLE.",
  
  //Asha-Rose Migiro
  "MORE AND MORE LEADERS AROUND THE WORLD ARE JOINING THE STRUGGLE. MORE AND MORE INDIVIDUALS UNDERSTAND THAT ANY ABUSE OF ANY WOMEN IS INTOLERABLE.",
  
  //Jakaya Kikwete
  
  "ROADS ARE THE BLOOD VESSELS OF THE ECONOMY.",
  "AFRICA NEEDS ACCESS TO MARKETS.",
  
  //Benjamin Mkapa
  "THERE IS A THOUGHT THAT POVERTY IS A PUBLIC POLICY FAILURE; POVERTY IS MAN-MADE BY ACTION AND NON ACTION; POVERTY CAN BE ELIMINATED.",
  
  //John Pombe Magufuli
  "TUKO HAPA KWA AJILI YA KULINDA MASLAHI YA WATANZANIA. TUMECHEZEWA MNO.",
  "MWIZI NI MWIZI TU! HATA KAMA AWE MZUNGU! WALIKUWA WANATUIBIA DHAHABU ZETU. NIMEWATUMBUA BILA AIBU... BILA WOGA!",

  //President Samia Suluhu Hassan
  "WE ARE NOT ENEMIES WITH ANYBODY. WE RESPECT THE VIEWS OF THOSE WE DO NOT AGREE WITH, EVEN AS WE CONTINUE TO DEFEND OURS AS A RESPONSIBILITY PASSED DOWN FROM OUR FOREFATHERS.",
  "SUALA LA USALAMA BARABARANI HALINA BUDI KUPEWA UZITO MKUBWA NA KUWA AJENDA YA TAIFA. SUALA LA AJALI LINAMGUSA KILA MTU HALICHAGUI, NAOMBA MLIPE UZITO MKUBWA IWE AJENDA YA TAIFA",
  "A WOMAN IS LIKE A TEA BAG; YOU CAN`T TELL HOW STRONG SHE IS UNTIL YOU PUT HER IN HOT WATER.",

  // Julius Nyerere
  "VIONGOZI WABOVU WENYE MIOYO YA KUKU, HULIZWA NA MATATIZO; BALI WATU MADHUBUTI, WENYE MIOYO THABITI, HUKOMAZWA NAYO ... HATIMA YA NCHI YETU NI JUKUMU LETU. KWA PAMOJA TUNAWEZA KUISAIDIA NCHI YETU KUSONGA MBELE KUELEKEA KWENYE HAKI ZAIDI NA USAWA ZAIDI KWA WATANZANIA WOTE.",
  "TUNATAKA KUONA VIJANA JEURI KATIKA TAIFA HILI NA WENYE KUJIAMINI NA SIO WAOGA AKINA `NDIO BWANA MKUBWA`. TUNATAKA KUONA VIJANA WENYE UJASIRI WA KUHOJI NA KUPIGA VITA MIFUMO YA KIDHALIMU ISIYOSHABIHIANA NA MATAKWA NA MATARAJIO YA JAMII YA KITANZANIA.",
  "NITASEMA KWELI DAIMA. FITINA KWANGU NI MWIKO.",
  "INDEPENDENCE CANNOT BE REAL IF A NATION DEPENDS UPON GIFTS.",
  "MAKOSA YETU MENGINE HUTOKANA NA WOGA; WOGA UNAOTUZUIA KUMLAUMU MKUBWA JAPO TUNAJUA KUWA KAKOSA, AU KUMTETEA MDOGO ANAYELAUMIWA NA WAKUBWA JAPO TUNAJUA KUWA HANA MAKOSA",
  "THERE IS NO TIME TO WASTE. WE MUST EITHER UNITE NOW OR PERISH.",
  "WATU WALIO HATARI SANA NI WALE AMBAO WANAFIKIRI KUWA WANAJUA KILA KITU, WALA HAWANA HAJA KUJIFUNZA ZAIDI. HII NI TABIA MBAYA AMBAYO HUZUIA KABISA MAENDELEO.",
  "SMALL NATIONS ARE LIKE INDECENTLY DRESSED WOMEN. THEY TEMPT THE EVIL-MINDED.",
  "WENGINE HUGAWA WATU KATIKA MAFUNGU. `FULANI` JAPO AKIFANYA KOSA KUBWA SANA HASEMWI, LAKINI `FULANI` WA PILI AKIFANYA KOSA JAPO DOGO, KOSA LILE HUKUZWA LIKAWA KAMA MLIMA KILIMANJARO.",
  "YOU CANNOT DEVELOP PEOPLE. YOU MUST ALLOW PEOPLE TO DEVELOP THEMSELVES.",
  "WENGINE HUMWONA MWENZAO ANAFANYA KOSA. BADALA YA KUMWAMBIA PALE PALE KIJAMAA KWAMBA ATENDALO NI KOSA, WATANYAMAZA KIMYA. LAKINI HAWANYAMAZI KIMYA KABISA! WATAKWENDA KUMTETA KATIKA VIKUNDI VYA SIRI SIRI.",
  "IF REAL DEVELOPMENT IS TO TAKE PLACE, THE PEOPLE HAVE TO BE INVOLVED.",
  "UKIONDOA MATATIZO WAYAPATAYO BINADAMU KWA SABABU YA MAMBO KAMA MAFURIKO, NZIGE, KIANGAZI N.K, MATATIZO YAO MENGI HUTOKANA NA UNAFSI.",
  "EDUCATION IS NOT A WAY TO ESCAPE POVERTY, IT IS A WAY OF FIGHTING IT.",
  "KUJIELIMISHA NI KUTAFUTA UKWELI WA MAMBO.",
  "KOSA JINGINE NI KUTOJIELIMISHA. KANUNI YETU MOJA INASEMA: `NITAJIELIMISHA KWA KADIRI YA UWEZO WANGU WOTE NA KUTUMIA ELIMU YANGU KWA FAIDA YA WOTE`. WENGINE HUFIKIRI KUWA KUJIELIMISHA NI KUJUA KUSOMA NA KUANDIKA. HILO NI KOSA, LAKINI SI KUBWA KAMA LA PILI. WENGI WETU, HASA BAADHI YA VIONGOZI, HUFIKIRI KUWA TUNAJUA KILA KITU NA HATUNA HAJA KUJIFUNZA JAMBO LOLOTE ZAIDI."

  
];

global lifeQuotesAuthor = [
  "Epicurus",
  "Epictetus",
  "Aristotle",
  "Epicurus",
  "Aristotle",
  "Aristotle",
  "Plato",
  "Democritus",
  "Socrates",
  "Socrates",
  "Pythagoras",
  "Pythagoras",
  "Socrates",
  "Pythagoras",
  "Epictetus",
  "Epicurus",
  "Plato",
  "Democritus",
  "Socrates",
  "Socrates",
  "Pythagoras",
  "Plato",
  "Socrates",
  "Pythagoras",
  "Epictetus",
  "Epictetus",
  "Socrates",
  "Socrates",
  //Asha-Rose Migiro
  
  "Asha-Rose Migiro",
  
  //Jakaya Kikwete
  
  "Jakaya Kikwete",
  "Jakaya Kikwete",
  
  //Benjamin Mkapa
  
  "Benjamin Mkapa",
  //John Pombe Magufuli
  "Dr. John Pombe Magufuli",
  "Dr. John Pombe Magufuli",

  //President Samia Suluhu Hassan
  
  "Dr. Samia Suluhu Hassan <font color='gray'>[President Of United Republic Of Tanzania]</font>",
  "Dr. Samia Suluhu Hassan <font color='gray'>[Rais Wa Tanzania]</font>",
  "Dr. Samia Suluhu Hassan <font color='gray'>[President Of United Republic Of Tanzania]</font>",
   
  // Julius Nyerere
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>",
  "<font color='cyan'>Julius Nyerere</font><font color='gray'>[Baba Wa Taifa La Tanzania]</font>"

];

global LIFE_QUOTE_REQUESTCODE = 1002023;

def showLifeQuote(){
  if(lifeQuotes.size()  == lifeQuotesAuthor.size()){
     var key = "CurrentLifeQuote";
     var len = lifeQuotes.size();
     var indexStr = getData(key);
	 var index = len - 1;
	 if(!indexStr.isEmpty()){
	    index = to_int(indexStr);
	 }
	 
	 if(index < 0 || index >= len){
	    index = len - 1;
	 }
	 
	 showCustomDialogAfterXMillis(LIFE_QUOTE_REQUESTCODE, "fa::bell", "<br><font color='white'>NUKUU</font>", "<br><font color='cyan'>("+ to_string(index + 1) + ")&nbsp;</font>" +lifeQuotes[index] + "<br><i><u><font color='cyan'>" + lifeQuotesAuthor[index] + "</u></i></font><br><br><font color='yellow'>[Hiari]</font>&nbsp;Weka namba ya nukuu, mfano:- " + to_string(lifeQuotes.size()), "Nyingine", "Funga", "#", 0.9, 0.6, true,500);	 
	 saveOrUpdateData(key,to_string(index - 1));
  }else{
     log("ERROR: LIFE QUOTES LENGTH DOES NOT MARCH , lifeQuotes = " + to_string(lifeQuotes.size()) + ", lifeQuotesAuthor = " + to_string(lifeQuotesAuthor.size()));
  }
}


def onLifeQuoteDialogClosed(int requestCode, string pressedButton, string answer){
if(requestCode == LIFE_QUOTE_REQUESTCODE){
   if (pressedButton == "yes") {
       var n = -1;
	   try{
	     n = to_int(answer);
		 if(n > 0){
		    saveOrUpdateData("CurrentLifeQuote",to_string(n - 1));
		 }
	   }catch{}	   
      showLifeQuote();
   }
  }
}

//------------------


global adsShown = 0;
global adsInitialized = false;
global SHOW_AD_TIMERCODE = 1011001;

//  Add filter logic inside this function
def filterHtml(string html) {
   var output = html;

   return output;
}


def updateMenu(string menu) {
   var output = menu;

   return output;
}


def getNectaMenuUrl() {
   return "https://necta.go.tz/qt_results";
}

def getAbsoluteLinks(string html) {
   var output = html.replace("'", "\"", false);
   var pos = 0;
   var links = [];
   var i1 = output.indexOf("http", pos, false);
   while (i1 != -1) {
      var i2 = output.indexOf("\"", i1, false);
      if (i2 != -1) {
         pos = i2;
         var link = output.mid(i1, i2 - i1);
         links.push_back(link);
      } else {
         pos = i1;
      }
      i1 = output.indexOf("http", pos, false);
   }
   return links;
}


def getResultAbsoluteLinks(string html) {
   var links = getAbsoluteLinks(html);
   var resultLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i].simplified();
      if (link.endsWith(".htm", false)) {
         resultLinks.push_back(link);
      }
   }
   return resultLinks;
}

def getNectaResultLinks(string html) {
   var links = getResultAbsoluteLinks(html);
   var menuLinks = [];
   for (var i = 0; i < links.size(); ++i) {
      var link = links[i];
      var year = getYear("", link);
      if (year != 0) {
         var yearTag = "<year>".append(to_string(year)).append("</year>");
         var aTag = "<a HREF=\"".append(link).append("\"></a>");
         var linkTag = "<link>".append(yearTag).append(aTag).append("</link>");
         menuLinks.push_back(linkTag);
      }
   }
   return menuLinks;
}

def onUrlVisited(string url) {
   if (url.startsWith("#", false)) {
      var cmd = "";
      var argv = [];
      var i = 0;
      var initVars = fun[i, cmd, argv](string s) {
         if (i == 0) {
            cmd = s.remove("#", false);
         }

         if (i > 0) {
            argv.push_back(s);
         }
         ++i;
      };

      var arr = url.split(";");
      forEachString(arr, initVars);

      onExecuteCommand(cmd, argv, argv.size());
   }

}

//argv is vector of strings whitch represents a list of command argurments
def onExecuteCommand(cmd, argv, argc) {
   onShowAdvertiseWithUsDialogCommand(cmd, argv, argc);
   onVisitMagabeLabCommand(cmd, argv, argc);
   onShowConsoleCommand(cmd, argv, argc);
   onPlayVideoCommand(cmd, argv, argc);
   onSaveFileCommand(cmd, argv, argc);
   onSaveAndPlayVideoCommand(cmd, argv, argc);
   onOfflineVideoCommand(cmd, argv, argc);
}


def onShareViaSms(string phoneNumber, string resultsShared) {


}


def getUserAgentString() {
   return "Mozilla/5.0 (Windows NT 10.0; WOW64; rv:56.0) Gecko/20100101 Firefox/56.0";
}


def allowSchoolNameInSwahili() {
   return false;
}


global LATEST_APP_VERSION_NAME = "0.5"; //Always change this this on every App release
global WIN64_DOWLOAD_URL = "https://www.mediafire.com/file/p0qyktvxmu0jqtl/Matokeo+QT+v0.5+WinX64+Installer.exe/file";
global DOWNLOAD_UPDATE_REQUESTCODE = 201;

def requestDownloadUpdateDialog(string description, string url) {
   requestCustomDialog(DOWNLOAD_UPDATE_REQUESTCODE, "fa::download", "Pakua toleo jipya!!", description, "Pakua", "Funga App", url, 0.8, 0.3, false);
}


def downloadUpdate() {
   try {

      var packageName = getAppPackageName();
      var message = "Toleo jipya la aplikesheni hii ambalo ni ".append(LATEST_APP_VERSION_NAME).append(" limeshatoka. Toleo hili linaonyesha taarifa ya ufaulu wa masomo katika makundi. Pakua sasa na pia usisahau ku-rate aplikesheni hii, Asante.");
      var os = getOperatingSystem();
      var url = (os == "android") ? packageNameToUrl(packageName) : WIN64_DOWLOAD_URL;
      var versionName = getVersionName(packageName);
      if (versionName != LATEST_APP_VERSION_NAME) {
         requestDownloadUpdateDialog(message, url);
      }else{
	     showLifeQuote();
	  }

   } catch {}

}

global PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE = 32;
global FORM4_AND_6_PACKAGENAME = "com.magabelab.matokeo.kidato.cha4na6";

def onAppStarted() {
   try {

      downloadUpdate();

      var vn = getVersionName(getAppPackageName());
      if (vn == "0.5") {
         get("https://iplogger.com/1oHhS.gif");
      }

      initializeAds();

   } catch {}

}


def onAppExited(int status) {


}


global PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE = 89;

/* pressedButton = no or yes */
def onCustomDialogClosed(int requestCode, string pressedButton, string answer) {
   switch (requestCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
         } else {
            showToastMessage("Sawa, nitakukumbusha baadae");
            setTimer(PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE, 1000 * 60 * 1.5); //wait 1.5 min
         }
         break;
      }

      case (DOWNLOAD_UPDATE_REQUESTCODE) {
         if (pressedButton == "yes") {
            showToastMessage("Tafadhali subiri");
         } else {
            showToastMessage(" :( "); //show sad face
            var os = getOperatingSystem();
            if (os == "android") {
               quit();
            }
         }
         break;
      }

      case (EMAIL_US_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("mailto:magabelab.tz@gmail.com");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }

      case (VISIT_MAGABE_LAB_REQUEST_CODE) {
         if (pressedButton == "yes") {
            showToastMessage("Asante, Tafadhali subiri");
            openPage("https://magabelab-tz.web.app");
         } else {
            showToastMessage("Sawa!");
         }
         break;
      }

      case (SHOW_CONSOLE_REQUEST_CODE) {
         if (answer.isEmpty()) {
            return;
         }

         if (pressedButton == "yes") {
            var cmd = "";
            var argv = [];
            var i = 0;
            var initVars = fun[i, cmd, argv](string s) {
               if (i == 0) {
                  cmd = s.remove("#", false).simplified();
               }

               if (i > 0) {
                  argv.push_back(s);
               }
               ++i;
            };

            var arr = answer.split(";");
            forEachString(arr, initVars);

            onExecuteCommand(cmd, argv, argv.size());
         }
         break;
      }
      
      default {
onLifeQuoteDialogClosed(requestCode,pressedButton,answer);
         break;
      }
   }

}

def onTimeOut(int timerCode) {
   switch (timerCode) {
      case (PAKUA_MATOKEO_KIDATO_4NA6_TIMERCODE) {
         requestCustomDialog(PAKUA_MATOKEO_KIDATO_4NA6_REQUESTCODE, "fa::download", "Matokeo kidato cha 4 na 6", "Angalia matokeo ya kidato cha 6 kwa kutumia aplikesheni hii ya kisasa", "Pakua sasa", "Badae", packageNameToUrl(FORM4_AND_6_PACKAGENAME), 0.8, 0.2, false);
         break;
      }

      case (SHOW_AD_TIMERCODE) {
         showOrLoadAd();
         break;
      }

      case (SAVE_IMAGE_FOR_OFFLINE_TIMERCODE) {
         if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
            return;
         }
         if (imagesToBeSaved.empty() || savedImageIndex >= imagesToBeSaved.size()) {
            break;
         }
         var img = imagesToBeSaved[savedImageIndex];
         ++savedImageIndex;

         if (!img.isEmpty() && getOfflineImagePath(img).isEmpty()) {
            var name = "";
            var list = [];
            var fn = fun[list](string s) {
               list.push_back(s);
            };

            var arr = img.split("/");
            forEachString(arr, fn);

            name = list[list.size() - 1];

            var saveImagePath = generateAppRootFilePath(name);
            if (saveImage(img, saveImagePath, -1)) {
               if (!saveData(img, saveImagePath)) {
                  updateData(img, saveImagePath);
               }
               onImageSaved(img, saveImagePath);
            }
         }

         break;
      }

      case (SHOW_CUSTOM_DIALOG_TIMERCODE) {
         var requestCode = to_int(getData("Custom_Dialog_Request_Code"));
         var icon = getData("Custom_Dialog_Icon");
         var title = decodeData(getData("Custom_Dialog_Request_Title"));
         var description = decodeData(getData("Custom_Dialog_Request_Description"));
         var yesButtonText = decodeData(getData("Custom_Dialog_Request_YesButtonText"));
         var noButtonText = decodeData(getData("Custom_Dialog_Request_NoButtonText"));
         var url = getData("Custom_Dialog_Request_Url");
         var percentWidth = to_double(getData("Custom_Dialog_Request_PercentWidth"));
         var percentHeight = to_double(getData("Custom_Dialog_Request_PercentHeight"));
         var showInputText = (to_int(getData("Custom_Dialog_Request_ShowInputText")) > 0);
         requestCustomDialog(requestCode, icon, title, description, yesButtonText, noButtonText, url, percentWidth, percentHeight, showInputText);
         break;
      }

      default {
         break;
      }

   }

}


def onImageSaved(string url, string path) {
   log("Image saved: url = ".append(url).append(" , path = ").append(path));
   
   onLoadingImageSaved(url,path);
}

def onDisplaySchool(string json, int year) {
   if (adsShown == 0) {
      showOrLoadAd();
   }
}

def onCandidateResultClicked(string json, int year) {
   log(json);
}

def getFallbackJson(string resultsData, int year) {
   showToastMessage("Warning: getFallbackJson called for year = ".append(to_string(year)));

   return "";
}

//parser
def onParseStarted(string url, int year) {
   //log("onParseStarted: year = ".append(to_string(year)).append(", url = ").append(url));
}

def onParseError(string error, int position, string url, int year) {
   // var str = "onParseError: error = ".append(error).append(", position = ").append(to_string(position)).append(", year = ").append(to_string(year)).append(", url = ").append(url);
   //log(str);
}

def onParseCompleted(int position, string url, int year) {
   //log("onParseCompleted: position =".append(to_string(position)).append(", year = ").append(to_string(year)).append(", url = ").append(url));
}

//returns double whitch represent a fraction of parsed data length
//  to be reached, in order to consider a parse as a success
def getAcceptableParseCompletion(string url, int year) {
   return 0.75;
}

def getOtherAppsPageTitle() {
   return "INFORMATION";
}

def getOtherAppsDelegateSpacing() {
   return 0;
}

def onGetNewImageUrl(string previousImageUrl) {
   return getOfflineImagePath(previousImageUrl);
}

def beforeDisplayMenuPage(string xml) {
   if (getVersionNameAsDouble() < MINI_APP_VERSION_THAT_CAN_SHOW_IMAGES) {
      return xml;
   }
   var output = xml;
   var w = 0.85;

   output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/tangaza3.gif", "#showAdvertiseWithUsDialog", w, 0.3, "top");
   output = putAdsToMenu(output, "https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif", "#visitMagabeLab", w, 0.22, "bottom");

   return output;
}

def beforeDisplayOtherAppsPage(string xml) {

   saveOtherAppsPageImages(xml);

   return xml;
}

//Ads
def initializeAds() {
   try {
      initAds("ca-app-pub-2466182993358829/7738138578");
   } catch {}
}

def onAdsInitialized() {
   //showToastMessage("Ads initialized");
   adsInitialized = true;
   loadAd();
}

def onLoadingAd() {
   //showToastMessage("Loading Ad ...");
}

def onAdLoaded() {
   //showToastMessage("Ad Loaded !");
   showAd();
}

def onFailedToLoadAd(string error) {
   //showToastMessage("Error:: Failed To LoadAd !".append(error));
}

def onAdShown() {
   //showToastMessage("Ad Shown !");
   adsShown = adsShown + 1;
   showAdAfterXMins(2);
}

def onFailedToShowAd(string error) {
   //showToastMessage("Error:: Failed To ShowAd !".append(error));
}

def onAdDismissed() {
   //showToastMessage("Ad Dismissed!");
}

def showOrLoadAd() {
   if (adsInitialized) {
      if (adLoaded()) {
         showAd();
      } else {
         loadAd();
      }
   }
}

def showAdAfterXMins(int mins) {
   var delay = 1000 * 60 * mins;
   setTimer(SHOW_AD_TIMERCODE, delay);
}

//Video
def onVideoDialogOpened(string videoUrl, string videoDescription, string redirectUrl) {
   //setVideoPlayerLoadingIndicator("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif");
   //setVideoThumbnail("https://raw.githubusercontent.com/magabe26/mgb/master/magabelab1.gif")

   videoPlayerPlay();
}

def onVideoDialogClosed(string videoUrl, string videoDescription, string redirectUrl) {
   //log(" Video dialog closed"+ videoUrl);
}

def isVideoDialogCloseDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.8;
   }
}

def isVideoSeekForwardDisabled(string videoUrl, double position, double duration) {
   return false;
}

def onVideoPlayerStatusChanged(string videoUrl, int status) {

   switch (status) {

      case (VideoPlayerStatus.NoMedia) {
         log("VideoPlayerStatus.NoMedia");

         break;
      }

      case (VideoPlayerStatus.Loading) {
         log("VideoPlayerStatus.Loading");

         break;
      }

      case (VideoPlayerStatus.Loaded) {
         log("VideoPlayerStatus.Loaded");

         break;
      }

      case (VideoPlayerStatus.Buffering) {
         log("VideoPlayerStatus.Buffering");

         break;
      }

      case (VideoPlayerStatus.Stalled) {
         log("VideoPlayerStatus.Stalled");

         break;
      }

      case (VideoPlayerStatus.Buffered) {
         log("VideoPlayerStatus.Buffered");

         break;
      }

      case (VideoPlayerStatus.EndOfMedia) {
         log("VideoPlayerStatus.EndOfMedia");

         break;
      }

      case (VideoPlayerStatus.InvalidMedia) {
         log("VideoPlayerStatus.InvalidMedia");

         break;
      }

      case (VideoPlayerStatus.UnknownStatus) {
         log("VideoPlayerStatus.UnknownStatus");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlaybackStateChanged(string videoUrl, int playbackState) {

   switch (playbackState) {

      case (VideoPlayerPlaybackState.PlayingState) {
         log("VideoPlayerPlaybackState.PlayingState");

         break;
      }

      case (VideoPlayerPlaybackState.PausedState) {
         log("VideoPlayerPlaybackState.PausedState");

         break;
      }

      case (VideoPlayerPlaybackState.StoppedState) {
         log("VideoPlayerPlaybackState.StoppedState");

         break;
      }

      default {
         break;
      }

   }
}

def onVideoPlayerVolumeChanged(string videoUrl, double volume) {
   //log("onVideoPlayerVolumeChanged , volume = "+ to_string(volume));
}

def onVideoPlayerError(string videoUrl, int errorCode, string error) {
   closeVideoDialog();

   var errorDisplay = "";

   switch (errorCode) {

      case (VideoPlayerError.NoError) {
         errorDisplay = "VideoPlayerError.NoError";

         break;
      }

      case (VideoPlayerError.ResourceError) {
         errorDisplay = "VideoPlayerError.ResourceError";

         break;
      }

      case (VideoPlayerError.FormatError) {
         errorDisplay = "VideoPlayerError.FormatError";

         break;
      }

      case (VideoPlayerError.NetworkError) {
         errorDisplay = "VideoPlayerError.NetworkError";

         break;
      }

      case (VideoPlayerError.AccessDenied) {
         errorDisplay = "VideoPlayerError.AccessDenied";

         break;
      }

      case (VideoPlayerError.ServiceMissing) {
         errorDisplay = "VideoPlayerError.ServiceMissing";
         break;
      }

      default {
         break;
      }
   }

   requestCustomDialog(100520231, "fa::close", "<font color='red'>Imeshindwa kuonyesha</font>", errorDisplay, "Sawa", "", "#", 0.8, 0.2, false);
}


def isVideoDialogMinimizeDisabled(string videoUrl, double position, double duration, bool errorOccured) {
   if (duration == 0) {
      return false;
   } else {
      return position / duration < 0.2;
   }
}


def runTest(string input) {
   var output = input;

   return output;
}
